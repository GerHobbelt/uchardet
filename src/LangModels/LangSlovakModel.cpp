/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovak *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 20:13:09.022988
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 4X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 6X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 64,SYM, 49,SYM, 33, 65,SYM,SYM, 29, 59, 31, 66,SYM, 26, 61, /* AX */
  SYM, 67,SYM, 49,SYM, 33, 68,SYM,SYM, 29, 59, 31, 69,SYM, 26, 61, /* BX */
   45, 19, 70, 55, 38, 41, 47, 50, 24, 25, 57, 51, 42, 23, 71, 39, /* CX */
   53, 54, 36, 34, 32, 62, 43,SYM, 44, 48, 27, 56, 46, 22, 72, 60, /* DX */
   45, 19, 73, 55, 38, 41, 47, 50, 24, 25, 57, 51, 42, 23, 74, 39, /* EX */
   53, 54, 36, 34, 32, 62, 43,SYM, 44, 48, 27, 56, 46, 22, 75,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 4X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 6X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 76, 31, 26, 77, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 78, 31, 26, 79, /* 9X */
  SYM,SYM,SYM, 49,SYM, 80,SYM,SYM,SYM,SYM, 59,SYM,SYM,SYM,SYM, 61, /* AX */
  SYM,SYM,SYM, 49,SYM,SYM,SYM,SYM,SYM, 81, 59,SYM, 33,SYM, 33, 61, /* BX */
   45, 19, 82, 55, 38, 41, 47, 50, 24, 25, 57, 51, 42, 23, 83, 39, /* CX */
   53, 54, 36, 34, 32, 62, 43,SYM, 44, 48, 27, 56, 46, 22, 84, 60, /* DX */
   45, 19, 85, 55, 38, 41, 47, 50, 24, 25, 57, 51, 42, 23, 86, 39, /* EX */
   53, 54, 36, 34, 32, 62, 43,SYM, 44, 48, 27, 56, 46, 22, 87,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 4X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 6X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   50, 46, 25, 88, 38, 48, 47, 50, 49, 51, 62, 62, 89, 90, 38, 47, /* 8X */
   25, 41, 41, 32, 43, 33, 33, 91, 92, 43, 46, 31, 31, 49,SYM, 24, /* 9X */
   19, 23, 34, 27, 93, 94, 26, 26, 57, 57,SYM, 95, 24, 59,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 19, 96, 42, 59,SYM,SYM,SYM,SYM, 61, 61,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 55, 55,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   53, 53, 39, 51, 39, 36, 23, 97, 42,SYM,SYM,SYM,SYM, 98, 48,SYM, /* DX */
   34, 60, 32, 54, 54, 36, 29, 29, 45, 27, 45, 56, 22, 22, 99,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 56, 44, 44,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 4X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 20, 15, 11,  2, 28, 30, 17,  4, 18,  8, 10, 12,  3,  0, /* 6X */
   13, 40,  6,  7,  5, 14,  9, 37, 35, 21, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   38, 63, 63, 25,100, 43, 46, 19,101, 24, 38, 24, 47, 47, 25,102, /* 8X */
  103, 39, 23, 39,104,105,106, 34,107, 32, 43,108, 27, 42, 42, 46, /* 9X */
  SYM,SYM, 57,SYM,SYM,SYM,SYM, 60,SYM,SYM,SYM, 57,SYM,SYM,109,110, /* AX */
  111, 58,SYM,SYM, 58,112,SYM,SYM, 49,113,114, 33, 33, 41, 41,115, /* BX */
  116, 54,SYM,SYM, 54, 36,SYM,SYM,SYM,SYM,SYM, 36, 62,117, 62, 52, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 52, 45, 45, 44,SYM,SYM, 44,118, /* DX */
  119, 29,SYM,SYM, 29,120,121, 19, 31, 31, 23, 26, 26,122, 34, 32, /* EX */
  123, 48, 27, 48, 56, 56,124,125, 22, 22,126, 61, 49, 61,127,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 92;
static const unsigned int Unicode_CharOrder[] =
{
   65,  1,  66, 20,  67, 15,  68, 11,  69,  2,  70, 28,  71, 30, 72, 17,
   73,  4,  74, 18,  75,  8,  76, 10,  77, 12,  78,  3,  79,  0, 80, 13,
   81, 40,  82,  6,  83,  7,  84,  5,  85, 14,  86,  9,  87, 37, 88, 35,
   89, 21,  90, 16,  97,  1,  98, 20,  99, 15, 100, 11, 101,  2,102, 28,
  103, 30, 104, 17, 105,  4, 106, 18, 107,  8, 108, 10, 109, 12,110,  3,
  111,  0, 112, 13, 113, 40, 114,  6, 115,  7, 116,  5, 117, 14,118,  9,
  119, 37, 120, 35, 121, 21, 122, 16, 193, 19, 196, 38, 201, 25,205, 23,
  211, 34, 212, 32, 214, 43, 218, 27, 221, 22, 225, 19, 228, 38,233, 25,
  237, 23, 243, 34, 244, 32, 246, 43, 250, 27, 253, 22, 268, 24,269, 24,
  270, 39, 271, 39, 282, 42, 283, 42, 313, 41, 314, 41, 317, 33,318, 33,
  327, 36, 328, 36, 340, 45, 341, 45, 344, 44, 345, 44, 352, 29,353, 29,
  356, 31, 357, 31, 381, 26, 382, 26,
};


/* Model Table:
 * Total sequences: 1198
 * First 512 sequences: 0.9724967373205526
 * Next 512 sequences (512-1024): 0.02707798928941092
 * Rest: 0.00042527339003644096
 * Negative sequences: TODO
 */
static const PRUint8 SlovakLangModel[] =
{
  2,2,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,0,
   0,3,2,3,1,3,2,3,1,0,3,0,2,3,2,0,1,2,0,0,0,1,0,
  2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,
   0,3,0,3,0,3,3,3,3,0,2,1,3,2,2,0,2,2,0,0,0,2,0,
  3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
   2,3,0,3,2,3,3,3,2,0,3,3,3,3,2,0,3,2,0,0,1,0,0,
  3,3,3,3,3,3,2,3,3,2,2,3,2,2,3,3,2,2,2,3,2,3,3,
   3,3,3,2,3,2,3,3,0,2,0,2,0,0,2,0,0,2,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,
   3,3,2,3,0,3,3,3,3,0,2,3,2,2,2,0,0,2,0,0,1,2,0,
  3,3,3,3,3,2,3,3,3,3,3,1,3,2,3,2,3,3,2,3,3,3,3,
   3,2,3,0,3,2,2,2,1,0,2,3,0,2,1,2,2,1,1,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,3,3,3,3,
   3,3,3,2,2,2,2,3,2,2,0,3,2,2,2,2,0,2,0,0,2,0,0,
  3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,2,2,2,3,2,3,2,
   3,2,2,1,3,2,0,2,3,2,2,1,0,2,2,0,0,2,0,0,1,0,0,
  3,3,3,2,3,3,3,2,2,3,3,3,2,2,3,3,2,2,2,3,2,3,3,
   2,2,3,2,3,2,2,2,0,3,2,2,0,2,2,0,0,0,0,0,2,2,1,
  3,3,3,3,3,2,3,3,2,0,3,3,1,3,3,2,3,2,0,3,2,3,3,
   3,2,3,2,2,1,3,2,0,2,0,0,0,2,0,3,2,0,2,2,1,2,2,
  3,3,3,3,3,3,2,3,3,2,3,2,2,2,3,2,2,2,2,3,2,3,3,
   3,2,3,2,3,2,2,3,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,2,2,3,2,3,3,
   3,2,2,2,2,2,2,2,0,3,3,2,2,2,2,0,0,0,2,2,0,2,0,
  3,3,3,3,3,3,2,3,2,0,2,2,3,3,3,2,0,0,2,3,3,3,2,
   3,1,2,2,2,0,0,1,0,3,0,2,1,1,0,3,0,1,0,0,1,0,2,
  3,3,3,3,3,3,3,2,2,0,3,2,2,2,3,2,1,2,0,3,2,2,2,
   3,1,2,0,2,2,2,0,2,3,1,2,0,2,0,2,0,0,2,2,0,2,0,
  2,2,2,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,0,
   2,3,1,3,1,2,3,3,2,0,2,0,2,1,2,0,2,2,0,0,0,0,0,
  3,3,3,3,3,2,2,2,3,2,2,2,1,0,3,2,2,3,0,2,0,2,1,
   3,0,2,0,3,1,0,2,2,0,0,2,0,2,0,0,0,2,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,2,2,3,2,3,2,3,3,
   2,1,2,1,2,0,2,2,2,0,2,2,0,2,2,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,2,2,3,2,3,1,3,2,0,2,1,3,2,3,3,
   2,1,2,0,2,1,2,0,0,0,2,1,0,2,2,1,0,0,2,0,2,1,2,
  3,3,3,3,3,3,2,3,2,3,2,2,3,2,3,2,2,2,2,2,2,0,0,
   3,2,0,0,3,0,3,2,0,0,2,2,0,1,0,1,0,0,0,0,0,0,0,
  0,0,0,3,0,3,3,3,3,3,3,3,3,3,2,3,3,2,3,0,3,0,0,
   0,2,0,2,0,0,3,1,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,
  3,3,3,3,3,2,3,3,2,2,3,3,2,0,3,2,2,2,3,3,2,3,2,
   2,2,2,1,2,0,2,2,0,1,0,1,0,2,0,1,0,0,0,0,1,2,0,
  2,2,2,3,2,3,3,3,3,3,3,2,3,3,2,3,3,3,2,0,3,0,0,
   0,2,0,2,2,1,3,2,3,0,1,1,0,2,1,0,0,0,0,0,0,0,0,
  0,0,0,2,0,2,3,2,2,3,2,2,3,2,0,3,3,2,2,0,2,0,0,
   0,2,0,1,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  0,2,0,3,0,3,3,3,3,3,3,2,3,3,0,3,2,2,2,0,2,0,0,
   0,2,0,2,0,0,3,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,2,3,0,3,0,2,0,2,2,0,0,0,2,0,0,0,
   3,0,1,1,1,0,3,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,
  2,0,2,2,0,3,3,2,2,2,2,2,3,2,0,3,3,3,0,0,1,0,0,
   0,2,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  3,3,3,3,3,0,1,2,2,1,2,3,0,0,3,0,0,0,1,0,2,0,0,
   3,0,2,0,0,0,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,
  1,0,0,3,0,3,3,3,2,3,3,3,2,3,0,3,3,2,0,0,2,0,0,
   0,3,0,2,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,2,3,1,2,1,2,0,2,0,3,0,0,1,0,2,0,3,0,
   2,0,2,0,1,2,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,0,2,2,2,3,1,2,3,2,0,0,2,0,1,2,0,0,
   3,2,1,0,1,0,2,0,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,2,3,2,0,2,3,2,2,1,3,1,0,2,1,2,0,2,0,
   0,0,2,0,2,0,0,2,0,0,0,2,0,0,1,0,0,0,0,0,2,0,0,
  3,3,0,0,1,0,2,0,1,0,0,2,0,1,2,0,0,0,0,2,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,2,3,3,3,3,3,2,1,0,0,2,2,0,0,0,2,0,0,
   0,0,0,3,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,3,0,0,0,2,3,2,0,0,2,0,3,0,1,1,0,0,2,0,0,
   0,2,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,3,0,2,3,2,1,1,2,3,3,3,0,1,2,0,0,0,3,0,0,
   0,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,2,2,3,3,0,0,1,0,2,0,2,2,2,0,0,1,0,0,0,1,0,
   1,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
  3,3,0,0,0,0,0,0,0,0,0,1,2,0,2,0,0,2,0,2,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,2,1,3,2,0,2,1,0,2,0,1,0,0,0,0,2,0,0,1,1,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
  0,0,0,2,0,2,1,0,1,0,0,2,0,0,0,2,2,0,0,0,2,0,0,
   0,3,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
  2,3,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
   0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,2,0,0,1,0,0,0,0,2,0,0,0,0,2,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,
   0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,
  0,0,0,2,0,2,2,0,2,0,2,0,1,0,0,1,2,0,2,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,2,0,2,2,2,0,0,2,2,2,0,0,0,0,2,0,0,1,0,0,
   0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,
   0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2SlovakModel =
{
  Iso_8859_2_CharToOrderMap,
  SlovakLangModel,
  46,
  (float)0.9724967373205526,
  PR_TRUE,
  "ISO-8859-2",
  "sk"
};

const SequenceModel Windows_1250SlovakModel =
{
  Windows_1250_CharToOrderMap,
  SlovakLangModel,
  46,
  (float)0.9724967373205526,
  PR_TRUE,
  "WINDOWS-1250",
  "sk"
};

const SequenceModel Ibm852SlovakModel =
{
  Ibm852_CharToOrderMap,
  SlovakLangModel,
  46,
  (float)0.9724967373205526,
  PR_TRUE,
  "IBM852",
  "sk"
};

const SequenceModel Mac_CentraleuropeSlovakModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SlovakLangModel,
  46,
  (float)0.9724967373205526,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "sk"
};

const LanguageModel SlovakModel =
{
  "sk",
  Unicode_CharOrder,
  92,
  SlovakLangModel,
  46,
  (float)0.9724967373205526,
};
