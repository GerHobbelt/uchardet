/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovak *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-21 13:00:32.554155
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 4X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 6X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 70,SYM, 50,SYM, 31, 58,SYM,SYM, 29, 54, 33, 71,SYM, 30, 63, /* AX */
  SYM, 72,SYM, 50,SYM, 31, 58,SYM,SYM, 29, 54, 33, 73,SYM, 30, 63, /* BX */
   48, 16, 66, 51, 36, 46, 47, 49, 24, 25, 56, 41, 44, 23, 61, 39, /* CX */
   57, 53, 38, 32, 35, 55, 45,SYM, 42, 52, 26, 74, 43, 22, 68, 59, /* DX */
   48, 16, 66, 51, 36, 46, 47, 49, 24, 25, 56, 41, 44, 23, 61, 39, /* EX */
   57, 53, 38, 32, 35, 55, 45,SYM, 42, 52, 26, 75, 43, 22, 68,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 4X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 6X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 58, 33, 30, 76, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 58, 33, 30, 77, /* 9X */
  SYM,SYM,SYM, 50,SYM, 78,SYM,SYM,SYM,SYM, 54,SYM,SYM,SYM,SYM, 63, /* AX */
  SYM,SYM,SYM, 50,SYM,SYM,SYM,SYM,SYM, 79, 54,SYM, 31,SYM, 31, 63, /* BX */
   48, 16, 66, 51, 36, 46, 47, 49, 24, 25, 56, 41, 44, 23, 61, 39, /* CX */
   57, 53, 38, 32, 35, 55, 45,SYM, 42, 52, 26, 80, 43, 22, 68, 59, /* DX */
   48, 16, 66, 51, 36, 46, 47, 49, 24, 25, 56, 41, 44, 23, 61, 39, /* EX */
   57, 53, 38, 32, 35, 55, 45,SYM, 42, 52, 26, 81, 43, 22, 68,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 4X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 6X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
   49, 43, 25, 66, 36, 52, 47, 49, 50, 41, 55, 55, 61, 82, 36, 47, /* 8X */
   25, 46, 46, 35, 45, 31, 31, 58, 58, 45, 43, 33, 33, 50,SYM, 24, /* 9X */
   16, 23, 32, 26, 83, 84, 30, 30, 56, 56,SYM, 85, 24, 54,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 16, 66, 44, 54,SYM,SYM,SYM,SYM, 63, 63,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 51, 51,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   57, 57, 39, 41, 39, 38, 23, 61, 44,SYM,SYM,SYM,SYM, 68, 52,SYM, /* DX */
   32, 59, 35, 53, 53, 38, 29, 29, 48, 26, 48, 86, 22, 22, 68,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 87, 42, 42,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 4X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 15, 12,  2, 28, 27, 17,  5, 18,  7,  9, 11,  3,  1, /* 6X */
   14, 40,  4,  6,  8, 13, 10, 34, 37, 21, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
   36, 69, 69, 25, 88, 45, 43, 16, 89, 24, 36, 24, 47, 47, 25, 90, /* 8X */
   91, 39, 23, 39, 67, 67, 92, 32, 93, 35, 45, 60, 26, 44, 44, 43, /* 9X */
  SYM,SYM, 56,SYM,SYM,SYM,SYM, 59,SYM,SYM,SYM, 56,SYM,SYM, 94, 95, /* AX */
   96, 64,SYM,SYM, 64, 97,SYM,SYM, 50, 98, 99, 31, 31, 46, 46,100, /* BX */
  101, 53,SYM,SYM, 53, 38,SYM,SYM,SYM,SYM,SYM, 38, 55, 60, 55, 62, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 62, 48, 48, 42,SYM,SYM, 42,102, /* DX */
  103, 29,SYM,SYM, 29, 58, 58, 16, 33, 33, 23, 30, 30, 65, 32, 35, /* EX */
   65, 52, 26, 52,104,105,106,107, 22, 22,108, 63, 50, 63,109,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 98;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 19,  67, 15,  68, 12,  69,  2,  70, 28,  71, 27, 72, 17,
   73,  5,  74, 18,  75,  7,  76,  9,  77, 11,  78,  3,  79,  1, 80, 14,
   81, 40,  82,  4,  83,  6,  84,  8,  85, 13,  86, 10,  87, 34, 88, 37,
   89, 21,  90, 20,  97,  0,  98, 19,  99, 15, 100, 12, 101,  2,102, 28,
  103, 27, 104, 17, 105,  5, 106, 18, 107,  7, 108,  9, 109, 11,110,  3,
  111,  1, 112, 14, 113, 40, 114,  4, 115,  6, 116,  8, 117, 13,118, 10,
  119, 34, 120, 37, 121, 21, 122, 20, 193, 16, 196, 36, 201, 25,203, 41,
  205, 23, 211, 32, 212, 35, 214, 45, 218, 26, 220, 43, 221, 22,225, 16,
  228, 36, 233, 25, 235, 41, 237, 23, 243, 32, 244, 35, 246, 45,250, 26,
  252, 43, 253, 22, 262, 47, 263, 47, 268, 24, 269, 24, 270, 39,271, 39,
  282, 44, 283, 44, 313, 46, 314, 46, 317, 31, 318, 31, 327, 38,328, 38,
  340, 48, 341, 48, 344, 42, 345, 42, 352, 29, 353, 29, 356, 33,357, 33,
  381, 30, 382, 30,
};


/* Model Table:
 * Total considered sequences: 1410 / 2401
 * - Positive sequences: first 773 (0.9950030300775062)
 * - Probable sequences: next 277 (1050-773) (0.003999347913144824)
 * - Neutral sequences: last 1351 (0.0009976220093489419)
 * - Negative sequences: 991 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SlovakLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,2,
   3,0,3,3,3,3,3,3,1,3,3,0,0,3,3,3,2,1,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,0,1,
   3,2,0,3,3,3,3,3,0,0,3,0,0,3,3,3,1,1,2,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,
   3,0,3,3,3,3,3,3,2,3,3,0,0,3,3,3,1,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,
   3,3,3,3,3,3,3,0,3,0,3,1,1,1,0,1,1,2,0,1,3,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,
   3,3,3,3,3,3,3,0,3,2,2,3,0,2,2,0,2,2,0,2,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,3,
   3,3,2,3,3,3,3,2,3,3,2,0,1,3,1,0,3,1,3,0,0,0,0,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,
   2,3,3,3,3,0,1,2,2,3,3,3,1,0,2,0,2,2,0,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,2,1,1,2,3,3,3,
   2,3,3,1,2,0,1,3,3,0,2,3,1,0,3,0,0,2,2,1,0,2,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,3,3,1,3,3,3,3,3,
   2,3,3,2,2,2,0,0,3,1,2,1,1,1,2,2,0,2,2,1,2,1,1,0,1,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,
   3,3,3,3,3,3,3,1,3,0,2,2,2,0,2,1,2,0,0,1,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,1,2,3,3,3,3,3,2,2,3,3,3,3,3,
   3,3,3,2,1,3,2,0,1,0,0,3,3,0,2,3,0,1,0,0,2,1,0,0,2,
  3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,1,2,3,2,3,2,3,
   2,3,3,1,2,1,2,0,2,0,1,3,3,1,1,0,0,1,0,2,1,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   2,3,3,3,2,3,3,3,3,0,3,3,1,0,3,0,0,2,2,1,2,1,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,1,
   3,1,0,3,3,3,3,2,1,2,2,0,0,3,1,3,2,1,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,1,2,3,3,3,3,3,1,2,0,3,1,3,
   2,3,3,0,2,3,0,1,1,2,0,3,3,0,2,0,0,2,0,1,0,1,2,0,0,
  3,3,3,3,3,3,3,3,3,3,2,1,2,3,1,3,2,3,1,2,3,3,0,3,
   0,3,3,2,2,0,0,0,1,2,0,0,0,0,1,0,3,1,0,0,0,0,0,0,0,
  0,1,1,3,3,1,3,3,3,3,3,3,3,2,3,3,0,3,3,3,3,0,0,0,
   3,0,0,2,1,3,3,3,0,1,0,0,0,0,2,1,0,0,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,1,2,2,0,3,3,2,
   2,3,3,1,1,3,0,3,2,0,2,2,2,0,2,0,2,1,0,2,0,2,2,0,2,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,2,3,3,1,0,3,
   3,1,3,0,1,3,2,1,2,1,0,0,1,0,1,0,0,2,0,2,0,1,0,0,0,
  3,3,3,3,3,3,3,3,2,3,2,3,3,3,1,3,3,2,3,3,2,3,3,3,
   3,3,2,2,0,2,1,2,1,0,2,1,0,0,1,0,0,1,2,1,1,1,1,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   2,3,3,1,0,3,0,2,3,3,2,0,0,0,2,0,0,1,0,1,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,1,0,0,
   3,0,2,2,2,3,3,2,0,3,1,0,0,0,3,0,1,0,0,0,0,2,0,0,0,
  0,0,0,3,3,0,3,3,3,2,3,3,2,0,2,3,0,2,1,3,3,0,0,0,
   2,0,0,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,2,0,3,3,1,3,3,3,3,3,3,3,0,3,3,0,3,3,3,3,0,0,0,
   3,0,0,2,1,3,3,2,0,3,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,
  3,3,3,3,1,3,3,3,3,3,1,2,0,3,0,2,2,1,0,0,0,0,0,3,
   0,0,1,0,0,3,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
  0,2,1,3,3,0,2,3,3,3,2,3,3,1,2,3,0,3,1,1,3,0,0,0,
   2,0,0,2,2,2,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  1,2,0,3,3,0,3,3,3,3,3,3,3,0,3,3,0,3,1,3,3,0,0,0,
   3,0,0,0,2,3,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,2,2,2,3,0,0,3,3,2,2,0,3,0,1,
   0,2,2,3,1,0,0,1,3,0,2,0,0,0,0,0,0,1,0,2,0,2,0,0,0,
  3,3,3,2,3,3,2,3,3,3,1,2,1,3,2,1,3,0,1,1,0,3,1,3,
   1,3,1,2,3,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,3,3,3,2,0,3,3,0,2,2,0,1,0,0,0,3,
   2,2,1,0,0,3,0,2,1,3,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
  3,3,3,3,1,3,3,3,0,1,0,2,3,3,0,0,2,0,1,3,0,0,0,3,
   0,2,1,0,0,3,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,
  3,3,2,3,1,0,3,3,2,0,2,3,1,3,0,1,0,1,1,3,0,0,0,0,
   1,0,3,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,3,3,1,2,1,3,2,1,3,3,0,3,2,0,1,2,3,3,0,0,0,
   0,0,0,3,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,1,2,2,0,1,1,0,0,1,2,2,0,0,1,1,0,1,0,0,0,0,
   1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,1,2,2,0,1,1,1,0,1,0,2,0,1,0,2,0,1,
   0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,
  0,0,0,0,3,0,3,2,2,3,3,2,3,0,1,2,0,1,2,3,3,0,0,0,
   1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,2,2,1,2,2,3,0,1,0,2,0,0,1,0,1,0,1,3,0,0,0,
   3,0,0,1,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,2,0,3,0,2,3,0,2,1,0,2,3,0,0,0,0,0,0,2,0,1,
   0,0,0,0,2,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,0,0,0,1,0,0,0,0,2,1,3,0,0,2,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,0,0,0,2,0,0,0,0,2,0,3,0,0,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,2,0,0,2,0,0,0,0,1,0,0,3,0,0,0,0,0,1,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,2,2,2,1,1,1,2,2,0,0,1,0,0,2,0,1,0,2,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
  0,0,0,1,2,0,1,3,2,1,0,1,1,0,2,2,0,1,1,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  0,0,0,2,2,0,1,1,2,1,0,2,0,0,1,1,0,1,0,1,0,0,0,0,
   0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,2,0,0,0,0,
   0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
  2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
   0,0,0,0,0,2,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2SlovakModel =
{
  Iso_8859_2_CharToOrderMap,
  SlovakLangModel,
  49,
  (float)0.9990023779906511,
  PR_TRUE,
  "ISO-8859-2",
  "sk"
};

const SequenceModel Windows_1250SlovakModel =
{
  Windows_1250_CharToOrderMap,
  SlovakLangModel,
  49,
  (float)0.9990023779906511,
  PR_TRUE,
  "WINDOWS-1250",
  "sk"
};

const SequenceModel Ibm852SlovakModel =
{
  Ibm852_CharToOrderMap,
  SlovakLangModel,
  49,
  (float)0.9990023779906511,
  PR_TRUE,
  "IBM852",
  "sk"
};

const SequenceModel Mac_CentraleuropeSlovakModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SlovakLangModel,
  49,
  (float)0.9990023779906511,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "sk"
};

const LanguageModel SlovakModel =
{
  "sk",
  Unicode_CharOrder,
  98,
  SlovakLangModel,
  49,
  (float)0.9998118217433309,
};
