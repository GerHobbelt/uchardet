/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovak *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:25:49.974197
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 4X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 6X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 69,SYM, 47,SYM, 31, 54,SYM,SYM, 28, 63, 33, 70,SYM, 30, 58, /* AX */
  SYM, 71,SYM, 47,SYM, 31, 54,SYM,SYM, 28, 63, 33, 72,SYM, 30, 58, /* BX */
   46, 17, 66, 52, 36, 42, 49, 50, 24, 25, 57, 41, 45, 23, 59, 39, /* CX */
   62, 53, 38, 32, 35, 60, 48,SYM, 43, 51, 26, 67, 44, 22, 73, 56, /* DX */
   46, 17, 66, 52, 36, 42, 49, 50, 24, 25, 57, 41, 45, 23, 59, 39, /* EX */
   62, 53, 38, 32, 35, 60, 48,SYM, 43, 51, 26, 67, 44, 22, 74,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 4X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 6X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 28,SYM, 54, 33, 30, 75, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 28,SYM, 54, 33, 30, 76, /* 9X */
  SYM,SYM,SYM, 47,SYM, 77,SYM,SYM,SYM,SYM, 63,SYM,SYM,SYM,SYM, 58, /* AX */
  SYM,SYM,SYM, 47,SYM,SYM,SYM,SYM,SYM, 78, 63,SYM, 31,SYM, 31, 58, /* BX */
   46, 17, 66, 52, 36, 42, 49, 50, 24, 25, 57, 41, 45, 23, 59, 39, /* CX */
   62, 53, 38, 32, 35, 60, 48,SYM, 43, 51, 26, 67, 44, 22, 79, 56, /* DX */
   46, 17, 66, 52, 36, 42, 49, 50, 24, 25, 57, 41, 45, 23, 59, 39, /* EX */
   62, 53, 38, 32, 35, 60, 48,SYM, 43, 51, 26, 67, 44, 22, 80,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 4X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 6X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
   50, 44, 25, 66, 36, 51, 49, 50, 47, 41, 60, 60, 59, 81, 36, 49, /* 8X */
   25, 42, 42, 35, 48, 31, 31, 54, 54, 48, 44, 33, 33, 47,SYM, 24, /* 9X */
   17, 23, 32, 26, 82, 83, 30, 30, 57, 57,SYM, 84, 24, 63,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 17, 66, 45, 63,SYM,SYM,SYM,SYM, 58, 58,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 52, 52,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   62, 62, 39, 41, 39, 38, 23, 59, 45,SYM,SYM,SYM,SYM, 85, 51,SYM, /* DX */
   32, 56, 35, 53, 53, 38, 28, 28, 46, 26, 46, 67, 22, 22, 86,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 67, 43, 43,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 4X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 15, 14,  2, 29, 27, 16,  4, 18,  8, 10, 11,  3,  1, /* 6X */
   13, 40,  5,  6,  7, 12,  9, 34, 37, 21, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
   36, 61, 61, 25, 87, 48, 44, 17, 88, 24, 36, 24, 49, 49, 25, 89, /* 8X */
   90, 39, 23, 39, 91, 92, 93, 32, 94, 35, 48, 64, 26, 45, 45, 44, /* 9X */
  SYM,SYM, 57,SYM,SYM,SYM,SYM, 56,SYM,SYM,SYM, 57,SYM,SYM, 95, 96, /* AX */
   97, 65,SYM,SYM, 65, 98,SYM,SYM, 47, 68, 68, 31, 31, 42, 42, 99, /* BX */
  100, 53,SYM,SYM, 53, 38,SYM,SYM,SYM,SYM,SYM, 38, 60, 64, 60, 55, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 55, 46, 46, 43,SYM,SYM, 43,101, /* DX */
  102, 28,SYM,SYM, 28, 54, 54, 17, 33, 33, 23, 30, 30,103, 32, 35, /* EX */
  104, 51, 26, 51, 67, 67,105,106, 22, 22,107, 58, 47, 58,108,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 94;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 20,  67, 15,  68, 14,  69,  2,  70, 29,  71, 27, 72, 16,
   73,  4,  74, 18,  75,  8,  76, 10,  77, 11,  78,  3,  79,  1, 80, 13,
   81, 40,  82,  5,  83,  6,  84,  7,  85, 12,  86,  9,  87, 34, 88, 37,
   89, 21,  90, 19,  97,  0,  98, 20,  99, 15, 100, 14, 101,  2,102, 29,
  103, 27, 104, 16, 105,  4, 106, 18, 107,  8, 108, 10, 109, 11,110,  3,
  111,  1, 112, 13, 113, 40, 114,  5, 115,  6, 116,  7, 117, 12,118,  9,
  119, 34, 120, 37, 121, 21, 122, 19, 193, 17, 196, 36, 201, 25,203, 41,
  205, 23, 211, 32, 212, 35, 218, 26, 220, 44, 221, 22, 225, 17,228, 36,
  233, 25, 235, 41, 237, 23, 243, 32, 244, 35, 250, 26, 252, 44,253, 22,
  268, 24, 269, 24, 270, 39, 271, 39, 282, 45, 283, 45, 313, 42,314, 42,
  317, 31, 318, 31, 327, 38, 328, 38, 340, 46, 341, 46, 344, 43,345, 43,
  352, 28, 353, 28, 356, 33, 357, 33, 381, 30, 382, 30,
};


/* Model Table:
 * Total considered sequences: 1383 / 2209
 * - Positive sequences: first 768 (0.9950176374237621)
 * - Probable sequences: next 243 (1011-768) (0.0039886852153107055)
 * - Neutral sequences: last 1198 (0.0009936773609271476)
 * - Negative sequences: 826 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SlovakLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,1,
   1,3,1,1,3,3,3,3,3,0,3,3,0,0,3,3,3,2,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,
   1,3,1,0,3,3,3,3,3,1,0,3,0,0,3,3,2,1,3,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
   3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,3,3,1,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,
   3,3,3,3,3,3,3,3,0,3,0,2,2,0,1,0,1,1,0,0,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,
   3,3,3,1,3,3,3,3,2,3,3,2,0,1,3,2,0,2,0,0,3,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,
   3,3,3,3,3,3,3,3,0,3,2,2,3,1,1,2,0,2,0,0,0,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,
   3,3,3,3,2,1,3,0,2,1,3,2,2,1,0,1,0,1,0,0,0,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,2,3,3,3,3,
   3,2,3,3,2,2,2,0,1,3,1,2,1,0,0,3,2,0,0,0,1,1,2,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,2,3,1,2,1,3,3,
   3,3,3,3,2,1,2,2,2,3,0,1,3,1,1,3,0,0,0,1,1,1,0,1,
  3,3,3,3,3,3,3,3,3,0,3,2,3,3,3,3,3,3,1,3,3,3,3,
   3,3,3,3,2,3,0,2,1,2,0,0,3,3,0,3,3,0,0,1,0,0,2,2,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,
   3,2,3,3,3,3,3,3,0,3,1,2,2,2,0,2,0,1,1,0,0,1,0,0,
  3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,2,2,3,3,2,
   3,2,3,3,2,2,3,2,1,3,0,2,3,3,1,0,0,0,0,0,0,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,
   1,3,2,0,3,3,2,3,2,1,2,1,0,0,3,1,3,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,2,3,2,3,3,2,3,3,3,0,1,2,3,1,
   3,2,3,3,1,3,2,0,2,2,1,0,3,3,1,2,0,0,0,2,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,
   3,2,3,3,2,3,1,3,3,3,0,3,3,0,0,3,0,0,0,3,2,1,1,1,
  3,3,3,3,3,3,2,3,3,2,3,2,3,1,3,3,3,2,1,2,3,3,1,
   3,0,3,3,1,0,2,0,0,1,1,0,1,0,1,1,0,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,1,3,1,0,1,3,3,
   2,2,3,2,1,3,1,0,3,1,0,2,2,1,0,1,0,0,0,2,0,1,0,3,
  0,0,0,3,1,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,0,
   0,3,0,0,2,3,0,3,3,0,1,0,0,0,0,2,1,1,0,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,2,1,0,
   3,3,1,3,2,3,1,1,1,2,0,2,0,1,0,1,0,0,0,0,0,2,1,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   3,1,3,3,2,3,1,0,2,3,3,2,0,0,2,2,0,1,0,0,0,1,0,0,
  3,3,3,3,3,3,3,2,3,2,3,3,3,1,3,3,2,3,3,2,3,3,3,
   3,3,3,2,1,2,0,1,3,2,1,1,1,1,2,1,0,0,0,1,1,2,1,0,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,
   0,3,0,2,2,3,1,3,1,0,3,1,0,0,1,3,0,0,0,0,1,0,0,0,
  1,0,1,3,0,3,3,3,3,3,3,3,1,2,3,3,3,0,1,3,3,0,0,
   0,2,0,0,0,3,0,2,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,
  2,1,0,3,1,3,3,3,3,3,3,3,0,3,3,3,2,0,3,3,2,0,0,
   0,3,0,0,2,3,0,3,1,0,3,0,0,0,0,2,0,0,0,0,1,0,0,0,
  3,3,3,3,3,1,2,3,3,1,3,2,3,0,0,2,1,2,0,0,2,0,0,
   3,0,0,1,0,3,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,
  1,2,2,3,1,3,2,3,2,2,3,3,1,2,3,3,3,0,1,3,2,0,0,
   0,2,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,2,0,3,0,3,3,3,3,3,3,3,0,3,3,3,3,0,0,3,3,0,0,
   0,3,0,0,1,3,1,3,1,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,
  3,3,3,3,3,3,2,2,1,2,3,3,3,2,2,0,3,3,0,0,2,3,0,
   2,0,3,2,2,1,1,0,1,3,0,2,0,1,0,0,0,0,0,0,0,2,0,0,
  3,3,3,3,3,1,3,3,3,3,3,2,3,3,0,1,1,2,0,0,1,0,0,
   3,2,1,1,1,3,0,0,2,1,3,0,0,0,0,1,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,2,3,3,0,3,2,3,2,1,1,1,3,2,1,1,3,0,
   3,0,2,2,2,1,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,1,3,0,2,2,3,0,3,1,0,2,0,0,3,0,0,
   3,0,2,1,0,3,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,
  3,3,1,3,0,2,3,1,3,2,0,3,3,0,1,1,1,0,1,0,3,0,0,
   0,1,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,3,1,3,1,3,0,0,3,3,0,3,3,2,1,0,1,2,3,0,0,
   0,1,0,0,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,0,1,3,1,1,1,0,1,1,2,0,2,0,1,1,1,1,0,0,0,
   0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
  3,3,3,3,3,3,3,2,1,0,2,1,1,1,2,2,2,0,2,0,0,2,0,
   1,0,0,0,1,0,2,0,0,1,0,2,0,0,0,0,0,0,0,0,0,1,0,0,
  0,0,0,1,0,3,3,2,2,3,3,1,0,1,3,2,0,0,2,3,3,0,0,
   0,0,0,0,0,1,0,3,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  0,0,0,2,0,2,2,3,0,0,1,1,0,0,2,1,1,0,0,3,1,1,0,
   0,3,0,0,1,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,0,1,3,2,2,1,1,3,3,1,1,1,0,0,0,1,1,0,
   1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
  3,3,0,0,0,0,2,1,1,0,0,2,3,0,0,0,1,2,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,0,0,0,2,1,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,
   0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
  1,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,2,2,1,2,1,1,0,0,2,0,0,0,1,2,1,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,2,0,1,2,0,1,1,0,0,1,1,0,0,1,1,0,0,0,
   0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2SlovakModel =
{
  Iso_8859_2_CharToOrderMap,
  SlovakLangModel,
  47,
  (float)0.9990063226390729,
  PR_TRUE,
  "ISO-8859-2",
  "sk"
};

const SequenceModel Windows_1250SlovakModel =
{
  Windows_1250_CharToOrderMap,
  SlovakLangModel,
  47,
  (float)0.9990063226390729,
  PR_TRUE,
  "WINDOWS-1250",
  "sk"
};

const SequenceModel Ibm852SlovakModel =
{
  Ibm852_CharToOrderMap,
  SlovakLangModel,
  47,
  (float)0.9990063226390729,
  PR_TRUE,
  "IBM852",
  "sk"
};

const SequenceModel Mac_CentraleuropeSlovakModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SlovakLangModel,
  47,
  (float)0.9990063226390729,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "sk"
};

const LanguageModel SlovakModel =
{
  "sk",
  Unicode_CharOrder,
  94,
  SlovakLangModel,
  47,
  5,
  (float)0.37747196381525266,
  27,
  (float)0.034743885663659047,
};
