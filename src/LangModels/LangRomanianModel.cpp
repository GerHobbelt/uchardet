/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Romanian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:14:02.581406
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 4X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 6X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 69,SYM, 43,SYM, 48, 64,SYM,SYM, 33, 73, 72, 68,SYM, 39, 61, /* AX */
  SYM, 69,SYM, 43,SYM, 48, 64,SYM,SYM, 33, 74, 72, 68,SYM, 39, 61, /* BX */
   75, 31, 24, 14, 41, 76, 40, 44, 34, 30, 67, 56, 54, 36, 21, 60, /* CX */
   53, 49, 66, 35, 51, 52, 37,SYM, 50, 65, 45, 77, 38, 46, 78, 55, /* DX */
   79, 31, 24, 14, 41, 80, 40, 44, 34, 30, 67, 56, 54, 36, 21, 60, /* EX */
   53, 49, 66, 35, 51, 52, 37,SYM, 50, 65, 45, 81, 38, 46, 82,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 4X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 6X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 69, 69, 43,SYM,SYM, 33,SYM, 33,SYM, 19,SYM, 68,SYM, 68, 61, /* AX */
  SYM,SYM, 34, 43, 39,SYM,SYM,SYM, 39, 34, 19,SYM, 83, 84, 71, 61, /* BX */
   47, 31, 24, 14, 41, 40, 58, 44, 42, 30, 57, 56, 63, 36, 21, 62, /* CX */
   53, 49, 59, 35, 51, 52, 37, 64, 85, 86, 45, 70, 38, 67, 20, 55, /* DX */
   47, 31, 24, 14, 41, 40, 58, 44, 42, 30, 57, 56, 63, 36, 21, 62, /* EX */
   53, 49, 59, 35, 51, 52, 37, 64, 87, 88, 45, 70, 38, 67, 20, 71, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 4X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 6X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 33,SYM, 64, 72, 39, 68, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 33,SYM, 64, 72, 39, 68, /* 9X */
  SYM,SYM,SYM, 43,SYM, 69,SYM,SYM,SYM,SYM, 89,SYM,SYM,SYM,SYM, 61, /* AX */
  SYM,SYM,SYM, 43,SYM,SYM,SYM,SYM,SYM, 69, 90,SYM, 48,SYM, 48, 61, /* BX */
   91, 31, 24, 14, 41, 92, 40, 44, 34, 30, 67, 56, 54, 36, 21, 60, /* CX */
   53, 49, 66, 35, 51, 52, 37,SYM, 50, 65, 45, 93, 38, 46, 94, 55, /* DX */
   95, 31, 24, 14, 41, 96, 40, 44, 34, 30, 67, 56, 54, 36, 21, 60, /* EX */
   53, 49, 66, 35, 51, 52, 37,SYM, 50, 65, 45, 97, 38, 46, 98,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 4X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 16,  9, 11,  1, 18, 15, 23,  0, 25, 26,  6, 12,  4,  8, /* 6X */
   13, 32,  3, 10,  5,  7, 17, 29, 27, 28, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
   44, 38, 30, 24, 41, 65, 40, 44, 43, 56, 52, 52, 21, 68, 41, 40, /* 8X */
   30, 99,100, 51, 37, 48, 48, 64, 64, 37, 38, 72, 72, 43,SYM, 34, /* 9X */
   31, 36, 35, 45, 69, 69, 39, 39, 67, 67,SYM, 68, 34,101,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 31, 24, 54,102,SYM,SYM,SYM,SYM, 61, 61,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 14, 14,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   53, 53, 60, 56, 60, 66, 36, 21, 54,SYM,SYM,SYM,SYM,103, 65,SYM, /* DX */
   35, 55, 51, 49, 49, 66, 33, 33,104, 45,105,106, 46, 46,107,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,108, 50, 50,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 66;
static const unsigned int Unicode_CharOrder[] =
{
   65,  2,  66, 16,  67,  9,  68, 11,  69,  1,  70, 18,  71, 15, 72, 23,
   73,  0,  74, 25,  75, 26,  76,  6,  77, 12,  78,  4,  79,  8, 80, 13,
   81, 32,  82,  3,  83, 10,  84,  5,  85,  7,  86, 17,  87, 29, 88, 27,
   89, 28,  90, 22,  97,  2,  98, 16,  99,  9, 100, 11, 101,  1,102, 18,
  103, 15, 104, 23, 105,  0, 106, 25, 107, 26, 108,  6, 109, 12,110,  4,
  111,  8, 112, 13, 113, 32, 114,  3, 115, 10, 116,  5, 117,  7,118, 17,
  119, 29, 120, 27, 121, 28, 122, 22, 193, 31, 194, 24, 201, 30,206, 21,
  225, 31, 226, 24, 233, 30, 238, 21, 258, 14, 259, 14, 536, 19,537, 19,
  538, 20, 539, 20,
};


/* Model Table:
 * Total considered sequences: 1337 / 1089
 * - Positive sequences: first 478 (0.9950281325668789)
 * - Probable sequences: next 301 (779-478) (0.003975199459074541)
 * - Neutral sequences: last 310 (0.0009966679740465167)
 * - Negative sequences: -248 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 RomanianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,0,3,3,1,3,3,3,2,2,2,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,0,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,1,3,3,0,3,3,3,3,3,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,2,3,2,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,3,3,0,0,2,3,3,3,2,2,0,3,2,2,1,0,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,2,3,3,3,3,1,3,2,2,2,1,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,2,3,3,3,2,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,1,3,3,0,3,3,3,3,3,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,2,2,3,2,2,3,1,2,3,3,1,3,1,2,1,2,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,0,3,1,3,3,3,1,3,0,3,2,2,2,2,
  3,3,3,3,3,2,3,3,3,2,3,3,3,2,3,3,3,3,2,1,0,1,2,2,2,3,2,0,3,3,2,2,0,
  3,3,3,2,3,2,2,3,3,3,3,2,3,3,3,2,3,2,3,0,2,2,1,2,3,1,1,1,3,2,2,2,0,
  3,3,3,3,2,3,3,3,3,2,3,2,2,3,3,1,1,1,2,1,3,1,2,3,3,1,2,0,2,0,2,2,0,
  3,1,1,3,3,3,3,3,1,3,3,3,3,3,0,3,3,3,1,3,3,1,3,0,0,2,1,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,1,2,3,3,1,3,3,2,3,1,0,0,1,1,3,3,1,1,1,3,2,2,1,1,
  3,3,3,3,3,2,3,3,3,3,3,3,2,1,3,2,3,2,2,1,3,2,2,2,2,2,1,0,3,2,2,2,0,
  3,3,3,3,2,1,3,3,3,2,3,2,1,1,3,1,1,1,0,1,0,1,1,1,3,1,2,0,2,0,2,2,0,
  3,3,3,3,1,3,3,3,3,2,2,0,2,0,3,2,1,1,3,0,0,0,2,1,3,1,1,0,2,2,2,1,0,
  3,3,3,1,3,3,1,3,3,3,0,1,2,0,2,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
  3,3,3,0,0,0,0,3,2,2,1,0,0,0,3,0,0,1,0,0,0,2,0,1,2,0,2,0,0,0,0,0,0,
  3,0,0,1,3,1,3,1,0,1,1,1,3,1,0,1,1,0,0,3,1,0,1,1,0,1,1,0,0,0,0,0,0,
  3,3,3,1,2,2,2,3,3,1,2,2,2,1,3,2,3,3,0,0,0,1,3,2,3,1,2,0,2,1,1,2,1,
  3,3,3,3,3,3,3,3,3,2,2,2,3,1,2,1,2,2,2,0,0,1,2,1,1,1,2,0,3,2,2,2,0,
  3,0,0,3,3,3,3,3,0,1,2,0,3,1,0,0,1,0,0,3,2,0,1,1,0,0,0,0,0,0,0,0,0,
  3,3,3,2,2,1,3,3,3,1,1,2,2,1,2,0,2,1,1,0,0,0,1,1,1,1,2,0,1,0,1,2,0,
  3,3,3,3,2,2,3,3,3,1,3,1,3,2,1,1,1,2,2,0,0,1,1,3,1,1,2,0,3,2,1,2,0,
  3,3,3,1,1,3,1,3,2,3,0,1,1,3,2,0,1,3,2,0,0,0,0,2,1,0,0,3,2,1,0,0,0,
  2,3,3,3,3,2,3,3,3,2,3,3,3,2,0,2,3,1,1,0,0,0,2,2,0,1,2,1,1,2,1,0,1,
  3,3,3,2,2,1,2,2,3,1,3,1,1,2,0,0,1,0,2,0,0,0,0,3,0,0,2,0,2,2,0,0,0,
  1,2,2,2,2,2,2,1,1,2,2,2,2,2,0,2,1,2,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
  0,0,0,2,3,1,2,0,0,2,2,2,2,1,0,1,2,1,0,0,0,0,2,2,0,0,2,1,0,0,0,0,0,
  2,0,2,0,0,1,0,3,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,
};


const SequenceModel Iso_8859_2RomanianModel =
{
  Iso_8859_2_CharToOrderMap,
  RomanianLangModel,
  33,
  (float)0.9990033320259535,
  PR_TRUE,
  "ISO-8859-2",
  "ro"
};

const SequenceModel Iso_8859_16RomanianModel =
{
  Iso_8859_16_CharToOrderMap,
  RomanianLangModel,
  33,
  (float)0.9990033320259535,
  PR_TRUE,
  "ISO-8859-16",
  "ro"
};

const SequenceModel Windows_1250RomanianModel =
{
  Windows_1250_CharToOrderMap,
  RomanianLangModel,
  33,
  (float)0.9990033320259535,
  PR_TRUE,
  "WINDOWS-1250",
  "ro"
};

const SequenceModel Ibm852RomanianModel =
{
  Ibm852_CharToOrderMap,
  RomanianLangModel,
  33,
  (float)0.9990033320259535,
  PR_TRUE,
  "IBM852",
  "ro"
};

const LanguageModel RomanianModel =
{
  "ro",
  Unicode_CharOrder,
  66,
  RomanianLangModel,
  33,
  3,
  (float)0.32848477086438155,
  20,
  (float)0.03787956408345752,
};
