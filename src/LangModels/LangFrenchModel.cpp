/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: French *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 01:24:27.092782
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 4X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 6X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 49,SYM, 49,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 57, 58,SYM,SYM, 59,SYM,SYM,SYM, 37, 37, 53,SYM, /* BX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 60, 41, 32, 35, /* CX */
   54, 45, 51, 38, 30, 61, 44,SYM, 50, 36, 46, 33, 42, 52, 62, 56, /* DX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 63, 41, 32, 35, /* EX */
   54, 45, 51, 38, 30, 64, 44,SYM, 50, 36, 46, 33, 42, 52, 65, 53, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 4X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 6X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 66,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 67, 41, 32, 35, /* CX */
   54, 45, 51, 38, 30, 68, 44,SYM, 50, 36, 46, 33, 42, 52, 69, 56, /* DX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 70, 41, 32, 35, /* EX */
   54, 45, 51, 38, 30, 71, 44,SYM, 50, 36, 46, 33, 42, 52, 72, 53, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 4X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 11, 10,  0, 17, 16, 19,  3, 25, 26,  7, 12,  4,  8, /* 6X */
   13, 20,  5,  2,  6,  9, 15, 31, 22, 21, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 73,SYM,SYM,SYM,SYM,SYM,SYM, 49,SYM, 37,ILL, 74,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 49,SYM, 37,ILL, 75, 53, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 76,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 77, 41, 32, 35, /* CX */
   54, 45, 51, 38, 30, 78, 44,SYM, 50, 36, 46, 33, 42, 52, 79, 56, /* DX */
   23, 40, 34, 47, 48, 55, 43, 29, 24, 14, 28, 39, 80, 41, 32, 35, /* EX */
   54, 45, 51, 38, 30, 81, 44,SYM, 50, 36, 46, 33, 42, 52, 82, 53, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 76;
static const unsigned int Unicode_CharOrder[] =
{
   65,  1,  66, 18,  67, 11,  68, 10,  69,  0,  70, 17,  71, 16, 72, 19,
   73,  3,  74, 25,  75, 26,  76,  7,  77, 12,  78,  4,  79,  8, 80, 13,
   81, 20,  82,  5,  83,  2,  84,  6,  85,  9,  86, 15,  87, 31, 88, 22,
   89, 21,  90, 27,  97,  1,  98, 18,  99, 11, 100, 10, 101,  0,102, 17,
  103, 16, 104, 19, 105,  3, 106, 25, 107, 26, 108,  7, 109, 12,110,  4,
  111,  8, 112, 13, 113, 20, 114,  5, 115,  2, 116,  6, 117,  9,118, 15,
  119, 31, 120, 22, 121, 21, 122, 27, 192, 23, 194, 34, 199, 29,200, 24,
  201, 14, 202, 28, 206, 32, 207, 35, 212, 30, 217, 36, 219, 33,224, 23,
  226, 34, 231, 29, 232, 24, 233, 14, 234, 28, 238, 32, 239, 35,244, 30,
  249, 36, 251, 33, 338, 37, 339, 37,
};


/* Model Table:
 * Total sequences: 1049
 * First 512 sequences: 0.997006678170155
 * Next 512 sequences (512-1024): 0.0029768569132891634
 * Rest: 1.646491655585584e-05
 * Negative sequences: TODO
 */
static const PRUint8 FrenchLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,2,0,3,3,3,0,3,0,3,0,2,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,0,3,2,3,3,0,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,2,3,3,3,3,3,0,2,3,2,3,2,0,0,0,2,0,2,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,0,2,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,2,3,3,3,3,2,3,2,2,1,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,2,3,3,3,3,3,2,0,2,3,0,0,0,
  3,3,3,3,2,3,3,3,3,3,2,3,2,2,3,2,2,2,3,3,0,3,0,2,3,2,2,3,3,0,3,2,0,0,2,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,2,2,0,2,2,0,2,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,3,3,2,1,0,0,3,2,3,0,2,3,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,3,3,3,0,2,2,0,0,2,2,0,0,
  3,3,3,3,2,3,2,3,3,3,3,2,3,2,3,2,3,2,2,3,0,3,0,0,3,3,2,2,0,0,2,2,2,2,0,0,0,2,
  3,3,3,3,2,3,3,3,3,3,2,3,2,2,3,2,2,2,2,3,3,3,0,0,3,0,3,2,2,0,3,2,0,0,2,0,0,2,
  3,3,3,3,3,2,3,2,3,3,2,2,3,3,3,2,2,2,3,2,0,3,0,0,3,2,2,2,3,0,2,2,0,2,2,0,0,2,
  3,3,3,3,2,3,3,3,3,3,2,2,2,3,3,2,3,2,2,3,0,3,0,0,3,2,2,0,3,2,3,2,0,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,3,2,3,0,2,0,2,0,0,3,2,0,0,
  3,3,3,3,2,3,2,2,3,3,2,2,2,2,3,1,2,0,0,3,0,2,0,0,3,0,2,0,3,0,2,0,0,0,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,2,3,2,3,3,2,3,0,0,3,2,2,1,2,0,0,2,0,0,2,0,0,0,
  3,3,3,3,2,3,3,3,3,3,2,2,3,2,3,2,2,3,2,0,0,2,0,0,3,0,2,0,3,0,0,0,0,2,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,2,0,3,2,2,2,3,2,2,3,2,0,2,3,2,2,2,0,0,2,1,2,3,0,0,2,
  3,3,2,3,3,3,3,3,3,3,2,2,3,2,3,2,2,2,2,2,2,3,0,0,3,1,2,2,2,0,3,2,0,0,2,0,0,2,
  2,3,2,2,0,2,0,0,2,3,1,2,2,2,0,2,0,0,2,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,2,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,0,2,0,0,0,
  3,3,2,3,0,1,3,2,2,2,1,3,0,3,3,3,0,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,3,1,3,3,3,3,0,0,3,3,3,2,0,3,3,0,2,0,3,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,2,2,2,0,3,3,2,2,2,2,3,0,0,1,2,1,0,0,0,3,0,2,2,2,0,0,0,0,0,0,2,0,0,0,
  3,3,3,3,2,3,2,3,3,3,2,2,3,2,3,0,2,0,2,3,0,3,0,0,0,2,2,1,0,0,0,2,0,0,0,0,0,2,
  3,3,2,3,2,2,2,2,3,3,2,2,2,1,3,2,2,2,3,2,2,2,0,0,2,0,2,3,0,0,0,2,0,0,0,0,0,0,
  0,0,0,0,2,2,3,2,0,0,0,3,3,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,2,2,0,3,0,3,3,0,0,0,0,3,3,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,2,2,2,2,3,3,2,2,2,0,2,0,2,2,2,2,0,2,0,0,0,0,2,1,0,0,0,2,0,0,0,0,0,0,
  0,0,0,0,3,0,3,3,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,2,2,3,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,2,2,3,2,0,0,0,3,2,2,0,0,3,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,2,0,2,2,2,2,0,2,3,2,2,0,0,2,2,2,2,2,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,2,2,2,2,2,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_15FrenchModel =
{
  Iso_8859_15_CharToOrderMap,
  FrenchLangModel,
  38,
  (float)0.997006678170155,
  PR_TRUE,
  "ISO-8859-15",
  "fr"
};

const SequenceModel Iso_8859_1FrenchModel =
{
  Iso_8859_1_CharToOrderMap,
  FrenchLangModel,
  38,
  (float)0.997006678170155,
  PR_TRUE,
  "ISO-8859-1",
  "fr"
};

const SequenceModel Windows_1252FrenchModel =
{
  Windows_1252_CharToOrderMap,
  FrenchLangModel,
  38,
  (float)0.997006678170155,
  PR_TRUE,
  "WINDOWS-1252",
  "fr"
};

const LanguageModel FrenchModel =
{
  "fr",
  Unicode_CharOrder,
  76,
  FrenchLangModel,
  38,
  (float)0.997006678170155,
};
