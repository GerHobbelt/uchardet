/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Croatian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:02:00.881155
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 50,SYM, 44,SYM, 51, 52,SYM,SYM, 22, 53, 54, 55,SYM, 24, 56, /* AX */
  SYM, 57,SYM, 44,SYM, 58, 59,SYM,SYM, 22, 60, 61, 62,SYM, 24, 63, /* BX */
   64, 36, 39, 65, 34, 66, 25, 67, 19, 32, 68, 69, 70, 43, 71, 72, /* CX */
   26, 47, 73, 42, 74, 75, 31,SYM, 76, 77, 78, 79, 33, 80, 81, 82, /* DX */
   83, 36, 39, 84, 34, 85, 25, 86, 19, 32, 87, 88, 89, 43, 90, 91, /* EX */
   26, 47, 92, 42, 93, 94, 31,SYM, 95, 96, 97, 98, 33, 99,100,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 35,SYM,101,SYM,SYM,SYM,SYM,102, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 35,SYM,103,SYM,SYM,SYM,SYM,104, /* BX */
  105,106, 38, 25, 34, 40,107, 48, 19, 32,108,109,110,111, 49,112, /* CX */
   22, 47,113, 42, 45,114, 31,SYM,115, 44,116,117, 33,118, 24,119, /* DX */
  120,121, 38, 25, 34, 40,122, 48, 19, 32,123,124,125,126, 49,127, /* EX */
   22, 47,128, 42, 45,129, 31,SYM,130, 44,131,132, 33,133, 24,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,134,135, 44,SYM,SYM, 22,SYM, 22,SYM,136,SYM,137,SYM,138,139, /* AX */
  SYM,SYM, 19, 44, 24,SYM,SYM,SYM, 24, 19,140,SYM,141,142,143,144, /* BX */
   41, 36, 39,145, 34, 25,146,147, 37, 32, 46,148,149, 43,150,151, /* CX */
   26, 47,152, 42,153,154, 31,155,156,157,158,159, 33,160,161,162, /* DX */
   41, 36, 39,163, 34, 25,164,165, 37, 32, 46,166,167, 43,168,169, /* EX */
   26, 47,170, 42,171,172, 31,173,174,175,176,177, 33,178,179,180, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,181,182, 24,183, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,184,185, 24,186, /* 9X */
  SYM,SYM,SYM, 44,SYM,187,SYM,SYM,SYM,SYM,188,SYM,SYM,SYM,SYM,189, /* AX */
  SYM,SYM,SYM, 44,SYM,SYM,SYM,SYM,SYM,190,191,SYM,192,SYM,193,194, /* BX */
  195, 36, 39,196, 34,197, 25,198, 19, 32,199,200,201, 43,202,203, /* CX */
   26, 47,204, 42,205,206, 31,SYM,207,208,209,210, 33,211,212,213, /* DX */
  214, 36, 39,215, 34,216, 25,217, 19, 32,218,219,220, 43,221,222, /* EX */
   26, 47,223, 42,224,225, 31,SYM,226,227,228,229, 33,230,231,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  232, 33, 32, 39, 34,233, 25,234, 44,235,236,237,238,239, 34, 25, /* 8X */
   32,240,241,242, 31,243,244,245,246, 31, 33,247,248, 44,SYM, 19, /* 9X */
   36, 43, 42,249,249,249, 24, 24,249,249,SYM,249, 19,249,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 36, 39,249,249,SYM,SYM,SYM,SYM,249,249,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,249,249,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   26, 26,249,249,249,249, 43,249,249,SYM,SYM,SYM,SYM,249,249,SYM, /* DX */
   42,249,249, 47, 47,249, 22, 22,249,249,249,249,249,249,249,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,249,249,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 4X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 20, 14,  2, 23, 17, 21,  1,  7, 11, 10, 12,  4,  3, /* 6X */
   15, 30,  5,  8,  6,  9, 13, 28, 29, 27, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   34, 38, 38, 32,249, 31, 33, 36,249, 19, 34, 19, 25, 25, 32,249, /* 8X */
  249,249, 43,249, 48, 48,249, 42,249,249, 31,249,249,249,249, 33, /* 9X */
  SYM,SYM,249,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM,249,SYM,SYM,249,249, /* AX */
  249, 49,SYM,SYM, 49,249,SYM,SYM, 44,249,249,249,249,249,249,249, /* BX */
  249, 47,SYM,SYM, 47,249,SYM,SYM,SYM,SYM,SYM,249,249,249,249, 45, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 45,249,249,249,SYM,SYM,249,249, /* DX */
  249, 22,SYM,SYM, 22,249,249, 36,249,249, 43, 24, 24,249, 42,249, /* EX */
  249,249,249,249,249,249,249,249,249,249,249,249, 44,249,249,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 62;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 18,  67, 20,  68, 14,  69,  2,  70, 23,  71, 17, 72, 21,
   73,  1,  74,  7,  75, 11,  76, 10,  77, 12,  78,  4,  79,  3, 80, 15,
   81, 30,  82,  5,  83,  8,  84,  6,  85,  9,  86, 13,  87, 28, 88, 29,
   89, 27,  90, 16,  97,  0,  98, 18,  99, 20, 100, 14, 101,  2,102, 23,
  103, 17, 104, 21, 105,  1, 106,  7, 107, 11, 108, 10, 109, 12,110,  4,
  111,  3, 112, 15, 113, 30, 114,  5, 115,  8, 116,  6, 117,  9,118, 13,
  119, 28, 120, 29, 121, 27, 122, 16, 262, 25, 263, 25, 268, 19,269, 19,
  272, 26, 273, 26, 352, 22, 353, 22, 381, 24, 382, 24,
};


/* Model Table:
 * Total considered sequences: 809 / 961
 * - Positive sequences: first 410 (0.9950584932401488)
 * - Probable sequences: next 135 (545-410) (0.0039469726326971655)
 * - Neutral sequences: last 416 (0.000994534127154001)
 * - Negative sequences: 152 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 CroatianLangModel[] =
{
  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,2,1,
  3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,0,
  3,3,3,3,3,2,3,3,3,3,2,3,2,2,3,3,3,3,2,3,3,2,1,3,2,0,1,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,2,3,0,1,0,0,0,3,2,0,0,
  3,3,3,3,3,2,2,2,3,3,2,3,3,3,2,2,2,1,2,3,2,1,2,1,1,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,1,2,1,3,3,0,3,1,0,0,2,1,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,1,0,1,0,
  3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,2,2,2,3,0,3,2,0,3,1,0,0,2,1,2,0,
  3,3,3,3,3,3,3,2,3,3,3,1,2,3,0,2,1,2,0,2,3,2,2,1,0,1,0,2,1,0,0,
  3,3,3,3,3,3,2,3,3,3,3,2,3,1,2,3,0,2,3,1,2,2,0,2,0,1,0,1,1,0,0,
  3,3,3,3,3,3,1,3,3,3,3,2,0,0,2,1,0,1,1,2,2,0,2,1,0,0,0,2,0,1,0,
  3,3,3,3,3,3,2,3,3,3,3,0,3,3,2,2,2,3,3,1,1,2,0,1,3,0,0,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,2,1,1,1,2,3,3,1,1,0,3,0,1,0,1,0,
  3,3,3,3,3,3,1,2,1,3,3,0,3,3,3,0,1,3,3,0,1,2,0,0,0,0,0,1,1,0,0,
  3,3,3,3,3,3,2,1,2,3,3,1,2,1,3,1,2,2,1,0,1,2,0,1,0,0,0,2,1,0,0,
  3,3,3,3,3,3,1,3,1,3,3,0,1,1,2,0,3,0,1,0,1,1,0,2,0,0,0,2,0,0,1,
  3,3,3,3,3,0,0,3,0,3,3,3,1,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,2,3,3,3,2,2,3,1,1,0,1,0,2,3,0,1,0,0,0,1,0,0,2,
  3,3,3,3,3,3,3,1,2,3,3,1,2,3,1,0,2,2,3,0,2,2,0,1,0,0,0,2,1,1,0,
  3,3,3,2,3,1,3,0,0,3,3,3,1,3,0,2,0,0,0,2,1,0,0,0,0,3,0,0,0,0,0,
  3,3,3,3,2,3,2,1,2,3,3,1,1,0,0,1,0,1,1,0,1,0,0,2,0,0,0,0,0,0,1,
  3,3,3,2,3,0,0,2,0,3,1,0,0,1,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,
  3,3,3,3,3,0,0,1,0,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
  3,3,3,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,2,2,1,2,1,2,3,2,3,1,1,0,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,1,
  3,3,3,2,2,1,2,1,2,2,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,
  2,2,1,0,1,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,3,1,0,
  0,2,0,0,0,1,0,0,0,2,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2CroatianModel =
{
  Iso_8859_2_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "ISO-8859-2",
  "hr"
};

const SequenceModel Iso_8859_13CroatianModel =
{
  Iso_8859_13_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "ISO-8859-13",
  "hr"
};

const SequenceModel Iso_8859_16CroatianModel =
{
  Iso_8859_16_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "ISO-8859-16",
  "hr"
};

const SequenceModel Windows_1250CroatianModel =
{
  Windows_1250_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "WINDOWS-1250",
  "hr"
};

const SequenceModel Ibm852CroatianModel =
{
  Ibm852_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "IBM852",
  "hr"
};

const SequenceModel Mac_CentraleuropeCroatianModel =
{
  Mac_Centraleurope_CharToOrderMap,
  CroatianLangModel,
  31,
  (float)0.999005465872846,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "hr"
};

const LanguageModel CroatianModel =
{
  "hr",
  Unicode_CharOrder,
  62,
  CroatianLangModel,
  31,
  4,
  (float)0.3895378997873738,
  19,
  (float)0.039852386200447516,
};
