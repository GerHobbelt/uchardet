/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Hungarian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 03:25:30.576927
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 15, 23, 16,  0, 24, 12, 19,  7, 22,  9,  3, 11,  5,  8, /* 4X */
   21, 34,  6,  4,  2, 20, 18, 30, 33, 17, 10,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 15, 23, 16,  0, 24, 12, 19,  7, 22,  9,  3, 11,  5,  8, /* 6X */
   21, 34,  6,  4,  2, 20, 18, 30, 33, 17, 10,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 58,SYM, 52,SYM, 59, 54,SYM,SYM, 37, 46, 60, 61,SYM, 48, 50, /* AX */
  SYM, 62,SYM, 52,SYM, 63, 54,SYM,SYM, 37, 46, 64, 65,SYM, 48, 50, /* BX */
   66, 13, 39, 45, 35, 67, 43, 36, 38, 14, 68, 42, 57, 28, 47, 56, /* CX */
   51, 53, 69, 25, 40, 27, 26,SYM, 49, 55, 31, 32, 29, 44, 70, 41, /* DX */
   71, 13, 39, 45, 35, 72, 43, 36, 38, 14, 73, 42, 57, 28, 47, 56, /* EX */
   51, 53, 74, 25, 40, 27, 26,SYM, 49, 55, 31, 32, 29, 44, 75,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 15, 23, 16,  0, 24, 12, 19,  7, 22,  9,  3, 11,  5,  8, /* 4X */
   21, 34,  6,  4,  2, 20, 18, 30, 33, 17, 10,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 15, 23, 16,  0, 24, 12, 19,  7, 22,  9,  3, 11,  5,  8, /* 6X */
   21, 34,  6,  4,  2, 20, 18, 30, 33, 17, 10,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 37,SYM, 54, 76, 48, 77, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 37,SYM, 54, 78, 48, 79, /* 9X */
  SYM,SYM,SYM, 52,SYM, 80,SYM,SYM,SYM,SYM, 46,SYM,SYM,SYM,SYM, 50, /* AX */
  SYM,SYM,SYM, 52,SYM,SYM,SYM,SYM,SYM, 81, 46,SYM, 82,SYM, 83, 50, /* BX */
   84, 13, 39, 45, 35, 85, 43, 36, 38, 14, 86, 42, 57, 28, 47, 56, /* CX */
   51, 53, 87, 25, 40, 27, 26,SYM, 49, 55, 31, 32, 29, 44, 88, 41, /* DX */
   89, 13, 39, 45, 35, 90, 43, 36, 38, 14, 91, 42, 57, 28, 47, 56, /* EX */
   51, 53, 92, 25, 40, 27, 26,SYM, 49, 55, 31, 32, 29, 44, 93,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 66;
static const unsigned int Unicode_CharOrder[] =
{
  65,  1, 66, 15, 67, 23, 68, 16, 69,  0, 70, 24, 71, 12,72, 19,
  73,  7, 74, 22, 75,  9, 76,  3, 77, 11, 78,  5, 79,  8,80, 21,
  82,  6, 83,  4, 84,  2, 85, 20, 86, 18, 87, 30, 89, 17,90, 10,
  97,  1, 98, 15, 99, 23, 100, 16, 101,  0, 102, 24, 103, 12,104, 19,
  105,  7, 106, 22, 107,  9, 108,  3, 109, 11, 110,  5, 111,  8,112, 21,
  114,  6, 115,  4, 116,  2, 117, 20, 118, 18, 119, 30, 121, 17,122, 10,
  193, 13, 201, 14, 205, 28, 211, 25, 214, 26, 218, 31, 220, 29,225, 13,
  233, 14, 237, 28, 243, 25, 246, 26, 250, 31, 252, 29, 336, 27,337, 27,
  368, 32, 369, 32,
};


/* Model Table:
 * Total considered sequences: 1237 / 1089
 * - Positive sequences: first 716 (0.995005709533059)
 * - Probable sequences: next 143 (859-716) (0.004001275989582442)
 * - Neutral sequences: last 230 (0.0009930144773585559)
 * - Negative sequences: -148 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 HungarianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,1,0,2,1,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,3,3,3,3,3,3,3,3,3,1,1,0,1,1,3,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,1,1,2,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,1,2,3,3,3,3,3,3,1,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,2,1,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,2,
  1,2,3,3,3,3,3,3,1,3,3,3,3,1,3,3,3,1,3,3,3,3,3,3,3,0,1,0,1,1,0,0,0,
  2,1,3,3,3,3,3,3,1,3,3,3,3,0,2,3,3,1,3,3,1,3,3,2,2,0,0,1,0,1,0,0,0,
  3,3,2,3,3,3,3,3,3,2,1,2,1,3,3,3,2,3,2,2,3,3,3,2,2,3,3,3,3,3,1,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,3,3,3,3,3,3,2,3,3,
  3,3,3,2,3,2,2,3,3,2,1,1,1,3,3,3,2,2,3,2,3,1,3,1,2,2,3,3,3,3,1,1,3,
  3,3,3,3,3,3,3,3,3,1,1,2,1,3,3,2,1,3,2,2,3,2,1,2,1,3,3,3,3,2,2,3,2,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,2,2,3,1,3,3,3,3,1,0,1,1,0,1,0,0,
  3,3,3,3,3,2,3,3,3,3,3,2,1,3,3,3,2,2,3,3,3,3,3,3,2,3,2,2,3,3,1,2,1,
  3,3,3,3,3,3,3,3,3,2,3,2,1,3,3,2,3,1,2,2,3,2,3,2,2,3,3,1,2,3,1,3,2,
  3,3,3,3,3,2,3,3,3,3,2,2,1,2,3,2,3,3,2,3,3,1,1,3,2,2,1,0,3,1,1,1,0,
  3,3,3,3,1,2,3,3,3,1,1,2,1,3,3,1,1,1,1,1,3,1,2,1,3,2,3,3,1,3,1,2,2,
  3,3,3,3,3,3,3,3,1,3,3,3,3,2,1,3,3,0,3,3,1,3,3,3,3,1,0,0,1,1,0,1,0,
  0,0,3,3,3,3,3,0,0,3,3,3,3,0,0,3,3,1,3,1,1,2,1,1,1,0,1,0,0,0,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,3,3,0,3,3,1,2,3,2,3,0,1,1,2,1,0,1,0,
  1,2,3,3,3,3,3,1,1,2,3,3,3,0,0,1,2,0,3,0,0,3,3,3,1,0,0,0,0,0,0,0,0,
  1,1,3,3,3,3,3,1,1,3,3,2,3,0,0,1,2,0,2,2,0,1,1,1,1,1,0,0,0,0,0,0,0,
  3,3,1,2,3,3,2,3,3,1,0,1,1,1,0,1,2,2,1,3,2,1,1,1,1,0,1,0,0,1,3,0,0,
  1,2,3,3,3,3,3,1,0,2,3,1,3,1,1,2,3,0,2,1,1,1,3,2,1,0,0,0,0,0,0,0,0,
  3,1,2,2,3,3,3,1,0,3,3,1,1,0,1,3,1,0,3,2,1,1,3,1,3,0,0,0,1,0,0,0,0,
};


const SequenceModel Iso_8859_2HungarianModel =
{
  Iso_8859_2_CharToOrderMap,
  HungarianLangModel,
  33,
  (float)0.9990069855226414,
  PR_FALSE,
  "ISO-8859-2",
  "hu"
};

const SequenceModel Windows_1250HungarianModel =
{
  Windows_1250_CharToOrderMap,
  HungarianLangModel,
  33,
  (float)0.9990069855226414,
  PR_FALSE,
  "WINDOWS-1250",
  "hu"
};

const LanguageModel HungarianModel =
{
  "hu",
  Unicode_CharOrder,
  66,
  HungarianLangModel,
  33,
  6,
  (float)0.4494955099233543,
  25,
  (float)0.03462035867963189,
  (float)0.9988193742583601,
};
