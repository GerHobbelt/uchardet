/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Arabic *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 11:42:48.952857
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_6_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 62, 63, 54, 67, 59, 70, 78, 76, 60, 83, 81, 77, 65, 71, 75, /* 4X */
   66, 90, 68, 58, 61, 73, 69, 79, 84, 87, 88,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 36, 55, 46, 48, 37, 53, 56, 50, 38, 91, 64, 44, 47, 43, 45, /* 6X */
   51, 80, 41, 42, 39, 52, 57, 72, 85, 49, 86,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,ILL,ILL,ILL,SYM,ILL,ILL,ILL,ILL,ILL,ILL,ILL,SYM,SYM,ILL,ILL, /* AX */
  ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,SYM,ILL,ILL,ILL,SYM, /* BX */
  ILL, 32, 34, 16, 35, 23, 31,  0,  8,  9,  7, 26, 19, 18, 25, 11, /* CX */
   28,  6, 27, 12, 22, 21, 29,SYM, 33, 10, 30,ILL,ILL,ILL,ILL,ILL, /* DX */
   40, 13, 15, 17,  1,  3,  5, 14,  4, 24,  2,SYM,SYM,SYM,SYM,SYM, /* EX */
  SYM,SYM,SYM,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1256_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 62, 63, 54, 67, 59, 70, 78, 76, 60, 83, 81, 77, 65, 71, 75, /* 4X */
   66, 90, 68, 58, 61, 73, 69, 79, 84, 87, 88,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 36, 55, 46, 48, 37, 53, 56, 50, 38, 91, 64, 44, 47, 43, 45, /* 6X */
   51, 80, 41, 42, 39, 52, 57, 72, 85, 49, 86,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM, 74,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 97,SYM,101, 93, 98,102, /* 8X */
   82,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 94,SYM,103,SYM,104,SYM,SYM,105, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 99,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  106, 32, 34, 16, 35, 23, 31,  0,  8,  9,  7, 26, 19, 18, 25, 11, /* CX */
   28,  6, 27, 12, 22, 21, 29,SYM, 20, 33, 10, 30, 40, 13, 15, 17, /* DX */
  107,  1, 96,  3,  5, 14,  4,108,109, 89,110,111, 24,  2,100,112, /* EX */
  SYM,SYM,SYM,SYM, 95,SYM,SYM,SYM,SYM,113,SYM,114, 92,SYM,SYM,115, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 64;
static const unsigned int Unicode_CharOrder[] =
{
    65, 62,   66, 63,   67, 54,   69, 59,   73, 60,   83, 58,   84, 61,  97, 36,
    98, 55,   99, 46,  100, 48,  101, 37,  102, 53,  103, 56,  104, 50, 105, 38,
   108, 44,  109, 47,  110, 43,  111, 45,  112, 51,  114, 41,  115, 42, 116, 39,
   117, 52,  118, 57,  121, 49, 1569, 32, 1570, 34, 1571, 16, 1572, 35,1573, 23,
  1574, 31, 1575,  0, 1576,  8, 1577,  9, 1578,  7, 1579, 26, 1580, 19,1581, 18,
  1582, 25, 1583, 11, 1584, 28, 1585,  6, 1586, 27, 1587, 12, 1588, 22,1589, 21,
  1590, 29, 1591, 20, 1592, 33, 1593, 10, 1594, 30, 1600, 40, 1601, 13,1602, 15,
  1603, 17, 1604,  1, 1605,  3, 1606,  5, 1607, 14, 1608,  4, 1609, 24,1610,  2,
};


/* Model Table:
 * Total sequences: 1820
 * First 512 sequences: 0.9644868613755061
 * Next 512 sequences (512-1024): 0.03359397057105059
 * Rest: 0.0019191680534433112
 * Negative sequences: TODO
 */
static const PRUint8 ArabicLangModel[] =
{
  1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,
   3,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
   0,2,3,2,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,2,3,3,3,2,3,2,2,
   2,2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,0,2,3,3,2,3,2,3,2,
   0,2,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
   2,2,2,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,
  3,2,3,3,3,2,2,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,2,2,2,3,3,2,3,2,
   0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
  3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,3,2,2,3,2,3,3,3,
   2,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,2,3,2,3,3,2,
   0,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,2,3,2,2,2,2,2,2,2,2,2,
   1,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,3,3,2,3,3,0,2,0,2,2,3,3,0,2,0,3,3,2,3,0,0,
   0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,2,2,2,0,0,2,1,3,3,3,2,0,0,2,2,
   2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,2,3,2,2,3,0,0,0,2,2,1,1,0,0,1,1,
   0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
  3,3,3,2,3,3,3,3,3,3,3,2,3,2,3,3,3,3,2,2,2,3,2,3,2,2,1,2,2,3,2,2,
   1,3,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,0,3,2,2,2,2,0,2,0,3,2,0,2,0,2,0,0,2,3,2,0,0,
   0,1,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,0,1,2,1,3,3,2,0,2,0,1,2,2,2,0,0,
   0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,0,3,3,3,3,3,3,0,2,3,3,2,2,2,3,2,
   0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,2,3,2,2,2,2,2,2,2,1,1,2,1,1,2,3,3,3,1,2,1,
   0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,0,3,3,3,2,3,0,3,1,3,2,3,2,0,2,0,2,2,2,3,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,2,1,2,1,0,0,1,0,1,0,1,3,2,0,2,2,
   0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,2,3,3,3,2,2,2,2,3,2,0,2,0,2,0,1,0,2,1,0,1,0,0,2,2,
   1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,2,3,0,3,2,2,0,1,3,0,2,2,0,0,2,2,0,0,0,0,2,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,3,3,2,3,3,3,2,3,2,1,3,3,2,2,3,2,2,2,0,1,0,2,3,0,0,2,0,2,2,
   0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,1,3,2,2,2,0,3,2,3,2,2,3,0,2,2,2,2,2,2,0,0,2,2,2,3,3,2,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,2,1,3,2,2,2,0,0,0,0,1,3,3,2,0,0,1,0,2,3,2,0,0,
   0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,2,3,2,2,1,2,2,3,2,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,
   0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,2,3,2,2,1,2,2,2,1,2,2,2,0,0,0,0,2,2,0,1,0,0,1,2,
   2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,2,2,2,2,2,2,2,0,0,2,3,1,0,3,1,2,0,0,0,0,2,1,0,0,0,0,0,1,
   0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,3,3,1,3,2,2,2,3,2,0,2,2,0,0,0,2,2,2,0,0,0,2,2,0,0,0,0,2,1,
   0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,0,2,2,2,2,0,0,1,0,1,2,1,2,0,1,1,0,2,2,2,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,3,2,2,2,3,2,2,3,2,3,2,2,2,2,0,2,2,2,2,2,2,0,1,0,0,2,2,1,1,0,
   0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,1,0,1,1,0,0,2,0,2,0,0,1,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,2,3,2,2,3,2,1,2,1,0,0,2,3,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,2,2,2,3,2,2,2,1,0,2,2,2,1,0,0,2,2,1,0,0,2,0,0,3,2,2,2,0,1,1,
   1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,2,2,2,2,2,2,0,1,0,2,2,0,2,2,0,2,0,1,0,0,2,0,1,2,2,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,2,2,2,0,2,2,2,2,1,2,2,2,2,1,1,1,1,1,2,2,1,0,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,1,1,2,0,2,2,2,2,2,2,2,2,1,1,2,2,2,0,2,2,2,0,0,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,1,2,0,2,2,2,2,2,2,2,2,1,0,1,1,1,0,2,2,2,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,1,0,2,2,1,1,2,1,1,0,2,2,1,2,1,1,0,0,1,0,0,1,0,0,0,
  1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,1,0,1,1,
   0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,2,0,1,2,2,1,2,1,2,2,1,2,1,2,0,1,1,1,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,2,0,0,2,1,1,2,1,1,0,1,1,2,1,0,0,0,1,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,2,0,1,2,2,1,2,2,1,2,1,0,0,2,1,1,0,2,1,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,1,0,0,1,0,2,2,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,2,0,2,2,2,2,1,1,2,2,1,1,2,2,2,0,1,2,2,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,2,0,1,0,0,1,2,1,0,2,1,2,0,2,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,0,0,0,1,1,0,2,1,2,0,1,1,1,2,0,0,2,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,0,0,1,1,0,0,2,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,1,0,0,0,1,2,1,2,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,2,2,0,2,1,1,0,2,1,0,0,1,0,0,1,0,0,2,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,1,1,0,2,2,1,2,2,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,2,2,0,2,2,2,2,1,1,2,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,2,0,2,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,0,0,1,0,0,1,2,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,1,1,0,0,1,1,1,2,1,1,0,1,1,0,0,1,2,0,1,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,2,2,1,0,0,1,1,1,1,1,0,0,0,1,2,0,1,0,0,1,1,0,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,2,2,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,0,2,0,0,0,0,1,1,1,1,0,1,1,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,1,0,1,1,2,0,0,1,1,0,0,0,0,0,0,1,1,0,1,2,1,1,1,1,0,
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,
};


const SequenceModel Iso_8859_6ArabicModel =
{
  Iso_8859_6_CharToOrderMap,
  ArabicLangModel,
  64,
  (float)0.9644868613755061,
  PR_FALSE,
  "ISO-8859-6",
  "ar"
};

const SequenceModel Windows_1256ArabicModel =
{
  Windows_1256_CharToOrderMap,
  ArabicLangModel,
  64,
  (float)0.9644868613755061,
  PR_FALSE,
  "WINDOWS-1256",
  "ar"
};

const LanguageModel ArabicModel =
{
  "ar",
  Unicode_CharOrder,
  64,
  ArabicLangModel,
  64,
  (float)0.9644868613755061,
};
