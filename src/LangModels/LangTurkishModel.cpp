/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Turkish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:24:38.038544
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_3_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 24,  8,  1, 27, 19, 20,  6, 28,  7,  4, 11,  3, 14, /* 4X */
   22, 34,  5, 10,  9, 12, 18, 29, 33, 13, 21,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 24,  8,  1, 27, 19, 20,  2, 28,  7,  4, 11,  3, 14, /* 6X */
   22, 34,  5, 10,  9, 12, 18, 29, 33, 13, 21,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 55,SYM,SYM,SYM,ILL, 56,SYM,SYM,  2, 17, 25, 57,SYM,ILL, 48, /* AX */
  SYM, 58,SYM,SYM,SYM,SYM, 59,SYM,SYM,  6, 17, 25, 60,SYM,ILL, 48, /* BX */
   42, 36, 30,ILL, 43, 61, 62, 23, 44, 35, 63, 51, 54, 38, 31, 50, /* CX */
  ILL, 39, 45, 37, 49, 52, 26,SYM, 64, 65, 40, 32, 16, 53, 66, 67, /* DX */
   42, 36, 30,ILL, 43, 68, 69, 23, 44, 35, 70, 51, 54, 38, 31, 50, /* EX */
  ILL, 39, 45, 37, 49, 52, 26,SYM, 71, 72, 40, 32, 16, 53, 73,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 24,  8,  1, 27, 19, 20,  6, 28,  7,  4, 11,  3, 14, /* 4X */
   22, 34,  5, 10,  9, 12, 18, 29, 33, 13, 21,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 24,  8,  1, 27, 19, 20,  2, 28,  7,  4, 11,  3, 14, /* 6X */
   22, 34,  5, 10,  9, 12, 18, 29, 33, 13, 21,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 74,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   42, 36, 30, 46, 43, 75, 41, 23, 44, 35, 76, 51, 54, 38, 31, 50, /* CX */
   25, 39, 45, 37, 49, 77, 26,SYM, 47, 78, 40, 32, 16,  2, 17, 79, /* DX */
   42, 36, 30, 46, 43, 80, 41, 23, 44, 35, 81, 51, 54, 38, 31, 50, /* EX */
   25, 39, 45, 37, 49, 82, 26,SYM, 47, 83, 40, 32, 16,  6, 17, 84, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 66;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 15,  67, 24,  68,  8,  69,  1,  70, 27,  71, 19, 72, 20,
   73,  2,  73,  6,  74, 28,  75,  7,  76,  4,  77, 11,  78,  3, 79, 14,
   80, 22,  82,  5,  83, 10,  84,  9,  85, 12,  86, 18,  87, 29, 89, 13,
   90, 21,  97,  0,  98, 15,  99, 24, 100,  8, 101,  1, 102, 27,103, 19,
  104, 20, 105,  2, 106, 28, 107,  7, 108,  4, 109, 11, 110,  3,111, 14,
  112, 22, 114,  5, 115, 10, 116,  9, 117, 12, 118, 18, 119, 29,121, 13,
  122, 21, 194, 30, 199, 23, 206, 31, 214, 26, 219, 32, 220, 16,226, 30,
  231, 23, 238, 31, 246, 26, 251, 32, 252, 16, 286, 25, 287, 25,305,  6,
  350, 17, 351, 17,
};


/* Model Table:
 * Total considered sequences: 1109 / 1089
 * - Positive sequences: first 553 (0.995033943100518)
 * - Probable sequences: next 194 (747-553) (0.0039670697911219355)
 * - Neutral sequences: last 342 (0.0009989871083601054)
 * - Negative sequences: -20 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 TurkishLangModel[] =
{
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,3,0,1,0,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,0,0,1,
  3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,1,3,3,1,1,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,0,2,3,2,2,2,3,1,
  3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,2,3,3,0,1,3,1,1,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,3,2,2,3,2,
  2,0,0,3,3,3,3,3,3,3,3,3,2,3,2,3,0,3,2,1,2,3,3,3,3,3,0,3,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,3,2,1,3,0,0,3,2,1,1,3,1,3,
  3,3,3,2,3,3,3,2,3,2,3,2,3,3,3,2,3,0,2,2,2,2,1,1,3,1,3,1,2,2,2,3,1,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,2,3,3,2,3,2,0,3,3,0,2,2,1,1,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,2,3,2,3,3,3,0,3,2,0,2,2,2,2,
  3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,1,2,3,3,3,1,3,0,3,2,1,2,3,3,2,
  3,3,3,3,3,3,0,3,3,3,3,3,2,3,2,3,0,3,3,3,3,3,3,3,3,3,0,3,2,1,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,2,2,2,1,3,0,3,2,0,2,2,1,1,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,0,1,0,
  3,3,3,3,3,3,3,2,3,2,3,2,3,3,3,3,3,1,1,0,2,2,0,2,2,1,3,1,1,1,2,2,2,
  0,2,1,3,3,3,0,3,3,3,3,3,0,3,1,3,0,3,3,1,2,3,3,3,3,3,0,3,1,0,0,0,0,
  3,3,3,2,3,2,3,3,1,3,2,3,3,2,2,3,3,1,3,3,2,1,1,3,1,0,2,2,0,0,1,1,1,
  3,3,3,1,3,3,3,2,3,1,3,1,3,3,3,2,2,2,3,2,2,2,0,0,3,0,1,1,0,0,2,2,1,
  3,3,3,3,3,3,3,1,2,2,3,2,3,2,3,1,3,1,0,2,3,1,1,1,1,0,3,1,1,1,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,0,1,2,2,3,2,0,2,1,1,2,3,2,1,
  3,3,3,2,3,2,3,2,3,2,1,3,3,3,3,3,3,0,2,3,3,3,0,0,3,0,3,0,1,1,2,2,1,
  3,3,3,2,3,3,3,2,0,3,3,3,3,2,3,1,3,0,0,1,3,1,3,3,1,0,1,0,0,1,0,0,0,
  3,3,3,0,3,2,3,2,1,3,2,3,3,3,3,2,3,0,0,1,2,0,0,1,1,0,3,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,2,3,2,3,3,2,3,2,3,0,0,2,3,1,1,0,3,1,0,1,0,1,2,1,1,
  3,3,3,1,3,3,3,0,3,0,1,3,3,0,3,1,3,0,1,0,0,2,0,0,1,0,0,0,0,0,0,0,0,
  0,1,1,3,3,3,0,3,3,3,3,3,0,3,0,2,0,2,2,1,1,3,3,3,2,3,0,1,0,0,0,0,0,
  3,3,3,1,3,3,3,2,1,3,2,1,3,3,3,1,2,2,0,2,1,0,0,1,2,0,1,3,0,0,2,2,1,
  3,3,3,1,2,1,2,1,2,0,1,1,3,1,3,1,2,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,
  3,3,3,2,2,2,0,1,1,1,1,1,2,1,3,1,1,0,0,0,2,0,1,0,1,0,0,1,1,1,0,0,0,
  1,1,2,3,3,3,0,2,2,3,2,3,0,2,0,2,0,2,1,1,2,2,0,0,1,1,0,2,0,0,0,1,0,
  0,0,1,2,3,1,0,1,1,1,1,1,0,2,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,
  0,0,0,1,1,1,0,1,1,0,2,3,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,2,0,0,0,0,0,
};


const SequenceModel Iso_8859_3TurkishModel =
{
  Iso_8859_3_CharToOrderMap,
  TurkishLangModel,
  33,
  (float)0.9990010128916399,
  PR_FALSE,
  "ISO-8859-3",
  "tr"
};

const SequenceModel Iso_8859_9TurkishModel =
{
  Iso_8859_9_CharToOrderMap,
  TurkishLangModel,
  33,
  (float)0.9990010128916399,
  PR_FALSE,
  "ISO-8859-9",
  "tr"
};

const LanguageModel TurkishModel =
{
  "tr",
  Unicode_CharOrder,
  66,
  TurkishLangModel,
  33,
  4,
  (float)0.37622064189380516,
  23,
  (float)0.0331922903705142,
};
