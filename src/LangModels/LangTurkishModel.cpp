/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Turkish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 21:09:02.882845
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_3_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  6, 29,  8,  5, 11,  3, 12, /* 4X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  2, 29,  8,  5, 11,  3, 12, /* 6X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 59,SYM,SYM,SYM,ILL, 60,SYM,SYM,  2, 17, 25, 61,SYM,ILL, 62, /* AX */
  SYM, 59,SYM,SYM,SYM,SYM, 63,SYM,SYM,  6, 17, 25, 64,SYM,ILL, 65, /* BX */
   47, 36, 31,ILL, 39, 66, 67, 24, 43, 35, 45, 48, 51, 38, 32, 57, /* CX */
  ILL, 42, 53, 37, 49, 54, 27,SYM, 68, 58, 41, 34, 16, 69, 70, 52, /* DX */
   47, 36, 31,ILL, 39, 71, 72, 24, 43, 35, 45, 48, 51, 38, 32, 57, /* EX */
  ILL, 42, 53, 37, 49, 54, 27,SYM, 73, 58, 41, 34, 16, 74, 75,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  6, 29,  8,  5, 11,  3, 12, /* 4X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  2, 29,  8,  5, 11,  3, 12, /* 6X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 56,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   47, 36, 31, 40, 39, 44, 50, 24, 43, 35, 45, 48, 51, 38, 32, 57, /* CX */
   25, 42, 53, 37, 49, 55, 27,SYM, 46, 58, 41, 34, 16,  2, 17, 52, /* DX */
   47, 36, 31, 40, 39, 44, 50, 24, 43, 35, 45, 48, 51, 38, 32, 57, /* EX */
   25, 42, 53, 37, 49, 55, 27,SYM, 46, 58, 41, 34, 16,  6, 17, 76, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 70;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 15, 67, 21, 68,  7, 69,  1, 70, 26, 71, 20, 72, 19,
  73,  2, 73,  6, 74, 29, 75,  8, 76,  5, 77, 11, 78,  3, 79, 12,
  80, 23, 81, 33, 82,  4, 83, 10, 84,  9, 85, 13, 86, 18, 87, 28,
  88, 30, 89, 14, 90, 22, 97,  0, 98, 15, 99, 21, 100,  7, 101,  1,
  102, 26, 103, 20, 104, 19, 105,  2, 106, 29, 107,  8, 108,  5, 109, 11,
  110,  3, 111, 12, 112, 23, 113, 33, 114,  4, 115, 10, 116,  9, 117, 13,
  118, 18, 119, 28, 120, 30, 121, 14, 122, 22, 194, 31, 199, 24, 206, 32,
  214, 27, 219, 34, 220, 16, 226, 31, 231, 24, 238, 32, 246, 27, 251, 34,
  252, 16, 286, 25, 287, 25, 305,  6, 350, 17, 351, 17,
};


/* Model Table:
 * Number of web pages processed for this model: 1229
 * Number of characters consumed for this model: 4082224
 * Total considered sequences: 1486 / 1225
 *
 * - Positive sequences: first 587 (0.9950324572168119)
 * - Probable sequences: next 247 (834-587) (0.003968029568568232)
 * - Neutral sequences: last 391 (0.0009995132146198848)
 * - Negative sequences: -261 (off-ratio, TODO)
 */


#define TurkishFCMLowerBound  97
#define TurkishFCMUpperBound  351


static const PRUint8 TurkishFrequentCharMapping[] =
{
  1,16,22,8,2,27,21,20,3,30,9,6,12,4,13,24,34,5,11,10,
  14,19,29,31,15,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,32,0,0,0,0,25,0,0,0,0,0,
  0,33,0,0,0,0,0,0,0,28,0,0,0,0,35,17,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,
};

static const PRUint8 TurkishCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,2,0,
  
  0,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,2,0,
  
  0,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,
  3,3,3,3,3,3,3,3,3,3,1,2,3,3,1,1,2,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,2,3,1,3,3,2,3,2,1,3,2,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,1,3,3,2,3,1,2,3,2,2,
  
  0,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,
  2,3,3,3,3,3,3,3,1,3,2,2,2,1,3,3,1,2,
  
  0,2,1,1,3,3,3,3,3,3,3,3,3,2,2,3,3,0,
  3,3,2,2,3,3,3,3,3,3,1,2,1,2,1,0,1,0,
  
  0,3,3,3,3,3,3,3,3,1,2,3,3,3,3,3,3,3,
  1,2,2,2,2,2,2,0,1,2,3,2,2,1,2,2,1,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,
  2,3,3,2,2,2,2,3,0,2,3,2,1,1,3,2,0,3,
  
  0,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,
  1,3,3,2,3,3,3,3,0,3,3,3,1,1,1,1,1,0,
  
  0,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,
  1,3,3,2,3,2,3,3,0,3,3,3,1,1,2,2,2,2,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  2,2,3,2,3,3,3,2,0,2,3,2,1,1,2,3,1,1,
  
  0,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,
  3,3,3,3,3,3,3,2,3,3,0,3,3,3,0,0,1,1,
  
  0,3,3,3,3,3,3,1,3,3,3,3,3,2,2,3,3,0,
  3,3,3,3,3,3,3,3,3,3,1,2,2,2,1,0,2,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,
  2,3,2,3,3,2,2,1,1,2,3,2,1,1,2,1,0,1,
  
  0,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,
  1,2,2,1,2,2,1,0,0,1,3,1,2,1,2,1,0,1,
  
  0,1,2,1,3,3,3,0,3,3,3,3,3,1,0,3,3,1,
  3,3,2,1,3,3,3,3,3,3,1,1,2,1,0,0,0,0,
  
  0,3,3,3,2,3,3,3,2,3,3,2,3,2,3,2,3,3,
  2,3,2,3,2,1,1,3,0,2,3,0,0,0,1,1,1,1,
  
  0,3,3,3,2,3,3,3,3,2,2,3,2,3,3,3,2,3,
  2,3,2,3,3,2,1,1,0,1,1,1,0,0,2,2,0,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,
  2,2,2,1,2,2,2,3,0,2,2,2,1,1,3,2,1,1,
  
  0,3,3,3,3,3,3,3,3,2,2,3,2,3,3,3,2,3,
  1,2,3,3,2,2,2,1,0,2,3,1,1,1,2,1,2,1,
  
  0,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,
  0,1,3,2,3,1,2,0,1,2,1,2,1,1,1,1,1,1,
  
  0,3,3,3,2,2,3,3,3,2,2,2,3,3,3,3,3,3,
  1,2,3,3,3,3,1,1,0,1,2,1,1,1,1,1,1,1,
  
  0,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,2,3,
  1,1,3,1,2,2,3,3,0,1,1,2,1,1,1,0,1,1,
  
  0,3,3,3,1,2,3,3,1,2,3,2,3,3,3,2,3,3,
  0,0,1,2,1,0,1,2,0,0,3,0,0,0,0,1,0,0,
  
  0,3,3,3,2,3,3,3,3,1,1,2,3,2,3,1,1,3,
  1,1,1,1,1,2,0,1,0,1,0,0,0,0,0,0,0,0,
  
  0,3,3,3,2,3,3,3,1,3,3,3,2,3,3,3,1,2,
  1,1,1,3,2,1,1,1,0,3,1,1,1,0,1,1,1,0,
  
  0,0,1,0,3,3,3,0,3,3,3,3,3,0,0,3,2,0,
  2,3,1,2,2,3,3,3,3,2,1,1,0,1,0,0,0,0,
  
  0,3,3,3,3,3,2,2,1,1,1,3,1,3,2,2,1,1,
  0,1,3,2,2,1,1,0,0,2,0,3,0,1,0,1,0,0,
  
  0,3,3,3,1,2,2,2,2,2,1,1,1,3,3,2,1,2,
  0,0,1,1,1,0,2,0,0,1,1,1,1,0,0,1,0,0,
  
  0,2,2,3,1,1,1,2,1,1,3,1,1,2,1,1,1,0,
  1,2,1,1,2,0,2,0,0,2,0,1,1,3,0,1,0,0,
  
  0,1,1,1,3,3,3,0,2,2,2,2,2,0,0,3,2,1,
  1,1,2,1,1,2,1,1,2,1,0,1,0,0,0,1,0,0,
  
  0,0,0,0,1,1,2,0,1,1,1,1,1,1,0,0,0,0,
  0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,
  
  0,1,1,2,1,0,1,1,0,1,1,1,0,1,3,0,1,0,
  0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,
  
  0,0,0,0,2,1,2,0,1,2,1,1,3,0,0,0,1,0,
  1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,
  
};


const SequenceModel Iso_8859_3TurkishModel =
{
  Iso_8859_3_CharToOrderMap,
  TurkishFCMLowerBound,
  TurkishFCMUpperBound,
  TurkishFrequentCharMapping,
  TurkishCompactedLangModel,
  35,
  (float)0.9990004867853801,
  PR_FALSE,
  "ISO-8859-3",
  "tr"
};

const SequenceModel Iso_8859_9TurkishModel =
{
  Iso_8859_9_CharToOrderMap,
  TurkishFCMLowerBound,
  TurkishFCMUpperBound,
  TurkishFrequentCharMapping,
  TurkishCompactedLangModel,
  35,
  (float)0.9990004867853801,
  PR_FALSE,
  "ISO-8859-9",
  "tr"
};

const LanguageModel TurkishModel =
{
  "tr",
  Unicode_CharOrder,
  70,
  TurkishFCMLowerBound,
  TurkishFCMUpperBound,
  TurkishFrequentCharMapping,
  TurkishCompactedLangModel,
  35,
  5,
  (float)0.44564947930343846,
  23,
  (float)0.03527831887716108,
  (float)0.9995154602001264,
};
