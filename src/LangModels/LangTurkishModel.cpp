/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Turkish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 08:32:01.415944
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_3_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 18,  7,  1, 24, 19, 17, 10, 29, 11,  5, 12,  3,  9, /* 4X */
   22, 32,  4,  8,  6, 14, 21, 28, 30, 13, 23,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 18,  7,  1, 24, 19, 17,  2, 29, 11,  5, 12,  3,  9, /* 6X */
   22, 32,  4,  8,  6, 14, 21, 28, 30, 13, 23,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 58,SYM,SYM,SYM,ILL, 59,SYM,SYM,  2, 20, 26, 60,SYM,ILL, 61, /* AX */
  SYM, 62,SYM,SYM,SYM,SYM, 63,SYM,SYM, 10, 20, 26, 64,SYM,ILL, 65, /* BX */
   41, 35, 33,ILL, 40, 66, 67, 25, 39, 31, 44, 49, 54, 37, 34, 50, /* CX */
  ILL, 43, 55, 38, 45, 68, 27,SYM, 69, 52, 42, 36, 16, 70, 71, 53, /* DX */
   41, 35, 33,ILL, 40, 72, 73, 25, 39, 31, 44, 49, 54, 37, 34, 50, /* EX */
  ILL, 43, 55, 38, 45, 74, 27,SYM, 75, 52, 42, 36, 16, 76, 77,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 18,  7,  1, 24, 19, 17, 10, 29, 11,  5, 12,  3,  9, /* 4X */
   22, 32,  4,  8,  6, 14, 21, 28, 30, 13, 23,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 18,  7,  1, 24, 19, 17,  2, 29, 11,  5, 12,  3,  9, /* 6X */
   22, 32,  4,  8,  6, 14, 21, 28, 30, 13, 23,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 48,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   41, 35, 33, 47, 40, 46, 51, 25, 39, 31, 44, 49, 54, 37, 34, 50, /* CX */
   26, 43, 55, 38, 45, 57, 27,SYM, 56, 52, 42, 36, 16,  2, 20, 53, /* DX */
   41, 35, 33, 47, 40, 46, 51, 25, 39, 31, 44, 49, 54, 37, 34, 50, /* EX */
   26, 43, 55, 38, 45, 57, 27,SYM, 56, 52, 42, 36, 16, 10, 20, 78, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 74;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 15, 67, 18, 68,  7, 69,  1, 70, 24, 71, 19,72, 17,
  73,  2, 73, 10, 74, 29, 75, 11, 76,  5, 77, 12, 78,  3,79,  9,
  80, 22, 81, 32, 82,  4, 83,  8, 84,  6, 85, 14, 86, 21,87, 28,
  88, 30, 89, 13, 90, 23, 97,  0, 98, 15, 99, 18, 100,  7,101,  1,
  102, 24, 103, 19, 104, 17, 105,  2, 106, 29, 107, 11, 108,  5,109, 12,
  110,  3, 111,  9, 112, 22, 113, 32, 114,  4, 115,  8, 116,  6,117, 14,
  118, 21, 119, 28, 120, 30, 121, 13, 122, 23, 193, 35, 194, 33,199, 25,
  201, 31, 206, 34, 214, 27, 219, 36, 220, 16, 225, 35, 226, 33,231, 25,
  233, 31, 238, 34, 246, 27, 251, 36, 252, 16, 286, 26, 287, 26,305, 10,
  350, 20, 351, 20,
};


/* Model Table:
 * Total considered sequences: 1127 / 1369
 * - Positive sequences: first 563 (0.9950153377631594)
 * - Probable sequences: next 185 (748-563) (0.003986666205780365)
 * - Neutral sequences: last 621 (0.000997996031060211)
 * - Negative sequences: 242 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 TurkishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,2,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,2,0,0,0,0,
  3,3,2,3,3,3,3,3,3,3,1,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,1,3,3,1,2,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,2,2,3,1,2,2,0,1,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,3,1,2,2,1,2,1,1,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,2,3,3,0,2,2,2,0,2,0,2,2,1,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,1,3,2,3,3,3,0,3,3,1,1,1,1,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,2,3,0,3,2,2,2,0,0,3,3,2,1,1,0,1,1,0,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,0,3,3,1,3,2,0,3,3,0,1,2,2,1,1,1,0,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,3,3,1,2,0,1,0,0,
  2,1,1,3,3,3,3,3,3,2,3,3,3,3,1,3,0,2,3,3,3,3,3,3,3,3,3,0,1,0,2,0,1,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,2,2,3,0,3,2,1,0,3,1,3,1,0,2,
  3,3,3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,2,2,0,2,1,0,1,2,0,0,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,3,3,1,3,2,2,3,1,0,3,3,1,1,0,1,1,0,0,0,
  3,3,3,3,3,3,3,3,3,2,1,3,3,3,2,3,1,3,3,3,3,3,3,3,3,3,3,0,2,2,2,1,1,0,0,0,0,
  3,3,3,3,3,3,2,3,3,3,3,1,3,3,3,3,3,1,2,1,0,1,2,1,1,1,0,3,1,1,1,1,0,1,1,1,0,
  1,2,0,3,3,3,3,3,3,0,0,3,3,3,0,3,0,2,3,1,3,3,3,3,3,3,3,1,0,1,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,2,3,3,3,2,3,2,2,1,2,2,2,2,1,3,0,1,2,1,1,1,2,3,1,0,0,
  3,3,3,2,3,3,3,2,3,3,3,3,2,3,3,2,3,3,3,2,0,1,2,1,2,0,0,0,1,2,1,1,1,1,0,1,0,
  3,3,3,3,3,3,3,2,3,3,3,1,2,3,3,3,3,3,1,3,0,1,1,1,2,0,0,3,2,1,0,1,1,2,0,1,0,
  3,3,3,1,2,3,3,1,2,3,3,3,3,2,3,3,3,2,1,2,0,2,1,1,3,3,0,2,1,0,0,0,0,0,0,0,0,
  3,3,3,1,3,3,1,3,3,3,3,1,2,3,3,2,3,2,3,2,1,2,1,2,1,0,0,0,0,0,1,1,0,1,1,1,0,
  3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,2,3,3,2,1,0,1,3,1,1,2,0,0,2,1,0,1,0,0,0,0,0,
  3,3,3,1,1,3,2,3,2,3,3,2,3,3,3,2,3,2,3,3,1,1,1,3,1,1,0,1,1,0,0,1,0,0,1,1,0,
  3,3,3,2,3,3,3,2,2,3,3,3,2,3,3,1,2,1,2,2,0,1,1,0,3,2,0,1,2,1,1,2,0,0,1,0,0,
  3,3,3,1,2,3,3,0,2,3,3,2,3,2,3,3,3,1,0,2,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,
  3,3,3,1,3,3,1,3,1,1,3,0,3,1,3,0,3,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,3,3,3,3,3,3,0,0,3,3,3,0,2,0,2,2,2,2,3,3,3,2,2,3,0,1,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,2,2,3,3,1,2,3,2,2,2,0,3,2,1,0,1,1,0,2,0,0,1,2,1,0,0,0,0,1,0,0,
  3,3,3,2,2,2,1,2,1,3,3,1,1,1,3,0,2,1,1,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,
  2,2,3,1,0,2,2,1,1,2,2,0,1,2,2,1,0,1,2,0,0,1,2,1,1,0,0,0,1,0,2,0,0,0,0,0,0,
  0,1,0,2,2,2,2,1,2,1,0,0,3,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,1,0,0,1,0,0,1,1,0,0,0,0,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,
  0,0,0,2,2,3,1,0,1,0,0,1,0,2,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,1,2,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_3TurkishModel =
{
  Iso_8859_3_CharToOrderMap,
  TurkishLangModel,
  37,
  (float)0.9990020039689398,
  PR_FALSE,
  "ISO-8859-3",
  "tr"
};

const SequenceModel Iso_8859_9TurkishModel =
{
  Iso_8859_9_CharToOrderMap,
  TurkishLangModel,
  37,
  (float)0.9990020039689398,
  PR_FALSE,
  "ISO-8859-9",
  "tr"
};

const LanguageModel TurkishModel =
{
  "tr",
  Unicode_CharOrder,
  74,
  TurkishLangModel,
  37,
  5,
  (float)0.44079142463089166,
  23,
  (float)0.03634474521998602,
  (float)0.9998143827486884,
};
