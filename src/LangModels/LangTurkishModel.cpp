/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Turkish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-08 23:28:46.508773
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 * IRR: irrelevant character (which does belong to a word)
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */



#define IRR                     (-1)

#define TurkishOrderWidth        35


static const unsigned char Iso_8859_3_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  6, 29,  8,  5, 11,  3, 12, /* 4X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  2, 29,  8,  5, 11,  3, 12, /* 6X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,249,SYM,SYM,SYM,ILL,249,SYM,SYM,  2, 17, 25,249,SYM,ILL,249, /* AX */
  SYM,249,SYM,SYM,SYM,SYM,249,SYM,SYM,  6, 17, 25,249,SYM,ILL,249, /* BX */
  249,249, 31,ILL,249,249,249, 24,249,249,249,249,249,249, 32,249, /* CX */
  ILL,249,249,249,249,249, 27,SYM,249,249,249, 34, 16,249,249,249, /* DX */
  249,249, 31,ILL,249,249,249, 24,249,249,249,249,249,249, 32,249, /* EX */
  ILL,249,249,249,249,249, 27,SYM,249,249,249, 34, 16,249,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  6, 29,  8,  5, 11,  3, 12, /* 4X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 15, 21,  7,  1, 26, 20, 19,  2, 29,  8,  5, 11,  3, 12, /* 6X */
   23, 33,  4, 10,  9, 13, 18, 28, 30, 14, 22,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  249,249, 31,249,249,249,249, 24,249,249,249,249,249,249, 32,249, /* CX */
   25,249,249,249,249,249, 27,SYM,249,249,249, 34, 16,  2, 17,249, /* DX */
  249,249, 31,249,249,249,249, 24,249,249,249,249,249,249, 32,249, /* EX */
   25,249,249,249,249,249, 27,SYM,249,249,249, 34, 16,  6, 17,249, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    70

static const PRUint32 Unicode_CharOrder[] =
{
   65,  0,  66, 15,  67, 21,  68,  7,  69,  1,  70, 26,  71, 20,  72, 19,
   73,  2,  73,  6,  74, 29,  75,  8,  76,  5,  77, 11,  78,  3,  79, 12,
   80, 23,  81, 33,  82,  4,  83, 10,  84,  9,  85, 13,  86, 18,  87, 28,
   88, 30,  89, 14,  90, 22,  97,  0,  98, 15,  99, 21, 100,  7, 101,  1,
  102, 26, 103, 20, 104, 19, 105,  2, 106, 29, 107,  8, 108,  5, 109, 11,
  110,  3, 111, 12, 112, 23, 113, 33, 114,  4, 115, 10, 116,  9, 117, 13,
  118, 18, 119, 28, 120, 30, 121, 14, 122, 22, 194, 31, 199, 24, 206, 32,
  214, 27, 219, 34, 220, 16, 226, 31, 231, 24, 238, 32, 246, 27, 251, 34,
  252, 16, 286, 25, 287, 25, 305,  6, 350, 17, 351, 17,
};

static const float OrderToRatio[] =
{
  0.119548029f,  0.092190887f,  0.085994506f,  0.075452026f,  0.072449320f,  0.070010722f,  0.043304003f,  0.042177989f, 
  0.041767684f,  0.040387369f,  0.037109822f,  0.033208995f,  0.030082318f,  0.029433362f,  0.027904867f,  0.021356866f, 
  0.016264737f,  0.013988011f,  0.013111407f,  0.012836566f,  0.012747561f,  0.011612988f,  0.010689925f,  0.010597741f, 
  0.008901751f,  0.007678417f,  0.007332421f,  0.006454839f,  0.001822652f,  0.001538520f,  0.000590271f,  0.000352353f, 
  0.000300271f,  0.000159672f,  0.000156737f, 
  0    /* value slot for out-of-bounds index values; range: 0..freq_count(35) */
};


/* Model Table:
 * Number of web pages processed for this model: 1226
 * Number of characters consumed for this model: 4089645
 * Total considered sequences: 1487 / 1225
 *
 * - Positive sequences: first 587 (0.995032760907354)
 * - Probable sequences: next 248 (835-587) (0.003969775815181875)
 * - Neutral sequences: last 390 (0.0009974632774640835)
 * - Negative sequences: -262 (off-ratio, TODO)
 */
#define TurkishUnicodeCharToOrderIsReduced  0


#define TurkishFCMLowerBound  65
#define TurkishFCMUpperBound  351


static const PRInt16 TurkishUnicodeCharToOrder[] =
{
  0,15,21,7,1,26,20,19,6,29,8,5,11,3,12,23,33,4,10,9,
  13,18,28,30,14,22,IRR,IRR,IRR,IRR,IRR,IRR,0,15,21,7,1,26,20,19,
  2,29,8,5,11,3,12,23,33,4,10,9,13,18,28,30,14,22,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,31,IRR,IRR,IRR,IRR,24,IRR,IRR,IRR,IRR,IRR,
  IRR,32,IRR,IRR,IRR,IRR,IRR,IRR,IRR,27,IRR,IRR,IRR,IRR,34,16,IRR,IRR,IRR,IRR,
  IRR,31,IRR,IRR,IRR,IRR,24,IRR,IRR,IRR,IRR,IRR,IRR,32,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,27,IRR,IRR,IRR,IRR,34,16,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,25,25,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  6,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,17,17,
};



#define TurkishUnicodeCharToOrderFirstTableChunkSize    58
#define TurkishUnicodeCharToOrderSecondTableChunkOffset 129
#define TurkishUnicodeCharToOrderSecondTableChunkSize   158


static const PRInt16 TurkishUnicodeCharToOrder2[] =
{
  31,IRR,IRR,IRR,IRR,24,IRR,IRR,IRR,IRR,IRR,IRR,32,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  27,IRR,IRR,IRR,IRR,34,16,IRR,IRR,IRR,IRR,IRR,31,IRR,IRR,IRR,IRR,24,IRR,IRR,
  IRR,IRR,IRR,IRR,32,IRR,IRR,IRR,IRR,IRR,IRR,IRR,27,IRR,IRR,IRR,IRR,34,16,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,25,25,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,6,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,17,17,
};

static const PRUint8 TurkishCompactedLangModel[] =
{
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,2,0,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,2,0,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,1,2,3,3,1,1,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,3,2,3,2,1,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,2,3,1,2,3,2,2,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,2,2,2,1,3,3,1,2,
  2,1,1,3,3,3,3,3,3,3,3,3,2,2,3,3,0,3,3,2,2,3,3,3,3,3,3,1,2,1,2,1,0,1,0,
  3,3,3,3,3,3,3,3,1,2,3,3,3,3,3,3,3,1,2,2,2,2,2,2,0,1,2,3,2,2,1,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,2,2,2,2,3,0,2,3,2,1,1,3,2,0,3,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,3,2,3,3,3,3,0,3,3,3,1,1,1,1,1,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,3,2,3,2,3,3,0,3,3,3,1,1,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,3,3,2,0,2,3,2,1,1,2,3,1,1,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,2,3,3,0,3,3,3,0,0,1,1,
  3,3,3,3,3,3,1,3,3,3,3,3,2,2,3,3,0,3,3,3,3,3,3,3,3,3,3,1,2,2,2,1,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,2,3,3,2,2,1,1,2,3,2,1,1,2,1,0,1,
  3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,1,2,2,1,2,2,1,1,0,1,3,1,2,1,2,1,0,1,
  1,2,1,3,3,3,0,3,3,3,3,3,1,0,3,3,1,3,3,2,1,3,3,3,3,3,3,1,1,2,1,0,0,0,0,
  3,3,3,2,3,3,3,2,3,3,2,3,2,3,2,3,3,2,3,2,3,2,1,1,3,0,2,3,0,0,0,1,1,1,1,
  3,3,3,2,3,3,3,3,2,2,3,2,3,3,3,2,3,2,3,2,3,3,2,1,1,0,1,1,1,0,0,2,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,2,1,2,2,2,3,0,2,2,2,1,1,3,2,1,1,
  3,3,3,3,3,3,3,3,2,2,3,2,3,3,3,2,3,1,2,3,3,2,2,2,1,0,2,3,1,1,1,2,1,2,1,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,0,1,3,2,3,1,2,0,1,2,1,2,1,1,1,1,1,1,
  3,3,3,2,2,3,3,3,2,2,2,3,3,3,3,3,3,1,2,3,3,3,3,1,1,0,1,2,1,1,1,1,1,1,1,
  3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,2,3,1,1,3,1,2,2,3,3,0,1,1,2,1,1,1,0,1,1,
  3,3,3,1,2,3,3,1,2,3,2,3,3,3,2,3,3,0,0,1,2,1,0,1,2,0,0,3,0,0,0,0,1,0,0,
  3,3,3,2,3,3,3,3,1,1,2,3,2,3,1,1,3,1,1,1,1,1,2,0,1,0,1,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,1,3,3,3,2,3,3,3,1,2,1,1,1,3,2,1,1,1,0,3,1,1,1,0,1,1,1,0,
  0,1,0,3,3,3,0,3,3,3,3,3,0,0,3,2,0,2,3,1,2,2,3,3,3,3,2,1,1,0,1,0,0,0,0,
  3,3,3,3,3,2,2,1,1,1,3,1,3,2,2,1,1,0,1,3,2,2,1,1,0,0,2,0,3,0,1,0,1,0,0,
  3,3,3,1,2,2,2,2,2,1,1,1,3,3,2,1,2,0,0,1,1,1,0,2,0,0,1,1,1,1,0,0,1,0,0,
  2,2,3,1,1,1,2,1,1,3,1,1,2,1,1,1,0,1,2,1,1,2,0,2,0,0,2,0,1,1,3,0,1,0,0,
  1,1,1,3,3,3,0,2,2,2,2,2,0,0,3,2,1,1,1,2,1,1,2,1,1,2,1,0,1,0,0,0,1,0,0,
  0,0,0,1,1,2,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,
  1,1,2,1,0,1,1,0,1,1,1,0,1,3,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,
  0,0,0,2,1,2,0,1,2,1,1,3,0,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_3TurkishModel =
{
  Iso_8859_3_CharToOrderMap,
  TurkishCompactedLangModel,
  TurkishOrderWidth,
  0.9990025367225359f,
  PR_FALSE,
  "ISO-8859-3",
  "tr"
};

const SequenceModel Iso_8859_9TurkishModel =
{
  Iso_8859_9_CharToOrderMap,
  TurkishCompactedLangModel,
  TurkishOrderWidth,
  0.9990025367225359f,
  PR_FALSE,
  "ISO-8859-9",
  "tr"
};

const LanguageModel TurkishModel =
{
  "tr",
  Unicode_CharOrder,
  Unicode_Char_size,

  TurkishFCMLowerBound,
  TurkishFCMUpperBound,
  TurkishUnicodeCharToOrderIsReduced,
  TurkishUnicodeCharToOrder,
  TurkishUnicodeCharToOrderFirstTableChunkSize,
  TurkishUnicodeCharToOrderSecondTableChunkOffset,
  TurkishUnicodeCharToOrderSecondTableChunkSize,
  TurkishUnicodeCharToOrder2,
  OrderToRatio,
  TurkishCompactedLangModel,
  TurkishOrderWidth,
  5,
  0.44563476780991995f,
  23,
  0.03528790396232436f,
  0.9995156058777716f,
};
