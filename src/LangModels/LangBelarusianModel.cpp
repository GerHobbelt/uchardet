/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Belarusian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 00:16:10.818987
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 29, 48, 40, 41, 27, 49, 46, 43, 30, 57, 53, 39, 44, 33, 32, /* 4X */
   47, 58, 31, 37, 35, 45, 52, 50, 55, 51, 56,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 29, 48, 40, 41, 27, 49, 46, 43, 30, 57, 53, 39, 44, 33, 32, /* 6X */
   47, 58, 31, 37, 35, 45, 52, 50, 55, 51, 56,SYM,SYM,SYM,SYM,CTR, /* 7X */
   60, 61,SYM, 62,SYM,SYM,SYM,SYM,SYM,SYM, 63,SYM, 64, 65, 66, 67, /* 8X */
   68,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 69,SYM, 70, 71, 72, 73, /* 9X */
  SYM, 19, 19, 74,SYM, 75,SYM,SYM, 42,SYM, 76,SYM,SYM,SYM,SYM, 77, /* AX */
  SYM,SYM,  2,  2, 78,SYM,SYM,SYM, 42,SYM, 79,SYM, 80, 81, 82, 83, /* BX */
    0, 21, 13, 20, 14,  9, 36, 18, 54, 25,  7,  6, 12,  1, 11, 15, /* CX */
    3,  5,  8, 16, 38, 26, 17, 23, 28, 59, 84,  4, 24, 22, 34, 10, /* DX */
    0, 21, 13, 20, 14,  9, 36, 18, 54, 25,  7,  6, 12,  1, 11, 15, /* EX */
    3,  5,  8, 16, 38, 26, 17, 23, 28, 59, 85,  4, 24, 22, 34, 10, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 29, 48, 40, 41, 27, 49, 46, 43, 30, 57, 53, 39, 44, 33, 32, /* 4X */
   47, 58, 31, 37, 35, 45, 52, 50, 55, 51, 56,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 29, 48, 40, 41, 27, 49, 46, 43, 30, 57, 53, 39, 44, 33, 32, /* 6X */
   47, 58, 31, 37, 35, 45, 52, 50, 55, 51, 56,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 42, 86, 87, 88, 89,  2, 90, 91, 92, 93, 94, 95,SYM, 19, 96, /* AX */
    0, 21, 13, 20, 14,  9, 36, 18, 54, 25,  7,  6, 12,  1, 11, 15, /* BX */
    3,  5,  8, 16, 38, 26, 17, 23, 28, 59, 97,  4, 24, 22, 34, 10, /* CX */
    0, 21, 13, 20, 14,  9, 36, 18, 54, 25,  7,  6, 12,  1, 11, 15, /* DX */
    3,  5,  8, 16, 38, 26, 17, 23, 28, 59, 98,  4, 24, 22, 34, 10, /* EX */
  SYM, 42, 99,100,101,102,  2,103,104,105,106,107,108,SYM, 19,109, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 86;
static const unsigned int Unicode_CharOrder[] =
{
  65, 29, 67, 40, 68, 41, 69, 27, 73, 30, 76, 39, 78, 33,79, 32,
  82, 31, 83, 37, 84, 35, 97, 29, 99, 40, 100, 41, 101, 27,105, 30,
  108, 39, 110, 33, 111, 32, 114, 31, 115, 37, 116, 35, 1025, 42,1030,  2,
  1038, 19, 1040,  0, 1041, 21, 1042, 13, 1043, 20, 1044, 14, 1045,  9,1046, 36,
  1047, 18, 1049, 25, 1050,  7, 1051,  6, 1052, 12, 1053,  1, 1054, 11,1055, 15,
  1056,  3, 1057,  5, 1058,  8, 1059, 16, 1060, 38, 1061, 26, 1062, 17,1063, 23,
  1064, 28, 1067,  4, 1068, 24, 1069, 22, 1070, 34, 1071, 10, 1072,  0,1073, 21,
  1074, 13, 1075, 20, 1076, 14, 1077,  9, 1078, 36, 1079, 18, 1081, 25,1082,  7,
  1083,  6, 1084, 12, 1085,  1, 1086, 11, 1087, 15, 1088,  3, 1089,  5,1090,  8,
  1091, 16, 1092, 38, 1093, 26, 1094, 17, 1095, 23, 1096, 28, 1099,  4,1100, 24,
  1101, 22, 1102, 34, 1103, 10, 1105, 42, 1110,  2, 1118, 19,
};


/* Model Table:
 * Total considered sequences: 1287 / 1849
 * - Positive sequences: first 915 (0.995016503019134)
 * - Probable sequences: next 211 (1126-915) (0.003993908400836688)
 * - Neutral sequences: last 723 (0.000989588580029288)
 * - Negative sequences: 562 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 BelarusianLangModel[] =
{
  3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,3,
  3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,1,3,3,3,0,3,2,3,3,3,0,3,0,3,0,0,0,0,0,3,0,1,0,3,0,
   0,0,3,
  3,3,3,3,0,3,3,3,3,3,3,2,3,3,3,3,0,3,3,3,3,3,2,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,3,
  3,3,2,2,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,3,3,3,1,0,3,0,3,0,0,0,0,0,1,0,3,0,3,0,
   0,0,0,
  2,3,3,3,0,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,3,1,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,0,2,1,2,3,1,3,0,3,0,2,0,0,0,0,0,3,0,0,0,3,0,
   0,0,3,
  3,3,3,2,3,0,3,3,3,3,3,3,3,0,3,2,3,2,3,0,2,2,3,1,3,0,3,0,0,0,0,0,0,0,3,0,2,0,3,0,
   0,0,3,
  3,3,3,3,0,3,3,3,3,3,1,3,3,3,1,2,3,3,3,0,3,2,3,1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,2,0,
   0,0,0,
  3,3,2,3,3,3,3,3,0,3,1,3,3,3,2,2,3,3,0,0,1,2,3,3,2,0,1,0,1,0,0,0,0,0,0,0,0,0,3,0,
   0,0,0,
  3,3,3,3,0,3,3,3,3,3,3,2,3,3,3,3,0,3,3,3,3,3,0,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,0,
  0,3,1,3,0,3,3,3,3,3,3,0,3,3,3,3,0,3,3,3,3,3,0,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,0,
  1,3,3,3,0,3,3,3,3,3,3,0,3,3,3,3,2,3,3,3,3,3,0,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,
   0,0,0,
  3,3,3,2,3,3,3,3,2,3,3,3,0,3,1,3,3,2,1,0,2,3,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,
   0,0,3,
  3,0,3,0,3,2,0,0,1,3,3,3,1,0,2,1,3,0,0,0,0,0,3,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,
   0,0,3,
  3,3,0,3,3,3,3,3,3,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,0,3,0,0,0,0,0,1,0,3,0,0,0,
   0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,0,3,3,2,0,0,2,3,3,1,0,0,0,3,0,0,0,0,0,2,0,0,0,0,0,
   0,0,2,
  3,3,3,3,0,3,3,3,3,3,3,2,3,3,3,3,0,3,3,3,3,3,3,3,0,3,3,0,3,0,0,0,0,0,3,0,3,0,2,0,
   0,0,0,
  3,3,3,0,3,2,2,3,3,3,3,3,2,3,0,0,3,3,1,0,1,1,3,0,3,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,
   0,0,3,
  3,3,3,3,3,2,3,3,1,3,3,3,3,3,3,0,3,2,2,0,3,3,3,2,3,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,
   0,0,3,
  2,3,1,3,0,3,3,3,3,2,3,2,3,3,3,3,0,3,3,0,3,3,3,3,0,0,1,0,3,0,0,0,0,0,1,0,3,0,2,0,
   0,0,0,
  3,3,3,3,0,2,3,3,1,3,0,3,3,3,0,0,3,0,1,0,3,2,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,1,
  3,3,3,3,3,3,3,2,1,3,3,3,3,3,2,0,3,2,2,0,0,0,3,2,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,
   0,0,2,
  3,3,3,3,0,3,3,3,3,2,3,2,3,3,3,3,0,3,3,3,3,3,0,3,0,3,3,0,3,0,0,0,0,0,2,0,3,0,3,0,
   0,0,0,
  3,3,0,0,3,1,3,3,2,2,0,3,2,3,0,0,3,1,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,
   0,0,0,
  0,3,2,2,0,3,2,3,3,3,3,0,3,3,3,3,0,3,1,0,3,3,0,2,0,0,1,0,3,0,0,0,0,0,3,0,0,0,3,0,
   0,0,3,
  0,3,0,3,0,3,3,3,3,1,0,0,3,3,3,3,0,3,2,0,3,3,0,3,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,
  3,3,3,3,0,1,3,0,3,3,0,3,3,3,1,1,3,0,0,0,1,1,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,0,3,0,3,0,3,
   3,3,0,
  3,3,0,0,3,1,3,3,3,2,0,3,3,3,0,1,3,2,0,0,1,0,3,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,3,3,2,3,0,3,0,3,0,3,
   3,3,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,0,3,0,3,0,3,
   3,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,0,3,0,3,0,3,
   3,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,0,3,0,3,0,3,
   3,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,2,3,3,0,3,0,3,0,2,
   3,3,0,
  2,3,0,3,0,3,3,3,3,2,0,0,2,2,3,0,0,3,3,0,0,3,1,3,0,0,2,0,2,0,0,0,0,0,3,0,3,0,0,0,
   0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,1,0,3,0,3,0,3,
   3,2,0,
  3,3,0,1,3,2,2,3,0,1,0,3,1,3,1,1,3,3,2,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,
   0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,2,3,2,0,3,0,3,0,2,
   3,2,0,
  3,3,3,3,2,3,3,2,3,3,0,3,0,0,0,0,3,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
   0,0,2,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,0,3,0,0,3,0,3,0,3,
   0,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,3,3,3,3,0,0,3,0,3,0,3,
   2,2,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,2,0,0,0,3,0,3,
   2,3,0,
  1,3,0,3,0,3,3,3,3,0,0,0,3,3,3,2,0,0,3,3,3,1,0,1,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
   0,0,0,
};


const SequenceModel Windows_1251BelarusianModel =
{
  Windows_1251_CharToOrderMap,
  BelarusianLangModel,
  43,
  (float)0.9990104114199707,
  PR_FALSE,
  "WINDOWS-1251",
  "be"
};

const SequenceModel Iso_8859_5BelarusianModel =
{
  Iso_8859_5_CharToOrderMap,
  BelarusianLangModel,
  43,
  (float)0.9990104114199707,
  PR_FALSE,
  "ISO-8859-5",
  "be"
};

const LanguageModel BelarusianModel =
{
  "be",
  Unicode_CharOrder,
  86,
  BelarusianLangModel,
  43,
  7,
  (float)0.4277082922986016,
  34,
  (float)0.03534567658065787,
  (float)0.976994287965334,
};
