/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Portuguese *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 22:52:02.493214
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 4X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 6X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 46,SYM, 46,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 53, 61,SYM,SYM, 53,SYM,SYM,SYM, 64, 65, 60,SYM, /* BX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 66, 24, 45, 44, /* CX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 67, 56, /* DX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 68, 24, 45, 44, /* EX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 69, 60, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 4X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 6X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 61,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 70, 24, 45, 44, /* CX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 71, 56, /* DX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 72, 24, 45, 44, /* EX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 73, 60, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 4X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 6X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 51,SYM,SYM,SYM,SYM,SYM,SYM, 46,SYM, 74,ILL, 53,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 46,SYM, 75,ILL, 53, 60, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 61,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 76, 24, 45, 44, /* CX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 77, 56, /* DX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 78, 24, 45, 44, /* EX */
   63, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 55, 79, 60, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 4X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 16, 11,  7,  1, 17, 14, 18,  4, 25, 30, 12,  9,  6,  2, /* 6X */
   13, 19,  5,  3,  8, 10, 15, 32, 27, 28, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 61,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 80, 24, 45, 44, /* CX */
   50, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 62, 48, 56, /* DX */
   36, 23, 35, 20, 41, 42, 49, 21, 40, 22, 31, 47, 81, 24, 45, 44, /* EX */
   50, 43, 59, 29, 37, 33, 38,SYM, 57, 58, 34, 54, 39, 52, 48, 60, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    76

static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 16, 67, 11, 68,  7, 69,  1, 70, 17, 71, 14, 72, 18,
  73,  4, 74, 25, 75, 30, 76, 12, 77,  9, 78,  6, 79,  2, 80, 13,
  81, 19, 82,  5, 83,  3, 84,  8, 85, 10, 86, 15, 87, 32, 88, 27,
  89, 28, 90, 26, 97,  0, 98, 16, 99, 11, 100,  7, 101,  1, 102, 17,
  103, 14, 104, 18, 105,  4, 106, 25, 107, 30, 108, 12, 109,  9, 110,  6,
  111,  2, 112, 13, 113, 19, 114,  5, 115,  3, 116,  8, 117, 10, 118, 15,
  119, 32, 120, 27, 121, 28, 122, 26, 192, 36, 193, 23, 194, 35, 195, 20,
  199, 21, 201, 22, 202, 31, 205, 24, 211, 29, 212, 37, 213, 33, 218, 34,
  224, 36, 225, 23, 226, 35, 227, 20, 231, 21, 233, 22, 234, 31, 237, 24,
  243, 29, 244, 37, 245, 33, 250, 34,
};

static const float OrderToRatio[] =
{
  0.120061133,  0.120061133,  0.114276890,  0.114276890,  0.100746712,  0.100746712,  0.075058930,  0.075058930, 
  0.069514924,  0.069514924,  0.067514414,  0.067514414,  0.055330686,  0.055330686,  0.053732524,  0.053732524, 
  0.049159720,  0.049159720,  0.046217060,  0.046217060,  0.037589036,  0.037589036,  0.037381514,  0.037381514, 
  0.032723260,  0.032723260,  0.026918509,  0.026918509,  0.013498439,  0.013498439,  0.012955465,  0.012955465, 
  0.011687628,  0.011687628,  0.011473026,  0.011473026,  0.009817002,  0.009817002,  0.006219795,  0.006219795, 
  0.006214668,  0.006214668,  0.005664857,  0.005664857,  0.004912652,  0.004912652,  0.003511269,  0.003511269, 
  0.003445106,  0.003445106,  0.003286413,  0.003286413,  0.003245641,  0.003245641,  0.002867707,  0.002867707, 
  0.002460965,  0.002460965,  0.002244898,  0.002244898,  0.002170434,  0.002170434,  0.001829854,  0.001829854, 
  0.001750752,  0.001750752,  0.001452409,  0.001452409,  0.001262709,  0.001262709,  0.000599616,  0.000599616, 
  0.000563727,  0.000563727,  0.000470220,  0.000470220, 
};


/* Model Table:
 * Number of web pages processed for this model: 777
 * Number of characters consumed for this model: 4095955
 * Total considered sequences: 1260 / 1444
 *
 * - Positive sequences: first 555 (0.99503359848643)
 * - Probable sequences: next 193 (748-555) (0.003969525019283826)
 * - Neutral sequences: last 696 (0.0009968764942861474)
 * - Negative sequences: 184 (off-ratio, TODO)
 */


#define PortugueseUnicodeAlphabetWidth         38
#define PortugueseUnicodeCharToOrderIsReduced  0


#define PortugueseFCMLowerBound  97
#define PortugueseFCMUpperBound  250


static const PRUint8 PortugueseUnicodeCharToOrder[] =
{
  1,17,12,8,2,18,15,19,5,26,31,13,10,7,3,14,20,6,4,9,
  11,16,33,28,29,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,37,24,36,21,0,0,0,22,0,23,32,0,0,
  25,0,0,0,0,0,30,38,34,0,0,0,0,35,
};

static const PRUint8 PortugueseCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,1,3,3,3,3,3,1,3,0,3,0,3,0,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,1,2,3,3,3,3,3,2,3,0,3,2,2,2,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,3,3,3,1,3,0,3,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,3,1,2,1,3,3,3,2,3,3,1,1,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,1,3,3,3,2,3,3,3,1,3,2,2,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,3,3,3,3,2,2,2,3,1,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,1,3,2,0,3,
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,2,2,2,2,3,0,3,3,3,2,2,1,3,3,1,3,3,1,3,2,0,2,
  0,3,3,3,3,3,3,3,2,3,3,3,3,3,2,1,3,2,2,3,1,3,0,3,3,3,1,2,1,3,3,2,3,3,2,3,3,1,3,
  0,3,3,3,3,3,2,2,2,2,3,3,3,2,3,2,1,3,1,1,1,3,0,3,3,3,1,1,1,3,3,1,3,2,1,3,2,0,3,
  0,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,2,1,3,3,3,3,3,3,3,2,1,3,3,1,0,0,2,1,0,
  0,3,3,3,3,3,3,3,3,3,2,3,3,3,2,2,1,2,2,3,2,2,3,3,3,3,1,1,1,3,3,3,3,1,1,2,3,1,2,
  0,3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,1,1,3,3,3,3,2,2,2,3,0,3,
  0,3,3,3,3,3,3,2,2,3,2,3,2,3,3,2,1,1,2,3,1,3,3,3,3,3,1,1,1,2,3,2,2,1,2,3,2,0,2,
  0,3,3,3,3,3,3,3,1,2,3,3,1,3,1,3,1,2,1,3,1,2,0,3,3,2,1,1,1,2,2,1,3,1,1,1,3,0,1,
  0,3,3,3,2,3,3,1,2,1,1,3,1,1,1,1,1,1,1,2,0,2,0,3,3,3,0,0,0,2,2,1,2,0,0,0,2,1,2,
  0,3,3,3,3,3,3,3,2,3,3,3,2,3,2,2,2,3,2,1,1,1,0,3,3,2,3,1,0,3,2,1,2,1,1,2,1,0,3,
  0,3,3,3,2,3,3,1,1,3,2,3,1,3,1,1,1,1,3,1,1,3,0,3,2,3,0,0,1,2,3,1,1,1,1,1,2,0,2,
  0,3,3,3,2,3,3,3,2,3,2,3,1,3,1,1,1,2,1,1,1,3,0,2,3,2,0,2,0,3,2,1,1,2,3,2,1,1,1,
  0,1,0,1,1,1,1,0,1,0,0,3,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,
  0,0,3,3,3,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  0,3,1,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,1,0,0,0,3,2,0,0,1,
  0,1,1,1,3,3,3,3,3,3,3,2,3,3,3,2,2,2,2,0,1,0,0,1,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,
  0,1,1,0,3,1,3,2,3,3,1,2,3,3,2,3,3,2,3,1,2,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,
  0,3,1,3,3,0,3,3,3,3,3,0,3,3,3,3,3,3,3,0,2,0,2,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,
  0,3,3,3,1,3,2,1,1,1,1,3,1,1,1,0,0,1,1,1,0,3,0,1,3,0,1,1,0,0,1,1,1,0,1,2,1,0,1,
  0,3,3,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,2,0,2,1,1,0,3,1,2,1,1,1,1,2,1,1,0,2,
  0,3,3,3,1,3,1,0,1,3,1,3,3,1,3,1,3,2,2,1,0,2,0,2,1,2,1,1,2,2,1,1,1,1,2,0,0,0,1,
  0,3,3,3,3,2,3,3,2,3,3,3,2,3,3,2,2,2,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,2,0,1,0,0,0,
  0,1,1,0,3,3,3,3,3,3,2,0,3,3,3,3,2,2,3,1,2,0,0,0,0,0,0,1,3,0,0,1,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,1,2,3,3,1,3,1,2,1,1,1,2,0,0,0,1,1,0,1,0,1,3,1,2,1,2,0,0,0,0,0,
  0,1,1,0,3,1,1,3,0,1,3,2,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,2,3,1,2,1,1,2,2,1,1,0,2,1,3,0,1,0,0,0,0,0,1,0,2,0,1,0,2,0,0,0,0,0,
  0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
  0,0,0,1,3,0,2,3,3,2,3,0,3,3,2,1,2,3,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,3,0,1,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,3,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,1,3,0,1,3,1,1,3,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_15PortugueseModel =
{
  Iso_8859_15_CharToOrderMap,
  PortugueseFCMLowerBound,
  PortugueseFCMUpperBound,
  PortugueseUnicodeCharToOrder,
  PortugueseCompactedLangModel,
  38,
  0.9990031235057139f,
  PR_TRUE,
  "ISO-8859-15",
  "pt"
};

const SequenceModel Iso_8859_1PortugueseModel =
{
  Iso_8859_1_CharToOrderMap,
  PortugueseFCMLowerBound,
  PortugueseFCMUpperBound,
  PortugueseUnicodeCharToOrder,
  PortugueseCompactedLangModel,
  38,
  0.9990031235057139f,
  PR_TRUE,
  "ISO-8859-1",
  "pt"
};

const SequenceModel Windows_1252PortugueseModel =
{
  Windows_1252_CharToOrderMap,
  PortugueseFCMLowerBound,
  PortugueseFCMUpperBound,
  PortugueseUnicodeCharToOrder,
  PortugueseCompactedLangModel,
  38,
  0.9990031235057139f,
  PR_TRUE,
  "WINDOWS-1252",
  "pt"
};

const SequenceModel Iso_8859_9PortugueseModel =
{
  Iso_8859_9_CharToOrderMap,
  PortugueseFCMLowerBound,
  PortugueseFCMUpperBound,
  PortugueseUnicodeCharToOrder,
  PortugueseCompactedLangModel,
  38,
  0.9990031235057139f,
  PR_TRUE,
  "ISO-8859-9",
  "pt"
};

const LanguageModel PortugueseModel =
{
  "pt",
  Unicode_CharOrder,
  Unicode_Char_size,
  PortugueseFCMLowerBound,
  PortugueseFCMUpperBound,
  PortugueseUnicodeCharToOrderIsReduced,

  PortugueseUnicodeCharToOrder,
  OrderToRatio,
  PortugueseCompactedLangModel,
  38,
  4,
  0.4101436661291445f,
  22,
  0.031161719305998235f,
  0.9998305645447763f,
};
