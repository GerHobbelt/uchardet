/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Latvian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 07:28:19.201135
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 56, 57, 58,SYM, 59, 28,SYM,SYM, 23, 21, 30, 60,SYM, 29,SYM, /* AX */
  SYM, 61,SYM, 62,SYM, 63, 28,SYM,SYM, 23, 21, 30, 64, 65, 29, 66, /* BX */
    9, 67, 54, 43, 38, 55, 36, 68, 31, 39, 69, 46, 70, 44, 71, 20, /* CX */
   72, 25, 73, 33, 74, 45, 42,SYM, 47, 75, 76, 77, 40, 78, 26, 53, /* DX */
    9, 79, 54, 43, 38, 55, 36, 80, 31, 39, 81, 46, 82, 44, 83, 20, /* EX */
   84, 25, 85, 33, 86, 45, 42,SYM, 47, 87, 88, 89, 40, 90, 26,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_10_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 91, 21, 30, 20, 92, 33,SYM, 28, 93, 23, 94, 29,SYM, 26, 95, /* AX */
  SYM, 96, 21, 30, 20, 97, 33,SYM, 28, 98, 23, 99, 29, 41, 26,100, /* BX */
    9,101, 54, 43, 38, 55, 36,102, 31, 39,103, 46,104, 44,105,106, /* CX */
   49, 25,107, 50,108, 45, 42,109, 47,110,111,112, 40,113,114, 53, /* DX */
    9,115, 54, 43, 38, 55, 36,116, 31, 39,117, 46,118, 44,119,120, /* EX */
   49, 25,121, 50,122, 45, 42,123, 47,124,125,126, 40,127,128,129, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 13,  3, 24, 17, 27,  1, 16, 11, 10, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 32, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 47,SYM,130,SYM,SYM,SYM,SYM, 36, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 47,SYM,131,SYM,SYM,SYM,SYM, 36, /* BX */
  132,133,  9, 52, 38, 55,134, 21, 31, 39,135,136, 30, 33, 20, 28, /* CX */
   23, 48, 25, 50,137, 45, 42,SYM,138, 51,139, 26, 40,140, 29, 53, /* DX */
  141,142,  9, 52, 38, 55,143, 21, 31, 39,144,145, 30, 33, 20, 28, /* EX */
   23, 48, 25, 50,146, 45, 42,SYM,147, 51,148, 26, 40,149, 29,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 76;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 18, 67, 22, 68, 13, 69,  3, 70, 24, 71, 17,72, 27,
  73,  1, 74, 16, 75, 11, 76, 10, 77, 12, 78,  7, 79,  8,80, 14,
  81, 37, 82,  5, 83,  2, 84,  4, 85,  6, 86, 15, 87, 34,88, 35,
  89, 32, 90, 19, 97,  0, 98, 18, 99, 22, 100, 13, 101,  3,102, 24,
  103, 17, 104, 27, 105,  1, 106, 16, 107, 11, 108, 10, 109, 12,110,  7,
  111,  8, 112, 14, 113, 37, 114,  5, 115,  2, 116,  4, 117,  6,118, 15,
  119, 34, 120, 35, 121, 32, 122, 19, 198, 36, 230, 36, 256,  9,257,  9,
  268, 31, 269, 31, 274, 21, 275, 21, 290, 30, 291, 30, 298, 20,299, 20,
  310, 33, 311, 33, 315, 28, 316, 28, 325, 25, 326, 25, 352, 23,353, 23,
  362, 26, 363, 26, 381, 29, 382, 29,
};


/* Model Table:
 * Total considered sequences: 1030 / 1444
 * - Positive sequences: first 642 (0.9950038811281146)
 * - Probable sequences: next 172 (814-642) (0.004006497888719651)
 * - Neutral sequences: last 630 (0.0009896209831657954)
 * - Negative sequences: 414 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 LatvianLangModel[] =
{
  3,3,3,3,3,3,3,3,2,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,3,3,3,0,3,3,3,3,3,1,3,0,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,2,3,0,3,3,1,0,2,0,3,1,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,0,0,1,3,0,3,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,3,2,0,0,1,
  3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,0,2,3,2,3,2,1,2,2,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,3,0,3,0,3,3,0,1,0,0,1,
  3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,0,3,3,2,3,3,3,2,3,2,0,1,
  2,2,3,1,3,3,1,3,1,0,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,0,1,3,3,0,2,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,0,2,0,0,3,0,1,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,1,2,1,0,2,2,3,3,1,2,2,3,3,0,0,1,2,0,1,0,1,0,
  3,3,3,3,3,2,3,3,3,3,2,2,3,3,3,3,3,2,3,2,3,3,2,3,2,1,3,1,0,0,1,1,3,0,0,2,0,0,
  3,3,3,3,2,3,3,3,3,3,3,2,3,3,1,3,2,3,3,3,3,3,1,0,2,2,3,2,0,3,0,0,2,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,1,3,3,2,1,2,0,1,0,0,0,3,0,
  3,3,3,3,1,2,3,3,3,3,3,2,1,3,2,2,3,2,0,1,3,3,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,
  3,3,3,3,2,2,3,3,3,3,0,2,2,2,1,2,0,0,1,1,2,3,0,1,1,0,3,0,0,0,0,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,0,2,2,2,1,3,1,3,2,1,3,3,3,2,0,0,3,0,0,0,0,0,
  3,3,3,3,2,3,3,3,3,3,3,2,3,1,2,3,2,1,3,1,3,3,3,2,1,0,3,2,1,0,0,0,2,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,2,1,0,1,0,0,3,0,0,0,0,0,
  1,0,3,0,3,3,0,3,0,0,3,3,3,3,3,3,3,3,3,3,0,0,3,3,0,3,0,0,2,2,0,2,0,2,0,0,0,0,
  0,1,3,0,3,3,0,3,0,0,3,3,3,3,2,3,3,3,2,3,0,0,3,3,0,2,0,0,3,1,3,0,0,2,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,3,2,2,3,2,1,2,2,0,3,3,3,0,0,0,1,3,0,0,1,0,3,0,1,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,1,3,2,2,3,2,2,1,1,3,3,1,1,0,3,3,0,2,1,1,2,0,3,0,0,0,0,
  3,3,3,3,3,3,3,0,3,2,3,3,1,1,0,0,0,2,1,1,2,3,3,1,3,0,1,0,0,0,0,0,1,0,0,0,0,1,
  3,3,1,3,0,1,3,3,3,3,2,2,1,3,1,1,0,0,2,0,0,3,0,3,0,0,1,0,0,0,1,0,0,2,0,0,0,0,
  0,0,3,0,3,3,0,3,0,0,3,3,1,3,3,3,2,2,1,3,0,0,2,3,1,2,0,0,0,2,0,0,0,1,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,1,2,1,1,1,1,0,0,1,1,3,1,0,1,0,1,0,0,0,0,0,2,0,1,0,0,0,
  3,3,1,2,1,2,3,1,3,3,2,2,2,2,1,2,1,1,0,0,0,3,1,2,2,3,3,1,2,0,3,0,0,2,0,0,0,0,
  3,3,3,3,0,2,3,1,3,3,0,2,2,1,0,1,0,0,0,0,3,2,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,0,
  3,3,0,3,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,0,0,3,0,2,3,1,1,0,0,2,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  3,0,3,3,2,2,0,2,3,0,2,3,3,1,1,0,0,0,3,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,
  3,3,0,3,0,0,3,0,1,2,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,0,2,0,2,3,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,1,0,0,0,
  2,2,0,1,3,0,0,0,0,0,2,0,1,1,2,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,0,0,0,0,3,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_4LatvianModel =
{
  Iso_8859_4_CharToOrderMap,
  LatvianLangModel,
  38,
  (float)0.9990103790168342,
  PR_TRUE,
  "ISO-8859-4",
  "lv"
};

const SequenceModel Iso_8859_10LatvianModel =
{
  Iso_8859_10_CharToOrderMap,
  LatvianLangModel,
  38,
  (float)0.9990103790168342,
  PR_TRUE,
  "ISO-8859-10",
  "lv"
};

const SequenceModel Iso_8859_13LatvianModel =
{
  Iso_8859_13_CharToOrderMap,
  LatvianLangModel,
  38,
  (float)0.9990103790168342,
  PR_TRUE,
  "ISO-8859-13",
  "lv"
};

const LanguageModel LatvianModel =
{
  "lv",
  Unicode_CharOrder,
  76,
  LatvianLangModel,
  38,
  5,
  (float)0.4128075569699457,
  23,
  (float)0.031646605800046204,
  (float)0.9997847017109491,
};
