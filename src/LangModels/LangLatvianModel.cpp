/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Latvian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:11:03.758761
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 4X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 6X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 67, 68, 51,SYM, 69, 27,SYM,SYM, 23, 21, 30, 70,SYM, 29,SYM, /* AX */
  SYM, 71,SYM, 51,SYM, 72, 27,SYM,SYM, 23, 21, 30, 73, 63, 29, 63, /* BX */
    8, 41, 60, 65, 38, 47, 36, 74, 33, 37, 75, 57, 43, 48, 61, 18, /* CX */
   76, 24, 42, 31, 64, 45, 44,SYM, 59, 62, 54, 66, 39, 77, 26, 49, /* DX */
    8, 41, 60, 65, 38, 47, 36, 78, 33, 37, 79, 57, 43, 48, 61, 18, /* EX */
   80, 24, 42, 31, 64, 45, 44,SYM, 59, 62, 54, 66, 39, 81, 26,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_10_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 4X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 6X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 82, 21, 30, 18, 83, 31,SYM, 27, 84, 23, 85, 29,SYM, 26, 63, /* AX */
  SYM, 86, 21, 30, 18, 87, 31,SYM, 27, 88, 23, 89, 29, 90, 26, 63, /* BX */
    8, 41, 60, 65, 38, 47, 36, 91, 33, 37, 92, 57, 43, 48, 61, 93, /* CX */
   94, 24, 42, 46, 64, 45, 44, 95, 59, 62, 54, 66, 39, 53, 96, 49, /* DX */
    8, 41, 60, 65, 38, 47, 36, 97, 33, 37, 98, 57, 43, 48, 61, 99, /* EX */
  100, 24, 42, 46, 64, 45, 44,101, 59, 62, 54, 66, 39, 53,102,103, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 4X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17, 22, 12,  3, 25, 19, 28,  1, 16, 11,  9, 13,  7, 10, /* 6X */
   15, 40,  5,  2,  4,  6, 14, 32, 35, 34, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 59,SYM, 51,SYM,SYM,SYM,SYM, 36, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 59,SYM, 51,SYM,SYM,SYM,SYM, 36, /* BX */
  104,105,  8, 52, 38, 47,106, 21, 33, 37, 58, 43, 30, 31, 18, 27, /* CX */
   23, 56, 24, 46, 42, 45, 44,SYM, 62, 50, 55, 26, 39,107, 29, 49, /* DX */
  108,109,  8, 52, 38, 47,110, 21, 33, 37, 58, 43, 30, 31, 18, 27, /* EX */
   23, 56, 24, 46, 42, 45, 44,SYM, 62, 50, 55, 26, 39,111, 29,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 82;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 17,  67, 22,  68, 12,  69,  3,  70, 25,  71, 19, 72, 28,
   73,  1,  74, 16,  75, 11,  76,  9,  77, 13,  78,  7,  79, 10, 80, 15,
   81, 40,  82,  5,  83,  2,  84,  4,  85,  6,  86, 14,  87, 32, 88, 35,
   89, 34,  90, 20,  97,  0,  98, 17,  99, 22, 100, 12, 101,  3,102, 25,
  103, 19, 104, 28, 105,  1, 106, 16, 107, 11, 108,  9, 109, 13,110,  7,
  111, 10, 112, 15, 113, 40, 114,  5, 115,  2, 116,  4, 117,  6,118, 14,
  119, 32, 120, 35, 121, 34, 122, 20, 196, 38, 198, 36, 201, 37,220, 39,
  228, 38, 230, 36, 233, 37, 252, 39, 256,  8, 257,  8, 268, 33,269, 33,
  274, 21, 275, 21, 290, 30, 291, 30, 298, 18, 299, 18, 310, 31,311, 31,
  315, 27, 316, 27, 325, 24, 326, 24, 352, 23, 353, 23, 362, 26,363, 26,
  381, 29, 382, 29,
};


/* Model Table:
 * Total considered sequences: 1210 / 1681
 * - Positive sequences: first 612 (0.9950080943923969)
 * - Probable sequences: next 215 (827-612) (0.003994106293262911)
 * - Neutral sequences: last 854 (0.0009977993143401864)
 * - Negative sequences: 471 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 LatvianLangModel[] =
{
  3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,2,3,
   3,2,3,3,3,3,0,3,3,3,3,2,2,3,3,2,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,
   3,2,3,3,3,3,1,3,3,3,3,3,2,3,0,2,0,1,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,
   3,3,3,1,0,2,3,2,3,1,0,1,2,0,2,0,0,1,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,
   3,1,3,3,3,3,0,3,3,3,3,3,3,3,3,2,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   3,3,3,3,3,2,3,3,3,0,1,2,3,1,2,2,0,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,
   3,3,3,3,3,3,3,3,3,2,3,3,2,1,3,1,0,2,1,2,0,
  3,3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,2,3,
   3,2,3,3,3,2,0,3,2,2,2,2,1,3,1,2,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,
   3,3,3,3,0,3,2,0,3,2,0,0,1,3,2,0,0,1,0,0,1,
  2,2,3,1,3,3,1,3,0,3,0,3,3,3,3,3,3,3,0,3,
   3,0,3,3,3,3,0,3,1,3,1,1,0,2,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   3,3,3,3,0,3,3,0,3,2,1,1,1,2,2,1,0,2,1,1,0,
  3,2,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,1,3,
   3,2,3,3,3,3,0,3,3,2,3,2,3,3,2,2,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,1,2,2,
   2,2,3,3,3,1,3,3,3,0,0,0,1,0,2,0,0,0,1,1,0,
  3,3,3,3,2,3,3,3,3,2,3,2,2,3,3,2,2,2,3,2,
   3,3,1,1,2,2,3,0,2,3,0,0,2,0,2,0,0,1,1,0,0,
  3,3,3,3,3,2,3,3,3,2,3,3,3,3,2,3,3,3,3,3,
   2,3,2,3,0,1,3,0,1,1,2,0,0,0,2,1,0,1,1,1,0,
  3,3,3,3,1,2,3,3,3,3,3,3,3,1,2,3,3,2,3,2,
   2,3,1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   3,3,3,3,2,2,2,2,3,1,1,0,0,1,2,0,3,1,2,0,0,
  3,3,3,3,1,1,3,3,3,1,3,1,2,1,2,0,1,1,2,0,
   0,3,1,1,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  3,3,3,3,2,3,3,3,3,3,3,3,2,1,3,2,3,2,3,1,
   1,3,1,1,0,1,3,3,2,1,0,0,0,0,1,0,0,1,0,1,0,
  0,1,3,1,3,3,0,3,0,3,0,3,3,3,3,3,3,3,1,3,
   3,0,3,3,3,1,0,3,0,2,1,2,0,2,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,2,0,1,2,2,
   2,2,0,3,1,2,3,3,2,2,0,0,1,0,2,0,0,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,
   2,3,3,2,3,1,2,0,1,0,0,1,2,0,2,0,0,0,0,0,0,
  0,0,3,1,3,3,1,3,0,3,0,3,3,3,3,2,3,2,0,3,
   3,1,3,3,2,1,0,3,0,2,3,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,1,3,3,3,3,2,2,2,2,1,3,3,2,
   2,3,2,0,0,0,1,0,3,0,1,0,0,1,3,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,2,0,3,2,
   2,3,0,1,2,0,1,2,0,0,0,3,1,2,0,0,0,0,0,0,0,
  3,3,2,3,1,1,3,2,3,2,3,1,1,1,2,2,0,2,0,1,
   1,3,1,3,1,0,2,0,0,0,2,3,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,1,1,3,3,1,0,2,0,1,2,0,2,2,
   1,3,1,0,0,3,2,0,0,0,0,0,0,0,0,0,0,1,0,1,0,
  0,0,3,0,3,3,0,3,0,3,1,3,3,2,3,3,2,1,0,3,
   3,0,3,3,0,1,1,0,1,2,0,2,0,0,0,0,0,0,0,0,0,
  3,3,2,3,2,2,3,1,3,2,3,1,1,2,2,1,2,1,1,0,
   1,2,0,3,3,0,3,1,0,0,3,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,1,0,2,0,0,0,1,3,0,
   0,2,1,0,0,0,2,1,1,0,0,0,2,0,1,0,0,1,0,0,0,
  3,3,3,3,0,2,3,3,3,2,3,2,1,2,2,1,1,1,3,0,
   0,2,1,1,3,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,
  2,3,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,
   0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,1,0,3,0,2,0,2,0,0,0,1,0,0,0,3,0,
   0,3,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  3,3,3,3,1,1,1,1,0,2,3,1,0,1,0,0,1,0,0,0,
   0,1,1,0,0,0,0,0,2,0,0,0,2,0,2,0,0,0,0,0,0,
  3,3,3,3,1,0,3,1,2,0,2,2,0,0,1,2,0,0,1,0,
   0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,3,2,2,2,2,2,0,2,2,2,2,2,1,1,0,3,0,0,
   0,0,3,0,0,1,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,
  2,2,1,1,2,0,1,0,0,1,1,1,1,1,1,2,0,0,0,0,
   0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,
  0,1,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
  0,0,0,0,1,1,1,2,0,1,0,0,2,1,0,1,0,0,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,1,0,1,1,0,2,0,1,0,1,1,1,0,0,0,1,0,1,
   0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,
  1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
};


const SequenceModel Iso_8859_4LatvianModel =
{
  Iso_8859_4_CharToOrderMap,
  LatvianLangModel,
  41,
  (float)0.9990022006856598,
  PR_TRUE,
  "ISO-8859-4",
  "lv"
};

const SequenceModel Iso_8859_10LatvianModel =
{
  Iso_8859_10_CharToOrderMap,
  LatvianLangModel,
  41,
  (float)0.9990022006856598,
  PR_TRUE,
  "ISO-8859-10",
  "lv"
};

const SequenceModel Iso_8859_13LatvianModel =
{
  Iso_8859_13_CharToOrderMap,
  LatvianLangModel,
  41,
  (float)0.9990022006856598,
  PR_TRUE,
  "ISO-8859-13",
  "lv"
};

const LanguageModel LatvianModel =
{
  "lv",
  Unicode_CharOrder,
  82,
  LatvianLangModel,
  41,
  4,
  (float)0.3598243274225239,
  22,
  (float)0.0337872650940117,
};
