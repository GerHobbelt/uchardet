/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Latvian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 21:06:40.996915
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 61, 75, 47,SYM, 76, 26,SYM,SYM, 23, 21, 30, 77,SYM, 29,SYM, /* AX */
  SYM, 61,SYM, 47,SYM, 78, 26,SYM,SYM, 23, 21, 30, 79, 69, 29, 69, /* BX */
    9, 42, 54, 68, 38, 52, 36, 72, 32, 39, 62, 56, 43, 49, 67, 18, /* CX */
   70, 25, 48, 31, 64, 59, 41,SYM, 51, 55, 53, 80, 40, 81, 28, 44, /* DX */
    9, 42, 54, 68, 38, 52, 36, 72, 32, 39, 62, 56, 43, 49, 67, 18, /* EX */
   70, 25, 48, 31, 64, 59, 41,SYM, 51, 55, 53, 82, 40, 83, 28,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_10_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 61, 21, 30, 18, 84, 31,SYM, 26, 70, 23, 85, 29,SYM, 28, 69, /* AX */
  SYM, 61, 21, 30, 18, 86, 31,SYM, 26, 70, 23, 87, 29, 58, 28, 69, /* BX */
    9, 42, 54, 68, 38, 52, 36, 72, 32, 39, 62, 56, 43, 49, 67, 60, /* CX */
   65, 25, 48, 45, 64, 59, 41, 88, 51, 55, 53, 89, 40, 74, 73, 44, /* DX */
    9, 42, 54, 68, 38, 52, 36, 72, 32, 39, 62, 56, 43, 49, 67, 60, /* EX */
   65, 25, 48, 45, 64, 59, 41, 90, 51, 55, 53, 91, 40, 74, 73, 92, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 4X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 22, 13,  3, 24, 17, 27,  1, 16, 10, 11, 12,  7,  8, /* 6X */
   14, 37,  5,  2,  4,  6, 15, 34, 35, 33, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 51,SYM, 47,SYM,SYM,SYM,SYM, 36, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 51,SYM, 47,SYM,SYM,SYM,SYM, 36, /* BX */
   61, 72,  9, 63, 38, 52, 62, 21, 32, 39, 71, 43, 30, 31, 18, 26, /* CX */
   23, 57, 25, 45, 48, 59, 41,SYM, 55, 46, 50, 28, 40, 66, 29, 44, /* DX */
   61, 72,  9, 63, 38, 52, 62, 21, 32, 39, 71, 43, 30, 31, 18, 26, /* EX */
   23, 57, 25, 45, 48, 59, 41,SYM, 55, 46, 50, 28, 40, 66, 29,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 76;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 20, 67, 22, 68, 13, 69,  3, 70, 24, 71, 17, 72, 27,
  73,  1, 74, 16, 75, 10, 76, 11, 77, 12, 78,  7, 79,  8, 80, 14,
  81, 37, 82,  5, 83,  2, 84,  4, 85,  6, 86, 15, 87, 34, 88, 35,
  89, 33, 90, 19, 97,  0, 98, 20, 99, 22, 100, 13, 101,  3, 102, 24,
  103, 17, 104, 27, 105,  1, 106, 16, 107, 10, 108, 11, 109, 12, 110,  7,
  111,  8, 112, 14, 113, 37, 114,  5, 115,  2, 116,  4, 117,  6, 118, 15,
  119, 34, 120, 35, 121, 33, 122, 19, 198, 36, 230, 36, 256,  9, 257,  9,
  268, 32, 269, 32, 274, 21, 275, 21, 290, 30, 291, 30, 298, 18, 299, 18,
  310, 31, 311, 31, 315, 26, 316, 26, 325, 25, 326, 25, 352, 23, 353, 23,
  362, 28, 363, 28, 381, 29, 382, 29,
};


/* Model Table:
 * Number of web pages processed for this model: 2179
 * Number of characters consumed for this model: 4097764
 * Total considered sequences: 1585 / 1444
 *
 * - Positive sequences: first 665 (0.9950272521174781)
 * - Probable sequences: next 214 (879-665) (0.003978893106909243)
 * - Neutral sequences: last 565 (0.000993854775612646)
 * - Negative sequences: -141 (off-ratio, TODO)
 */


#define LatvianFCMLowerBound  97
#define LatvianFCMUpperBound  382


static const PRUint8 LatvianFrequentCharMapping[] =
{
  1,21,23,14,4,25,18,28,2,17,11,12,13,8,9,15,38,6,3,5,
  7,16,35,36,34,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  10,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,22,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,
  0,0,19,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,27,
  0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,
  0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,30,
};

static const PRUint8 LatvianCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,3,1,3,3,3,3,3,2,2,0,2,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,2,3,3,3,3,3,3,1,3,3,3,3,1,1,3,1,2,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,1,1,3,3,1,1,1,1,2,2,1,0,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,3,3,3,0,3,3,3,3,3,3,3,0,2,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,3,2,1,0,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,2,1,0,1,
  
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,2,3,3,3,0,2,3,1,3,1,1,2,0,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,1,1,3,3,1,1,0,1,
  
  0,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,3,3,3,0,3,3,2,2,3,3,2,0,1,
  
  0,2,2,3,1,3,3,1,3,0,0,3,3,3,3,3,3,3,3,1,3,3,0,3,3,3,3,3,1,0,3,2,1,2,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,2,1,2,2,3,3,2,3,3,3,3,1,0,1,1,2,1,0,0,0,
  
  0,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,3,3,2,1,1,2,3,1,0,0,1,
  
  0,3,3,3,3,3,2,3,3,3,3,2,2,3,3,3,3,3,3,3,2,3,3,2,3,2,1,1,2,3,1,1,1,1,3,1,2,0,1,
  
  0,3,3,3,3,2,3,3,3,3,3,3,3,3,2,2,3,2,2,3,3,3,3,2,1,2,2,0,2,3,3,0,1,1,2,2,1,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,1,2,1,1,2,1,1,3,0,
  
  0,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,2,3,2,3,2,2,3,2,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,
  
  0,3,3,3,3,2,3,3,3,3,3,2,2,2,2,2,2,1,1,2,1,2,3,3,2,1,0,0,1,3,0,0,0,1,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,1,3,3,2,2,3,1,2,2,3,2,3,1,3,2,1,3,3,3,2,0,0,1,2,1,0,0,1,
  
  0,1,0,3,1,3,3,1,3,1,0,3,3,3,3,3,3,3,3,0,3,3,0,3,3,1,3,3,1,0,2,2,2,2,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,0,2,2,1,1,1,1,3,1,1,0,0,
  
  0,3,3,3,3,2,3,3,3,3,3,3,3,2,2,3,2,3,1,3,1,2,3,2,2,1,1,2,2,3,1,0,0,1,2,1,1,0,1,
  
  0,1,1,3,1,3,3,1,3,0,0,3,3,3,3,3,3,3,3,0,3,2,0,3,3,1,2,3,0,0,2,3,2,1,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,2,3,3,3,3,3,2,2,2,1,2,3,2,2,3,2,1,1,0,0,3,2,0,1,0,0,3,1,1,0,1,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,1,3,1,1,1,3,2,1,3,1,1,3,2,0,1,0,0,0,
  
  0,3,3,3,3,3,3,3,2,3,3,2,3,2,1,1,1,2,2,2,1,2,3,2,1,3,0,0,1,2,0,0,0,1,1,1,0,1,0,
  
  0,3,3,2,3,1,2,3,2,3,3,2,1,1,2,2,2,1,1,0,0,3,3,1,3,0,1,0,1,2,1,2,3,1,0,0,0,0,0,
  
  0,3,3,2,3,2,2,3,2,3,3,2,2,2,2,2,3,2,1,1,1,1,3,1,3,2,3,2,1,3,1,3,2,1,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,2,3,2,2,1,2,2,1,2,2,1,2,2,1,2,0,0,1,1,0,0,0,1,3,2,1,1,0,
  
  0,1,1,3,1,3,3,0,3,1,0,3,3,3,3,3,3,2,3,0,3,1,0,3,3,1,2,1,1,0,3,0,1,1,0,0,0,0,0,
  
  0,3,3,3,3,1,2,3,2,3,3,3,1,2,1,2,2,1,1,3,1,1,2,1,1,1,3,0,1,2,0,2,0,1,0,0,0,0,0,
  
  0,2,3,1,3,0,0,3,1,1,1,0,1,1,0,0,1,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,1,3,1,0,3,0,2,2,1,1,0,0,1,1,0,0,3,0,0,3,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,1,1,3,1,2,3,2,0,1,0,2,1,1,0,2,0,0,1,0,0,1,1,0,1,2,0,0,0,0,0,0,0,0,0,
  
  0,3,2,3,2,2,2,2,2,3,1,3,2,3,2,2,1,1,2,0,1,3,0,3,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,
  
  0,3,3,2,3,2,2,1,2,3,0,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,2,0,0,0,0,0,2,3,0,0,0,
  
  0,2,2,1,1,2,1,1,1,2,0,1,1,1,1,2,2,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,1,2,0,0,
  
  0,0,1,1,0,0,1,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  
  0,1,1,1,0,1,1,3,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,
  
};


const SequenceModel Iso_8859_4LatvianModel =
{
  Iso_8859_4_CharToOrderMap,
  LatvianFCMLowerBound,
  LatvianFCMUpperBound,
  LatvianFrequentCharMapping,
  LatvianCompactedLangModel,
  38,
  (float)0.9990061452243874,
  PR_TRUE,
  "ISO-8859-4",
  "lv"
};

const SequenceModel Iso_8859_10LatvianModel =
{
  Iso_8859_10_CharToOrderMap,
  LatvianFCMLowerBound,
  LatvianFCMUpperBound,
  LatvianFrequentCharMapping,
  LatvianCompactedLangModel,
  38,
  (float)0.9990061452243874,
  PR_TRUE,
  "ISO-8859-10",
  "lv"
};

const SequenceModel Iso_8859_13LatvianModel =
{
  Iso_8859_13_CharToOrderMap,
  LatvianFCMLowerBound,
  LatvianFCMUpperBound,
  LatvianFrequentCharMapping,
  LatvianCompactedLangModel,
  38,
  (float)0.9990061452243874,
  PR_TRUE,
  "ISO-8859-13",
  "lv"
};

const LanguageModel LatvianModel =
{
  "lv",
  Unicode_CharOrder,
  76,
  LatvianFCMLowerBound,
  LatvianFCMUpperBound,
  LatvianFrequentCharMapping,
  LatvianCompactedLangModel,
  38,
  5,
  (float)0.417296115637699,
  22,
  (float)0.03706118751592331,
  (float)0.9997322930261479,
};
