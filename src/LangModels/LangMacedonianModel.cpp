/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Macedonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 22:42:55.533703
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
   68, 43,SYM, 43,SYM,SYM,SYM,SYM,SYM,SYM, 55,SYM, 32, 38, 66, 49, /* 8X */
   68,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 55,SYM, 32, 38, 66, 49, /* 9X */
  SYM, 69, 69, 15,SYM, 72,SYM,SYM, 71,SYM, 70,SYM,SYM,SYM,SYM, 63, /* AX */
  SYM,SYM, 57, 57, 73,SYM,SYM,SYM, 71,SYM, 70,SYM, 15, 54, 54, 63, /* BX */
    0, 18,  8, 16, 10,  3, 25, 17,  2, 60,  9, 11, 13,  4,  1, 12, /* CX */
    6,  7,  5, 14, 26, 33, 20, 19, 21, 65, 61, 62, 59, 67, 64, 58, /* DX */
    0, 18,  8, 16, 10,  3, 25, 17,  2, 60,  9, 11, 13,  4,  1, 12, /* EX */
    6,  7,  5, 14, 26, 33, 20, 19, 21, 65, 61, 62, 59, 67, 64, 58, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm855_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
   68, 68, 43, 43, 71, 71, 70, 70, 54, 54, 57, 57, 63, 63, 15, 15, /* 8X */
   55, 55, 32, 32, 66, 66, 38, 38, 69, 69, 49, 49, 64, 64, 61, 61, /* 9X */
    0,  0, 18, 18, 20, 20, 10, 10,  3,  3, 26, 26, 16, 16,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 33, 33,  2,  2,SYM,SYM,SYM,SYM, 60, 60,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,  9,  9,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   11, 11, 13, 13,  4,  4,  1,  1, 12,SYM,SYM,SYM,SYM, 12, 58,SYM, /* DX */
   58,  6,  6,  7,  7,  5,  5, 14, 14, 25, 25,  8,  8, 59, 59,SYM, /* EX */
  SYM, 62, 62, 17, 17, 21, 21, 67, 67, 65, 65, 19, 19,SYM,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42, 56, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 71, 68, 43, 70, 54, 57, 63, 15, 55, 32, 66, 38,SYM, 69, 49, /* AX */
    0, 18,  8, 16, 10,  3, 25, 17,  2, 60,  9, 11, 13,  4,  1, 12, /* BX */
    6,  7,  5, 14, 26, 33, 20, 19, 21, 65, 61, 62, 59, 67, 64, 58, /* CX */
    0, 18,  8, 16, 10,  3, 25, 17,  2, 60,  9, 11, 13,  4,  1, 12, /* DX */
    6,  7,  5, 14, 26, 33, 20, 19, 21, 65, 61, 62, 59, 67, 64, 58, /* EX */
  SYM, 71, 68, 43, 70, 54, 57, 63, 15, 55, 32, 66, 38,SYM, 69, 49, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    112

static const unsigned int Unicode_CharOrder[] =
{
  65, 23, 66, 44, 67, 35, 68, 37, 69, 22, 70, 46, 71, 41, 72, 36,
  73, 24, 74, 52, 75, 48, 76, 34, 77, 39, 78, 27, 79, 28, 80, 42,
  82, 30, 83, 31, 84, 29, 85, 40, 86, 47, 87, 50, 88, 51, 89, 45,
  90, 53, 97, 23, 98, 44, 99, 35, 100, 37, 101, 22, 102, 46, 103, 41,
  104, 36, 105, 24, 106, 52, 107, 48, 108, 34, 109, 39, 110, 27, 111, 28,
  112, 42, 114, 30, 115, 31, 116, 29, 117, 40, 118, 47, 119, 50, 120, 51,
  121, 45, 122, 53, 1027, 43, 1029, 54, 1032, 15, 1033, 55, 1034, 32, 1036, 38,
  1039, 49, 1040,  0, 1041, 18, 1042,  8, 1043, 16, 1044, 10, 1045,  3, 1046, 25,
  1047, 17, 1048,  2, 1050,  9, 1051, 11, 1052, 13, 1053,  4, 1054,  1, 1055, 12,
  1056,  6, 1057,  7, 1058,  5, 1059, 14, 1060, 26, 1061, 33, 1062, 20, 1063, 19,
  1064, 21, 1072,  0, 1073, 18, 1074,  8, 1075, 16, 1076, 10, 1077,  3, 1078, 25,
  1079, 17, 1080,  2, 1082,  9, 1083, 11, 1084, 13, 1085,  4, 1086,  1, 1087, 12,
  1088,  6, 1089,  7, 1090,  5, 1091, 14, 1092, 26, 1093, 33, 1094, 20, 1095, 19,
  1096, 21, 1107, 43, 1109, 54, 1112, 15, 1113, 55, 1114, 32, 1116, 38, 1119, 49,
};

static const float OrderToRatio[] =
{
  0.124234700,  0.124234700,  0.101214979,  0.101214979,  0.093455713,  0.093455713,  0.077805447,  0.077805447, 
  0.069522921,  0.069522921,  0.065764369,  0.065764369,  0.049709845,  0.049709845,  0.046573719,  0.046573719, 
  0.040403083,  0.040403083,  0.039170719,  0.039170719,  0.034776030,  0.034776030,  0.033585291,  0.033585291, 
  0.025900216,  0.025900216,  0.021783439,  0.021783439,  0.019998678,  0.019998678,  0.017182825,  0.017182825, 
  0.017060886,  0.017060886,  0.016598596,  0.016598596,  0.013456349,  0.013456349,  0.008057257,  0.008057257, 
  0.007453196,  0.007453196,  0.006682631,  0.006682631,  0.005167947,  0.005167947,  0.004698067,  0.004698067, 
  0.004354288,  0.004354288,  0.004337883,  0.004337883,  0.004025690,  0.004025690,  0.003770550,  0.003770550, 
  0.003582500,  0.003582500,  0.003428485,  0.003428485,  0.003339847,  0.003339847,  0.003266879,  0.003266879, 
  0.003043080,  0.003043080,  0.002580301,  0.002580301,  0.002482848,  0.002482848,  0.002359685,  0.002359685, 
  0.001788434,  0.001788434,  0.001742401,  0.001742401,  0.001715711,  0.001715711,  0.001713263,  0.001713263, 
  0.001539170,  0.001539170,  0.001295292,  0.001295292,  0.001231385,  0.001231385,  0.001155479,  0.001155479, 
  0.001040396,  0.001040396,  0.000854060,  0.000854060,  0.000829575,  0.000829575,  0.000764443,  0.000764443, 
  0.000754649,  0.000754649,  0.000661603,  0.000661603,  0.000592064,  0.000592064,  0.000377814,  0.000377814, 
  0.000295787,  0.000295787,  0.000227717,  0.000227717,  0.000175317,  0.000175317,  0.000163809,  0.000163809, 
};


/* Model Table:
 * Number of web pages processed for this model: 1146
 * Number of characters consumed for this model: 4084020
 * Total considered sequences: 1876 / 3136
 *
 * - Positive sequences: first 722 (0.9950279423159681)
 * - Probable sequences: next 286 (1008-722) (0.003973924906563897)
 * - Neutral sequences: last 2128 (0.0009981327774679638)
 * - Negative sequences: 1260 (off-ratio, TODO)
 */


#define MacedonianUnicodeAlphabetWidth         56
#define MacedonianUnicodeCharToOrderIsReduced  0


#define MacedonianFCMLowerBound  97
#define MacedonianFCMUpperBound  1119


static const PRUint8 MacedonianUnicodeCharToOrder[] =
{
  24,45,36,38,23,47,42,37,25,53,49,35,40,28,29,43,0,31,32,30,
  41,48,51,52,46,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,19,9,17,11,
  4,26,18,3,0,10,12,14,5,2,13,7,8,6,15,27,34,21,20,22,
  0,0,0,0,0,0,0,0,0,0,44,0,55,0,0,16,56,33,0,39,
  0,0,50,
};

static const PRUint8 MacedonianCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,1,3,3,1,0,1,1,1,3,3,1,1,1,0,3,0,0,0,1,3,0,0,0,0,1,3,1,0,1,0,1,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,0,1,1,0,0,3,3,0,1,0,0,3,0,0,0,0,3,1,0,0,0,0,2,1,1,1,0,3,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,3,3,1,1,0,0,1,3,3,1,1,0,0,3,0,0,0,0,1,0,0,0,0,0,3,0,0,1,0,1,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,3,3,0,0,1,1,0,3,3,0,0,0,0,3,1,0,0,0,3,0,0,0,1,0,2,0,1,1,0,1,2,
  0,3,3,3,3,2,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,1,1,1,2,3,0,1,0,0,0,1,3,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,3,0,0,1,0,1,0,
  0,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,1,2,2,2,1,1,2,1,1,3,1,1,0,0,0,1,3,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,
  0,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,3,3,0,1,0,0,1,1,3,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,3,0,1,0,0,1,1,
  0,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,1,3,2,3,1,0,0,1,0,3,0,0,0,0,0,1,3,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,2,2,3,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,
  0,3,3,3,3,3,3,3,3,3,2,2,3,2,3,3,2,2,1,2,1,3,2,0,1,1,1,2,0,1,1,0,1,1,2,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,
  0,3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,2,3,3,3,0,2,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,
  0,3,3,3,3,3,3,1,3,3,3,3,2,2,3,3,3,3,2,3,3,3,2,1,0,0,3,3,0,1,0,0,0,1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,1,0,
  0,3,3,3,3,3,3,3,3,1,3,2,3,1,2,3,3,1,1,1,3,3,3,0,1,1,1,3,0,1,1,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,2,3,3,3,3,2,3,3,2,3,3,2,2,3,2,2,2,1,1,0,1,3,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,0,0,0,3,2,0,0,0,0,0,2,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,0,2,0,1,0,0,1,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,1,1,1,2,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,
  0,3,3,3,3,3,2,3,3,3,2,2,3,2,3,3,1,1,2,2,1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,2,
  0,3,3,3,3,3,2,3,1,3,1,3,3,1,3,3,3,3,1,3,1,1,0,0,0,0,2,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,
  0,3,3,3,3,3,1,3,2,3,1,3,3,1,1,3,3,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,
  0,3,3,3,3,3,1,1,1,2,3,0,3,1,2,3,3,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,1,3,1,3,3,1,1,1,1,3,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  0,3,3,3,3,3,3,1,1,3,3,1,3,3,2,3,2,1,0,1,2,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
  0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,3,3,3,0,0,3,3,3,3,3,1,1,3,3,2,3,0,3,3,3,3,0,3,3,3,3,3,0,3,3,2,2,0,0,
  0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,3,2,3,0,0,3,2,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,3,3,3,3,0,3,2,2,3,1,0,
  0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,0,0,3,3,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,2,3,3,3,0,1,3,2,3,0,0,
  0,3,3,3,3,3,1,2,1,1,1,2,2,0,2,3,3,1,0,3,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,2,3,3,3,1,2,1,3,1,2,3,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,2,3,0,0,2,3,2,3,0,2,3,3,2,0,2,3,2,2,3,1,2,1,2,2,0,0,
  0,0,0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,2,3,3,0,0,3,3,3,3,3,0,0,3,3,3,3,0,3,3,3,3,0,3,2,3,3,3,0,3,3,2,2,0,0,
  0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,3,3,0,0,2,3,3,3,3,0,1,3,2,3,1,0,2,3,2,2,0,2,3,2,2,1,0,2,1,1,2,0,0,
  0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,3,2,3,3,0,2,1,1,2,0,0,
  0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,3,3,3,0,0,2,3,3,2,3,0,0,3,3,3,2,0,3,3,2,3,0,3,2,2,2,3,0,2,1,1,2,0,0,
  0,3,2,2,3,0,1,0,2,0,0,0,0,0,0,3,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  0,3,3,3,3,3,2,3,2,1,0,1,2,1,2,3,2,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,3,3,1,3,0,0,3,2,1,3,0,2,3,2,2,0,2,3,2,2,2,0,1,1,1,1,0,0,
  0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,3,3,3,0,0,2,3,3,3,3,0,0,3,3,3,2,0,2,3,2,2,0,2,3,1,1,3,0,1,1,0,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,3,2,0,0,2,2,1,2,0,2,3,1,1,0,2,3,2,1,1,0,1,1,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,3,3,3,0,0,2,3,2,3,3,0,0,2,2,2,2,0,2,3,3,1,0,2,2,2,2,1,0,2,2,1,2,0,0,
  0,3,2,3,3,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,3,3,3,0,0,2,3,2,2,3,0,0,2,2,2,2,0,3,3,2,3,0,3,3,1,1,2,0,1,1,2,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,2,3,3,3,0,0,3,3,1,3,0,3,2,3,3,0,3,2,2,2,2,0,1,2,2,2,0,0,
  0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,3,3,3,0,0,2,3,2,3,3,0,0,3,3,3,1,0,2,3,2,1,0,1,3,1,1,1,0,1,1,1,1,0,0,
  0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,3,3,3,0,0,2,3,3,3,2,0,0,3,1,3,2,0,2,3,2,3,0,2,2,1,0,1,0,1,1,1,0,0,0,
  0,3,3,3,3,0,1,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,1,3,2,0,0,3,2,2,2,0,2,3,2,2,0,2,3,1,1,1,0,1,1,2,1,0,0,
  0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,3,3,2,0,0,2,3,2,2,3,0,0,2,2,1,2,0,2,2,2,2,0,1,1,1,1,1,0,1,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,1,3,3,3,1,0,0,3,2,1,1,0,1,3,1,1,0,1,1,3,0,1,0,1,1,1,0,0,0,
  0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,3,3,0,0,2,3,1,1,1,0,0,1,1,1,1,0,1,2,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,
  0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,3,3,3,0,0,2,3,2,2,3,0,0,2,1,2,1,0,2,2,0,2,0,2,2,1,1,2,1,2,1,1,1,0,0,
  0,3,3,3,3,0,0,2,1,1,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,3,0,0,2,3,1,2,2,0,0,2,1,3,1,0,1,1,1,1,0,1,2,1,1,1,0,2,1,1,1,0,1,
  0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,1,1,2,1,1,0,0,1,2,1,1,0,1,1,0,2,0,1,1,2,3,0,0,0,3,0,0,0,0,
  0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,3,3,2,0,0,1,3,1,1,2,0,0,1,1,1,1,1,1,3,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,0,0,1,3,1,0,1,0,0,1,1,1,1,0,1,2,1,1,0,2,2,1,1,1,0,1,1,1,2,0,0,
  0,1,1,3,1,0,1,1,1,3,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,2,2,1,2,1,1,0,1,0,1,0,0,0,0,3,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251MacedonianModel =
{
  Windows_1251_CharToOrderMap,
  MacedonianFCMLowerBound,
  MacedonianFCMUpperBound,
  MacedonianUnicodeCharToOrder,
  MacedonianCompactedLangModel,
  56,
  (float)0.999001867222532,
  PR_FALSE,
  "WINDOWS-1251",
  "mk"
};

const SequenceModel Ibm855MacedonianModel =
{
  Ibm855_CharToOrderMap,
  MacedonianFCMLowerBound,
  MacedonianFCMUpperBound,
  MacedonianUnicodeCharToOrder,
  MacedonianCompactedLangModel,
  56,
  (float)0.999001867222532,
  PR_FALSE,
  "IBM855",
  "mk"
};

const SequenceModel Iso_8859_5MacedonianModel =
{
  Iso_8859_5_CharToOrderMap,
  MacedonianFCMLowerBound,
  MacedonianFCMUpperBound,
  MacedonianUnicodeCharToOrder,
  MacedonianCompactedLangModel,
  56,
  (float)0.999001867222532,
  PR_FALSE,
  "ISO-8859-5",
  "mk"
};

const LanguageModel MacedonianModel =
{
  "mk",
  Unicode_CharOrder,
  112,
  MacedonianFCMLowerBound,
  MacedonianFCMUpperBound,
  MacedonianUnicodeCharToOrderIsReduced,

  MacedonianUnicodeCharToOrder,
  OrderToRatio,
  MacedonianCompactedLangModel,
  56,
  5,
  (float)0.4662337598738498,
  30,
  (float)0.03265116233515017,
  (float)0.999747307799668,
};
