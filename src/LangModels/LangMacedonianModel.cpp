/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Macedonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 07:30:42.430243
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 4X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 6X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
   60, 49,SYM, 49,SYM,SYM,SYM,SYM,SYM,SYM, 56,SYM, 32, 43, 61, 50, /* 8X */
   62,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 56,SYM, 32, 43, 63, 50, /* 9X */
  SYM, 64, 65, 17,SYM, 66,SYM,SYM, 67,SYM, 68,SYM,SYM,SYM,SYM, 57, /* AX */
  SYM,SYM, 69, 70, 71,SYM,SYM,SYM, 72,SYM, 73,SYM, 17, 54, 54, 57, /* BX */
    0, 18,  8, 16, 10,  3, 30, 15,  1, 58,  9, 11, 13,  4,  2, 12, /* CX */
    6,  7,  5, 14, 31, 37, 22, 20, 26, 74, 75, 76, 59, 77, 78, 79, /* DX */
    0, 18,  8, 16, 10,  3, 30, 15,  1, 58,  9, 11, 13,  4,  2, 12, /* EX */
    6,  7,  5, 14, 31, 37, 22, 20, 26, 80, 81, 82, 59, 83, 84, 85, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm855_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 4X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 6X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
   86, 87, 49, 49, 88, 89, 90, 91, 54, 54, 92, 93, 57, 57, 17, 17, /* 8X */
   56, 56, 32, 32, 94, 95, 43, 43, 96, 97, 50, 50, 98, 99,100,101, /* 9X */
    0,  0, 18, 18, 22, 22, 10, 10,  3,  3, 31, 31, 16, 16,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 37, 37,  1,  1,SYM,SYM,SYM,SYM, 58, 58,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,  9,  9,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   11, 11, 13, 13,  4,  4,  2,  2, 12,SYM,SYM,SYM,SYM, 12,102,SYM, /* DX */
  103,  6,  6,  7,  7,  5,  5, 14, 14, 30, 30,  8,  8, 59, 59,SYM, /* EX */
  SYM,104,105, 15, 15, 26, 26,106,107,108,109, 20, 20,SYM,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 4X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 21, 40, 33, 36, 19, 44, 42, 35, 23, 52, 46, 34, 38, 24, 25, /* 6X */
   41, 55, 28, 29, 27, 39, 48, 47, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,110,111, 49,112, 54,113, 57, 17, 56, 32,114, 43,SYM,115, 50, /* AX */
    0, 18,  8, 16, 10,  3, 30, 15,  1, 58,  9, 11, 13,  4,  2, 12, /* BX */
    6,  7,  5, 14, 31, 37, 22, 20, 26,116,117,118, 59,119,120,121, /* CX */
    0, 18,  8, 16, 10,  3, 30, 15,  1, 58,  9, 11, 13,  4,  2, 12, /* DX */
    6,  7,  5, 14, 31, 37, 22, 20, 26,122,123,124, 59,125,126,127, /* EX */
  SYM,128,129, 49,130, 54,131, 57, 17, 56, 32,132, 43,SYM,133, 50, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 114;
static const unsigned int Unicode_CharOrder[] =
{
  65, 21, 66, 40, 67, 33, 68, 36, 69, 19, 70, 44, 71, 42,72, 35,
  73, 23, 74, 52, 75, 46, 76, 34, 77, 38, 78, 24, 79, 25,80, 41,
  81, 55, 82, 28, 83, 29, 84, 27, 85, 39, 86, 48, 87, 47,88, 51,
  89, 45, 90, 53, 97, 21, 98, 40, 99, 33, 100, 36, 101, 19,102, 44,
  103, 42, 104, 35, 105, 23, 106, 52, 107, 46, 108, 34, 109, 38,110, 24,
  111, 25, 112, 41, 113, 55, 114, 28, 115, 29, 116, 27, 117, 39,118, 48,
  119, 47, 120, 51, 121, 45, 122, 53, 1027, 49, 1029, 54, 1032, 17,1033, 56,
  1034, 32, 1036, 43, 1039, 50, 1040,  0, 1041, 18, 1042,  8, 1043, 16,1044, 10,
  1045,  3, 1046, 30, 1047, 15, 1048,  1, 1050,  9, 1051, 11, 1052, 13,1053,  4,
  1054,  2, 1055, 12, 1056,  6, 1057,  7, 1058,  5, 1059, 14, 1060, 31,1061, 37,
  1062, 22, 1063, 20, 1064, 26, 1072,  0, 1073, 18, 1074,  8, 1075, 16,1076, 10,
  1077,  3, 1078, 30, 1079, 15, 1080,  1, 1082,  9, 1083, 11, 1084, 13,1085,  4,
  1086,  2, 1087, 12, 1088,  6, 1089,  7, 1090,  5, 1091, 14, 1092, 31,1093, 37,
  1094, 22, 1095, 20, 1096, 26, 1107, 49, 1109, 54, 1112, 17, 1113, 56,1114, 32,
  1116, 43, 1119, 50,
};


/* Model Table:
 * Total considered sequences: 1154 / 3249
 * - Positive sequences: first 708 (0.995000396075458)
 * - Probable sequences: next 182 (890-708) (0.004008283635293819)
 * - Neutral sequences: last 2359 (0.0009913202892481987)
 * - Negative sequences: 2095 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 MacedonianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,1,0,0,3,1,0,0,3,3,3,0,0,0,0,3,0,0,
   0,0,0,3,0,0,0,0,0,3,3,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,0,0,3,0,0,0,3,3,3,0,0,0,0,3,0,0,
   0,0,0,2,0,0,0,0,0,0,2,0,1,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,0,0,3,0,0,0,3,3,2,0,0,0,0,3,1,0,
   0,0,1,3,0,0,0,0,0,3,2,0,0,0,1,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,0,0,3,0,0,0,3,3,3,0,1,0,0,3,0,0,
   0,0,0,3,0,0,0,0,0,3,2,1,0,0,0,0,1,
  3,3,3,3,1,3,3,3,3,3,3,3,2,1,3,3,3,2,3,0,3,1,3,0,0,0,3,0,0,0,3,3,0,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,1,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,2,3,0,3,0,3,0,1,0,3,0,0,1,3,3,0,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,1,1,2,0,2,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,1,3,3,1,0,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,1,1,3,0,3,3,0,2,3,1,0,1,0,3,0,0,0,2,1,0,0,0,1,0,0,0,0,0,2,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,1,3,3,1,3,3,2,3,1,3,0,0,0,2,0,0,0,1,0,0,0,2,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,0,3,3,3,3,1,2,3,3,2,3,3,3,0,3,1,3,0,0,0,2,0,0,0,3,3,0,0,0,0,0,2,0,0,
   0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,1,3,0,3,0,0,3,0,1,3,1,0,2,0,3,0,0,0,3,0,0,0,1,2,0,0,0,0,0,2,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,2,3,3,2,3,1,1,3,3,0,2,0,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,3,0,3,0,0,0,3,0,0,0,3,2,0,0,0,0,0,3,0,0,
   0,0,0,3,0,0,0,0,0,3,2,0,0,0,1,0,0,
  3,3,3,3,3,0,3,1,3,0,3,3,1,3,3,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,1,3,1,2,1,2,3,1,3,3,2,1,0,2,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,3,1,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,0,
   0,0,0,3,0,0,0,0,0,0,2,0,0,0,0,0,0,
  3,3,3,3,3,0,3,2,3,1,3,3,1,1,3,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,3,3,3,0,0,0,3,3,3,3,0,3,3,
   3,3,3,0,3,3,3,3,3,0,0,3,1,2,0,2,0,
  3,3,3,3,3,1,0,0,2,3,0,3,1,0,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,2,0,3,3,2,0,3,3,3,0,0,0,3,3,2,3,0,3,3,
   3,3,3,0,3,3,3,3,3,0,0,2,1,3,0,1,0,
  3,3,3,3,3,0,3,1,3,2,1,0,0,1,3,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,3,3,3,0,0,0,3,3,1,3,0,3,3,
   3,3,3,0,3,2,3,0,3,0,0,3,2,3,0,2,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,3,2,3,0,0,0,3,2,2,3,0,2,3,
   2,1,3,0,3,3,3,3,2,0,0,0,2,2,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,3,0,2,0,3,3,3,0,3,3,3,0,0,0,3,3,3,3,0,3,3,
   3,3,3,0,3,2,3,3,3,0,0,3,2,2,0,1,0,
  3,3,3,3,3,3,1,0,3,3,1,2,3,2,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,1,3,0,3,3,3,0,0,0,2,3,3,1,0,2,3,
   0,3,0,0,2,3,0,2,2,0,0,0,0,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,3,3,3,0,0,0,3,3,2,3,0,3,3,
   3,3,3,0,3,3,3,2,3,0,0,1,0,1,0,0,0,
  0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,3,2,3,0,0,0,3,3,3,1,0,3,3,
   3,3,2,0,2,2,3,2,1,0,0,0,0,1,0,0,0,
  3,3,3,3,3,1,3,1,1,0,2,3,0,1,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,0,1,1,3,0,1,3,0,1,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,1,3,0,1,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,3,3,3,0,0,0,3,3,3,1,0,2,3,
   1,2,1,0,1,2,3,0,1,0,0,0,1,2,0,1,0,
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,3,0,3,0,0,0,3,3,0,3,0,2,3,
   2,3,1,0,2,3,2,0,2,0,0,1,0,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,3,3,2,0,0,0,0,2,0,0,0,2,3,
   2,0,1,0,1,3,1,1,0,0,0,0,1,0,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,1,3,3,0,0,0,2,2,2,2,0,2,3,
   2,2,3,0,2,2,1,2,1,0,0,0,1,1,0,1,0,
  3,3,3,3,3,2,3,1,0,0,0,2,0,1,3,1,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,1,3,0,3,1,3,0,0,0,2,2,1,1,0,3,3,
   3,3,1,0,0,3,1,1,1,0,0,1,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,1,0,3,3,3,0,0,0,3,3,1,3,0,3,3,
   3,3,3,0,2,2,3,0,0,0,0,0,2,2,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,0,1,3,2,0,0,0,2,3,1,1,0,2,3,
   2,1,1,0,0,3,2,0,1,0,0,1,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,3,3,3,0,0,0,1,3,3,2,0,3,3,
   1,3,2,0,2,2,1,1,1,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,2,3,2,0,0,0,0,3,3,1,0,1,3,
   1,2,2,0,1,3,0,1,1,0,0,1,0,0,0,1,0,
  3,3,1,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,1,3,0,3,3,1,0,0,0,2,3,2,0,0,2,3,
   1,0,1,0,3,1,1,1,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,2,2,3,0,2,2,3,0,0,0,2,2,1,0,0,1,3,
   1,2,1,0,1,0,1,1,2,0,0,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,2,1,3,0,0,0,0,2,1,1,0,1,3,
   1,1,0,0,1,2,2,2,1,0,0,0,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,2,3,0,1,2,3,0,0,0,0,1,3,1,0,1,0,
   0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,0,3,0,0,1,1,0,0,0,0,0,0,2,0,0,2,
   1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,
  3,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,3,3,0,0,0,0,1,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,3,0,1,0,2,0,0,0,0,0,2,0,1,0,0,0,0,
   0,2,0,0,2,0,0,0,2,0,0,2,0,0,0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,3,0,3,0,3,0,1,1,1,0,0,0,1,0,0,1,0,1,2,
   0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,3,0,2,0,1,1,1,0,0,0,1,1,0,0,0,0,3,
   0,0,0,0,1,2,0,0,0,0,0,1,1,2,0,0,0,
  0,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,1,0,0,0,0,0,1,1,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251MacedonianModel =
{
  Windows_1251_CharToOrderMap,
  MacedonianLangModel,
  57,
  (float)0.9990086797107518,
  PR_FALSE,
  "WINDOWS-1251",
  "mk"
};

const SequenceModel Ibm855MacedonianModel =
{
  Ibm855_CharToOrderMap,
  MacedonianLangModel,
  57,
  (float)0.9990086797107518,
  PR_FALSE,
  "IBM855",
  "mk"
};

const SequenceModel Iso_8859_5MacedonianModel =
{
  Iso_8859_5_CharToOrderMap,
  MacedonianLangModel,
  57,
  (float)0.9990086797107518,
  PR_FALSE,
  "ISO-8859-5",
  "mk"
};

const LanguageModel MacedonianModel =
{
  "mk",
  Unicode_CharOrder,
  114,
  MacedonianLangModel,
  57,
  5,
  (float)0.4505720937875619,
  34,
  (float)0.031247749752126543,
  (float)0.9999944609283113,
};
