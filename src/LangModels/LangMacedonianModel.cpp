/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Macedonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-08 23:28:41.725068
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 * IRR: irrelevant character (which does belong to a word)
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */



#define IRR                     (-1)

#define MacedonianOrderWidth        56


static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
  249, 43,SYM, 43,SYM,SYM,SYM,SYM,SYM,SYM, 55,SYM, 32, 38,249, 49, /* 8X */
  249,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 55,SYM, 32, 38,249, 49, /* 9X */
  SYM,249,249, 15,SYM,249,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* AX */
  SYM,SYM,249,249,249,SYM,SYM,SYM,249,SYM,249,SYM, 15, 54, 54,249, /* BX */
    0, 18,  8, 16, 10,  3, 25, 17,  2,249,  9, 11, 13,  4,  1, 12, /* CX */
    6,  7,  5, 14, 26, 33, 20, 19, 21,249,249,249,249,249,249,249, /* DX */
    0, 18,  8, 16, 10,  3, 25, 17,  2,249,  9, 11, 13,  4,  1, 12, /* EX */
    6,  7,  5, 14, 26, 33, 20, 19, 21,249,249,249,249,249,249,249, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm855_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
  249,249, 43, 43,249,249,249,249, 54, 54,249,249,249,249, 15, 15, /* 8X */
   55, 55, 32, 32,249,249, 38, 38,249,249, 49, 49,249,249,249,249, /* 9X */
    0,  0, 18, 18, 20, 20, 10, 10,  3,  3, 26, 26, 16, 16,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 33, 33,  2,  2,SYM,SYM,SYM,SYM,249,249,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,  9,  9,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   11, 11, 13, 13,  4,  4,  1,  1, 12,SYM,SYM,SYM,SYM, 12,249,SYM, /* DX */
  249,  6,  6,  7,  7,  5,  5, 14, 14, 25, 25,  8,  8,249,249,SYM, /* EX */
  SYM,249,249, 17, 17, 21, 21,249,249,249,249, 19, 19,SYM,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 4X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 23, 44, 35, 37, 22, 46, 41, 36, 24, 52, 48, 34, 39, 27, 28, /* 6X */
   42,249, 30, 31, 29, 40, 47, 50, 51, 45, 53,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,249,249, 43,249, 54,249,249, 15, 55, 32,249, 38,SYM,249, 49, /* AX */
    0, 18,  8, 16, 10,  3, 25, 17,  2,249,  9, 11, 13,  4,  1, 12, /* BX */
    6,  7,  5, 14, 26, 33, 20, 19, 21,249,249,249,249,249,249,249, /* CX */
    0, 18,  8, 16, 10,  3, 25, 17,  2,249,  9, 11, 13,  4,  1, 12, /* DX */
    6,  7,  5, 14, 26, 33, 20, 19, 21,249,249,249,249,249,249,249, /* EX */
  SYM,249,249, 43,249, 54,249,249, 15, 55, 32,249, 38,SYM,249, 49, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    112

static const PRUint32 Unicode_CharOrder[] =
{
    65,  23,   66,  44,   67,  35,   68,  37,   69,  22,   70,  46,   71,  41,   72,  36,
    73,  24,   74,  52,   75,  48,   76,  34,   77,  39,   78,  27,   79,  28,   80,  42,
    82,  30,   83,  31,   84,  29,   85,  40,   86,  47,   87,  50,   88,  51,   89,  45,
    90,  53,   97,  23,   98,  44,   99,  35,  100,  37,  101,  22,  102,  46,  103,  41,
   104,  36,  105,  24,  106,  52,  107,  48,  108,  34,  109,  39,  110,  27,  111,  28,
   112,  42,  114,  30,  115,  31,  116,  29,  117,  40,  118,  47,  119,  50,  120,  51,
   121,  45,  122,  53, 1027,  43, 1029,  54, 1032,  15, 1033,  55, 1034,  32, 1036,  38,
  1039,  49, 1040,   0, 1041,  18, 1042,   8, 1043,  16, 1044,  10, 1045,   3, 1046,  25,
  1047,  17, 1048,   2, 1050,   9, 1051,  11, 1052,  13, 1053,   4, 1054,   1, 1055,  12,
  1056,   6, 1057,   7, 1058,   5, 1059,  14, 1060,  26, 1061,  33, 1062,  20, 1063,  19,
  1064,  21, 1072,   0, 1073,  18, 1074,   8, 1075,  16, 1076,  10, 1077,   3, 1078,  25,
  1079,  17, 1080,   2, 1082,   9, 1083,  11, 1084,  13, 1085,   4, 1086,   1, 1087,  12,
  1088,   6, 1089,   7, 1090,   5, 1091,  14, 1092,  26, 1093,  33, 1094,  20, 1095,  19,
  1096,  21, 1107,  43, 1109,  54, 1112,  15, 1113,  55, 1114,  32, 1116,  38, 1119,  49,
};

static const float OrderToRatio[] =
{
  0.124234700f,  0.101214979f,  0.093455713f,  0.077805447f,  0.069522921f,  0.065764369f,  0.049709845f,  0.046573719f, 
  0.040403083f,  0.039170719f,  0.034776030f,  0.033585291f,  0.025900216f,  0.021783439f,  0.019998678f,  0.017182825f, 
  0.017060886f,  0.016598596f,  0.013456349f,  0.008057257f,  0.007453196f,  0.006682631f,  0.005167947f,  0.004698067f, 
  0.004354288f,  0.004337883f,  0.004025690f,  0.003770550f,  0.003582500f,  0.003428485f,  0.003339847f,  0.003266879f, 
  0.003043080f,  0.002580301f,  0.002482848f,  0.002359685f,  0.001788434f,  0.001742401f,  0.001715711f,  0.001713263f, 
  0.001539170f,  0.001295292f,  0.001231385f,  0.001155479f,  0.001040396f,  0.000854060f,  0.000829575f,  0.000764443f, 
  0.000754649f,  0.000661603f,  0.000592064f,  0.000377814f,  0.000295787f,  0.000227717f,  0.000175317f,  0.000163809f, 
  0    /* value slot for out-of-bounds index values; range: 0..freq_count(56) */
};


/* Model Table:
 * Number of web pages processed for this model: 1146
 * Number of characters consumed for this model: 4084020
 * Total considered sequences: 1876 / 3136
 *
 * - Positive sequences: first 722 (0.9950279423159681)
 * - Probable sequences: next 286 (1008-722) (0.003973924906563897)
 * - Neutral sequences: last 2128 (0.0009981327774679638)
 * - Negative sequences: 1260 (off-ratio, TODO)
 */
#define MacedonianUnicodeCharToOrderIsReduced  0


#define MacedonianFCMLowerBound  65
#define MacedonianFCMUpperBound  1119


static const PRInt16 MacedonianUnicodeCharToOrder[] =
{
  23,44,35,37,22,46,41,36,24,52,48,34,39,27,28,42,IRR,30,31,29,
  40,47,50,51,45,53,IRR,IRR,IRR,IRR,IRR,IRR,23,44,35,37,22,46,41,36,
  24,52,48,34,39,27,28,42,IRR,30,31,29,40,47,50,51,45,53,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,43,IRR,54,IRR,IRR,15,55,32,IRR,38,IRR,IRR,49,0,18,8,16,10,
  3,25,17,2,IRR,9,11,13,4,1,12,6,7,5,14,26,33,20,19,21,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,0,18,8,16,10,3,25,17,2,IRR,9,11,13,
  4,1,12,6,7,5,14,26,33,20,19,21,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,43,IRR,54,IRR,IRR,15,55,32,IRR,38,IRR,IRR,49,
};



#define MacedonianUnicodeCharToOrderFirstTableChunkSize    58
#define MacedonianUnicodeCharToOrderSecondTableChunkOffset 962
#define MacedonianUnicodeCharToOrderSecondTableChunkSize   93


static const PRInt16 MacedonianUnicodeCharToOrder2[] =
{
  43,IRR,54,IRR,IRR,15,55,32,IRR,38,IRR,IRR,49,0,18,8,16,10,3,25,
  17,2,IRR,9,11,13,4,1,12,6,7,5,14,26,33,20,19,21,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,0,18,8,16,10,3,25,17,2,IRR,9,11,13,4,1,
  12,6,7,5,14,26,33,20,19,21,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  43,IRR,54,IRR,IRR,15,55,32,IRR,38,IRR,IRR,49,
};

static const PRUint8 MacedonianCompactedLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,1,3,3,1,
  0,1,1,1,3,3,1,1,1,0,3,0,0,0,1,3,0,0,0,0,1,3,1,0,1,0,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,0,
  1,1,0,0,3,3,0,1,0,0,3,0,0,0,0,3,1,0,0,0,0,2,1,1,1,0,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,3,3,1,
  1,0,0,1,3,3,1,1,0,0,3,0,0,0,0,1,0,0,0,0,0,3,0,0,1,0,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,3,3,0,
  0,1,1,0,3,3,0,0,0,0,3,1,0,0,0,3,0,0,0,1,0,2,0,1,1,0,1,2,
  3,3,3,3,2,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,1,1,1,2,3,0,
  1,0,0,0,1,3,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,3,0,0,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,1,2,2,2,1,1,2,1,1,3,1,
  1,0,0,0,1,3,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,1,1,3,3,0,
  1,0,0,1,1,3,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,3,0,1,0,0,1,1,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,1,3,2,3,1,0,0,1,0,3,0,
  0,0,0,0,1,3,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,2,2,3,1,0,1,1,1,1,0,
  1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,
  3,3,3,3,3,3,3,3,3,2,2,3,2,3,3,2,2,1,2,1,3,2,0,1,1,1,2,0,
  1,1,0,1,1,2,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,
  3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,2,3,3,3,0,2,1,0,1,1,1,1,0,
  0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,
  3,3,3,3,3,3,1,3,3,3,3,2,2,3,3,3,3,2,3,3,3,2,1,0,0,3,3,0,
  1,0,0,0,1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,1,0,
  3,3,3,3,3,3,3,3,1,3,2,3,1,2,3,3,1,1,1,3,3,3,0,1,1,1,3,0,
  1,1,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,2,3,3,3,3,2,3,3,2,3,3,2,2,3,2,2,2,1,1,0,1,3,0,
  1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,0,0,0,3,2,0,
  0,0,0,0,2,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,0,2,0,1,0,0,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,1,1,1,2,0,
  0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,
  3,3,3,3,3,2,3,3,3,2,2,3,2,3,3,1,1,2,2,1,0,1,0,1,0,1,1,0,
  0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,2,
  3,3,3,3,3,2,3,1,3,1,3,3,1,3,3,3,3,1,3,1,1,0,0,0,0,2,1,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,
  3,3,3,3,3,1,3,2,3,1,3,3,1,1,3,3,1,1,1,1,1,1,1,1,1,1,0,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,
  3,3,3,3,3,1,1,1,2,3,0,3,1,2,3,3,0,1,0,1,1,0,0,1,0,1,0,0,
  0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,1,3,1,3,3,1,1,1,1,3,1,1,1,1,1,1,1,0,0,0,0,1,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,1,1,3,3,1,3,3,2,3,2,1,0,1,2,1,1,0,0,0,0,1,0,
  0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
  1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,3,3,3,0,0,3,
  3,3,3,3,1,1,3,3,2,3,0,3,3,3,3,0,3,3,3,3,3,0,3,3,2,2,0,0,
  0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,3,2,3,0,0,3,
  2,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,3,3,3,3,0,3,2,2,3,1,0,
  0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,0,0,3,
  3,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,2,3,3,3,0,1,3,2,3,0,0,
  3,3,3,3,3,1,2,1,1,1,2,2,0,2,3,3,1,0,3,0,0,0,0,1,0,1,0,0,
  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,1,2,1,3,1,2,3,1,1,1,1,1,1,1,1,0,0,0,1,0,
  0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,
  3,3,2,3,0,0,2,3,2,3,0,2,3,3,2,0,2,3,2,2,3,1,2,1,2,2,0,0,
  0,0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,2,3,3,0,0,3,
  3,3,3,3,0,0,3,3,3,3,0,3,3,3,3,0,3,2,3,3,3,0,3,3,2,2,0,0,
  1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,3,3,0,0,2,
  3,3,3,3,0,1,3,2,3,1,0,2,3,2,2,0,2,3,2,2,1,0,2,1,1,2,0,0,
  0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,
  3,3,3,3,0,0,3,3,2,3,0,3,3,3,3,0,3,3,2,3,3,0,2,1,1,2,0,0,
  1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,3,3,3,0,0,2,
  3,3,2,3,0,0,3,3,3,2,0,3,3,2,3,0,3,2,2,2,3,0,2,1,1,2,0,0,
  3,2,2,3,0,1,0,2,0,0,0,0,0,0,3,1,1,0,0,1,0,0,1,1,0,0,0,0,
  0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  3,3,3,3,3,2,3,2,1,0,1,2,1,2,3,2,1,1,1,1,1,1,0,0,1,0,1,0,
  0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,
  3,3,1,3,0,0,3,2,1,3,0,2,3,2,2,0,2,3,2,2,2,0,1,1,1,1,0,0,
  0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,3,3,3,0,0,2,
  3,3,3,3,0,0,3,3,3,2,0,2,3,2,2,0,2,3,1,1,3,0,1,1,0,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,
  3,3,3,2,0,0,2,2,1,2,0,2,3,1,1,0,2,3,2,1,1,0,1,1,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,3,3,3,0,0,2,
  3,2,3,3,0,0,2,2,2,2,0,2,3,3,1,0,2,2,2,2,1,0,2,2,1,2,0,0,
  3,2,3,3,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,3,3,3,0,0,2,
  3,2,2,3,0,0,2,2,2,2,0,3,3,2,3,0,3,3,1,1,2,0,1,1,2,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,
  2,3,3,3,0,0,3,3,1,3,0,3,2,3,3,0,3,2,2,2,2,0,1,2,2,2,0,0,
  0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,3,3,3,0,0,2,
  3,2,3,3,0,0,3,3,3,1,0,2,3,2,1,0,1,3,1,1,1,0,1,1,1,1,0,0,
  0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,3,3,3,0,0,2,
  3,3,3,2,0,0,3,1,3,2,0,2,3,2,3,0,2,2,1,0,1,0,1,1,1,0,0,0,
  3,3,3,3,0,1,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,
  3,1,3,2,0,0,3,2,2,2,0,2,3,2,2,0,2,3,1,1,1,0,1,1,2,1,0,0,
  0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,3,3,2,0,0,2,
  3,2,2,3,0,0,2,2,1,2,0,2,2,2,2,0,1,1,1,1,1,0,1,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,1,
  3,3,3,1,0,0,3,2,1,1,0,1,3,1,1,0,1,1,3,0,1,0,1,1,1,0,0,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,3,3,0,0,2,
  3,1,1,1,0,0,1,1,1,1,0,1,2,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,
  0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,3,3,3,0,0,2,
  3,2,2,3,0,0,2,1,2,1,0,2,2,0,2,0,2,2,1,1,2,1,2,1,1,1,0,0,
  3,3,3,3,0,0,2,1,1,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,3,0,0,2,
  3,1,2,2,0,0,2,1,3,1,0,1,1,1,1,0,1,2,1,1,1,0,2,1,1,1,0,1,
  0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,1,
  1,2,1,1,0,0,1,2,1,1,0,1,1,0,2,0,1,1,2,3,0,0,0,3,0,0,0,0,
  1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,3,3,2,0,0,1,
  3,1,1,2,0,0,1,1,1,1,1,1,3,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,0,0,1,
  3,1,0,1,0,0,1,1,1,1,0,1,2,1,1,0,2,2,1,1,1,0,1,1,1,2,0,0,
  1,1,3,1,0,1,1,1,3,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,1,2,1,1,0,1,0,1,0,0,0,0,3,1,0,0,0,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251MacedonianModel =
{
  Windows_1251_CharToOrderMap,
  MacedonianCompactedLangModel,
  MacedonianOrderWidth,
  0.999001867222532f,
  PR_FALSE,
  "WINDOWS-1251",
  "mk"
};

const SequenceModel Ibm855MacedonianModel =
{
  Ibm855_CharToOrderMap,
  MacedonianCompactedLangModel,
  MacedonianOrderWidth,
  0.999001867222532f,
  PR_FALSE,
  "IBM855",
  "mk"
};

const SequenceModel Iso_8859_5MacedonianModel =
{
  Iso_8859_5_CharToOrderMap,
  MacedonianCompactedLangModel,
  MacedonianOrderWidth,
  0.999001867222532f,
  PR_FALSE,
  "ISO-8859-5",
  "mk"
};

const LanguageModel MacedonianModel =
{
  "mk",
  Unicode_CharOrder,
  Unicode_Char_size,

  MacedonianFCMLowerBound,
  MacedonianFCMUpperBound,
  MacedonianUnicodeCharToOrderIsReduced,
  MacedonianUnicodeCharToOrder,
  MacedonianUnicodeCharToOrderFirstTableChunkSize,
  MacedonianUnicodeCharToOrderSecondTableChunkOffset,
  MacedonianUnicodeCharToOrderSecondTableChunkSize,
  MacedonianUnicodeCharToOrder2,
  OrderToRatio,
  MacedonianCompactedLangModel,
  MacedonianOrderWidth,
  5,
  0.4662337598738498f,
  30,
  0.03265116233515017f,
  0.999747307799668f,
};
