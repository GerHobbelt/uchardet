/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Polish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 19:54:55.178474
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24,SYM, 19,SYM, 68, 29,SYM,SYM, 40, 67, 74, 32,SYM, 43, 28, /* AX */
  SYM, 24,SYM, 19,SYM, 68, 29,SYM,SYM, 40, 67, 74, 32,SYM, 43, 28, /* BX */
   86, 35, 61, 53, 41, 87, 31, 45, 42, 34, 23, 52, 48, 36, 80, 77, /* CX */
   58, 27, 82, 25, 59, 57, 38,SYM, 50, 75, 49, 79, 39, 51, 78, 54, /* DX */
   88, 35, 61, 53, 41, 89, 31, 45, 42, 34, 23, 52, 48, 36, 80, 77, /* EX */
   58, 27, 82, 25, 59, 57, 38,SYM, 50, 75, 49, 79, 39, 51, 78,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 47,SYM, 90,SYM,SYM,SYM,SYM, 76, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 47,SYM, 91,SYM,SYM,SYM,SYM, 76, /* BX */
   24, 92, 69, 31, 41, 55, 23, 65, 42, 34, 32, 63, 93, 94, 72, 95, /* CX */
   40, 27, 73, 25, 44, 66, 38,SYM, 96, 19, 29, 56, 39, 28, 43, 54, /* DX */
   24, 97, 69, 31, 41, 55, 23, 65, 42, 34, 32, 63, 98, 99, 72,100, /* EX */
   40, 27, 73, 25, 44, 66, 38,SYM,101, 19, 29, 56, 39, 28, 43,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24, 24, 19,SYM,SYM, 40,SYM, 40,SYM, 62,SYM, 32,SYM, 32, 28, /* AX */
  SYM,SYM, 42, 19, 43,SYM,SYM,SYM, 43, 42, 62,SYM, 84, 84,102, 28, /* BX */
   70, 35, 61, 53, 41, 31, 76, 45, 46, 34, 60, 52, 83, 36, 80, 71, /* CX */
   58, 27, 64, 25, 59, 57, 38, 29, 79, 85, 49,103, 39, 23, 81, 54, /* DX */
   70, 35, 61, 53, 41, 31, 76, 45, 46, 34, 60, 52, 83, 36, 80, 71, /* EX */
   58, 27, 64, 25, 59, 57, 38, 29, 79, 85, 49,104, 39, 23, 81,105, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 40,SYM, 29, 74, 43, 32, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 40,SYM, 29, 74, 43, 32, /* 9X */
  SYM,SYM,SYM, 19,SYM, 24,SYM,SYM,SYM,SYM, 67,SYM,SYM,SYM,SYM, 28, /* AX */
  SYM,SYM,SYM, 19,SYM,SYM,SYM,SYM,SYM, 24, 67,SYM, 68,SYM, 68, 28, /* BX */
  106, 35, 61, 53, 41,107, 31, 45, 42, 34, 23, 52, 48, 36, 80, 77, /* CX */
   58, 27, 82, 25, 59, 57, 38,SYM, 50, 75, 49, 79, 39, 51, 78, 54, /* DX */
  108, 35, 61, 53, 41,109, 31, 45, 42, 34, 23, 52, 48, 36, 80, 77, /* EX */
   58, 27, 82, 25, 59, 57, 38,SYM, 50, 75, 49, 79, 39, 51, 78,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
   45, 39, 34, 61, 41, 75, 31, 45, 19, 52, 57, 57, 80, 32, 41, 31, /* 8X */
   34,110,111, 59, 38, 68, 68, 29, 29, 38, 39, 74, 74, 19,SYM, 42, /* 9X */
   35, 36, 25, 49, 24, 24, 43, 43, 23, 23,SYM, 32, 42, 67,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 35, 61, 48, 67,SYM,SYM,SYM,SYM, 28, 28,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 53, 53,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   58, 58, 77, 52, 77, 82, 36, 80, 48,SYM,SYM,SYM,SYM, 78, 75,SYM, /* DX */
   25, 54, 59, 27, 27, 82, 40, 40,112, 49,113, 79, 51, 51, 78,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 79, 50, 50,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 4X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 15,  3, 26, 20, 22,  1, 18,  6, 14, 16,  5,  2, /* 6X */
   13, 37,  4,  7, 10, 17, 30,  9, 33, 12,  8,SYM,SYM,SYM,SYM,CTR, /* 7X */
   41, 69, 69, 34, 24, 38, 39, 35, 24, 42, 41, 42, 31, 31, 34, 32, /* 8X */
   32, 77, 36, 77, 65, 65, 63, 25, 63, 59, 38, 66, 49, 48, 48, 39, /* 9X */
  SYM,SYM, 23,SYM,SYM,SYM,SYM, 54,SYM,SYM,SYM, 23,SYM,SYM,114,115, /* AX */
  116, 72,SYM,SYM, 72,117,SYM,SYM, 19,118,119, 68, 68,120,121, 73, /* BX */
   73, 27,SYM,SYM, 27, 82,SYM,SYM,SYM,SYM,SYM, 82, 57, 66, 57, 44, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 44,122,123, 50,SYM,SYM, 50,124, /* DX */
  125, 40,SYM,SYM, 40, 29, 29, 35, 74, 74, 36, 43, 43, 56, 25, 59, /* EX */
   56, 75, 49, 75, 79, 79,126,127, 51, 51,128, 28, 19, 28,129,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 76;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 21,  67, 11,  68, 15,  69,  3,  70, 26,  71, 20, 72, 22,
   73,  1,  74, 18,  75,  6,  76, 14,  77, 16,  78,  5,  79,  2, 80, 13,
   81, 37,  82,  4,  83,  7,  84, 10,  85, 17,  86, 30,  87,  9, 88, 33,
   89, 12,  90,  8,  97,  0,  98, 21,  99, 11, 100, 15, 101,  3,102, 26,
  103, 20, 104, 22, 105,  1, 106, 18, 107,  6, 108, 14, 109, 16,110,  5,
  111,  2, 112, 13, 113, 37, 114,  4, 115,  7, 116, 10, 117, 17,118, 30,
  119,  9, 120, 33, 121, 12, 122,  8, 193, 35, 201, 34, 205, 36,211, 25,
  225, 35, 233, 34, 237, 36, 243, 25, 260, 24, 261, 24, 262, 31,263, 31,
  280, 23, 281, 23, 321, 19, 322, 19, 323, 27, 324, 27, 346, 29,347, 29,
  377, 32, 378, 32, 379, 28, 380, 28,
};


/* Model Table:
 * Total sequences: 1547
 * First 512 sequences: 0.9881622113600178
 * Next 512 sequences (512-1024): 0.011288903649768277
 * Rest: 0.0005488849902139173
 * Negative sequences: TODO
 */
static const PRUint8 PolishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,3,2,0,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,3,1,2,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,2,2,2,1,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,2,3,3,3,3,3,2,2,2,0,1,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,3,3,3,2,0,2,2,2,2,0,1,2,2,2,2,
  3,3,3,3,3,3,3,3,3,2,3,3,3,2,2,3,2,3,2,1,3,2,2,3,3,3,3,0,3,1,2,0,1,2,2,2,2,2,
  3,3,3,3,3,2,3,3,1,3,3,3,2,2,3,2,3,3,2,3,2,2,2,3,3,3,2,0,3,1,1,0,0,1,2,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,2,3,3,2,0,0,0,2,0,0,0,2,2,2,2,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,0,1,0,2,0,0,0,2,2,1,2,
  3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,2,2,3,2,3,2,2,2,3,3,3,1,0,0,2,0,0,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,2,3,2,3,2,2,3,3,3,3,2,0,1,1,2,0,0,1,2,2,2,0,
  3,3,3,3,2,3,3,2,3,2,3,2,3,1,3,2,2,3,3,2,2,2,3,2,3,3,1,0,0,0,1,0,0,0,2,2,2,2,
  3,2,2,2,3,3,3,3,3,3,3,3,0,3,3,3,3,2,3,3,3,3,2,0,0,0,3,3,3,3,2,3,2,0,1,1,0,0,
  3,3,3,3,3,3,2,3,2,2,2,3,3,3,3,2,2,3,1,3,2,2,3,2,2,3,2,0,0,0,1,0,0,0,2,2,1,0,
  3,3,3,3,2,3,3,3,2,3,3,3,2,2,3,3,3,3,2,0,3,3,2,3,3,2,3,1,2,1,2,0,0,1,2,2,2,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,2,3,2,2,3,3,2,0,3,1,2,0,2,0,2,2,2,2,
  3,3,3,3,2,3,3,3,1,2,2,3,3,3,2,2,3,3,2,2,2,3,2,3,2,3,2,0,2,1,1,0,0,0,2,2,2,0,
  3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,2,0,0,0,3,3,3,2,2,1,2,2,2,2,2,2,
  3,3,3,3,2,3,2,3,2,3,2,3,0,2,2,3,3,3,2,2,2,2,1,3,3,3,1,1,1,3,1,1,0,0,1,2,1,0,
  3,1,3,3,2,3,3,2,2,2,3,2,3,2,1,2,2,3,0,2,3,2,1,3,3,3,1,0,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,2,2,3,2,1,2,2,3,3,2,3,2,3,2,2,3,2,2,3,2,0,1,0,2,0,0,1,2,2,1,1,
  3,3,3,3,3,3,2,3,2,2,1,2,3,2,3,2,2,3,2,3,1,2,2,3,2,2,2,0,0,0,0,0,0,0,2,2,1,0,
  3,3,3,3,3,3,2,2,2,2,2,2,3,2,3,2,3,3,2,2,1,2,2,2,2,2,2,0,1,1,2,0,0,0,2,2,0,1,
  0,0,0,0,0,0,3,3,3,1,3,3,0,3,2,3,0,0,0,3,3,3,0,0,0,0,0,0,3,3,0,2,2,0,0,0,0,0,
  0,0,0,0,0,0,2,2,3,2,3,3,0,3,0,3,0,0,0,3,3,2,0,0,0,0,0,0,3,0,0,2,0,0,0,0,0,0,
  1,0,0,0,3,2,2,2,3,3,2,3,1,2,3,3,2,0,3,3,2,3,1,0,0,0,1,0,3,1,1,0,3,0,0,0,1,0,
  3,3,3,3,3,2,2,2,1,2,2,1,2,1,3,2,2,3,2,2,2,2,1,2,2,1,3,0,0,0,2,0,0,0,2,1,0,1,
  0,0,0,0,0,0,2,3,0,0,1,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,3,0,3,2,2,0,2,0,2,3,0,3,2,2,3,0,1,1,3,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,3,3,2,1,0,3,0,3,0,2,3,0,3,0,0,0,0,2,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,
  3,3,3,3,2,2,2,2,1,0,1,0,2,1,2,0,0,2,2,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,2,2,2,0,
  1,0,1,1,0,0,2,0,0,2,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,2,3,0,2,0,2,0,2,1,0,2,3,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  2,3,2,2,0,0,1,2,0,1,2,0,1,2,1,0,1,2,0,0,0,1,2,0,0,0,2,0,0,0,2,0,0,2,1,0,0,0,
  2,1,2,2,2,2,1,2,1,0,2,2,0,1,2,2,2,1,1,0,2,2,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
  0,1,1,1,2,2,2,2,2,0,2,2,0,1,2,2,1,1,1,0,1,2,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,
  2,1,2,1,2,2,2,2,1,0,1,2,0,0,2,1,1,0,0,0,2,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
  1,2,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,
};


const SequenceModel Iso_8859_2PolishModel =
{
  Iso_8859_2_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "ISO-8859-2",
  "pl"
};

const SequenceModel Iso_8859_13PolishModel =
{
  Iso_8859_13_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "ISO-8859-13",
  "pl"
};

const SequenceModel Iso_8859_16PolishModel =
{
  Iso_8859_16_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "ISO-8859-16",
  "pl"
};

const SequenceModel Windows_1250PolishModel =
{
  Windows_1250_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "WINDOWS-1250",
  "pl"
};

const SequenceModel Ibm852PolishModel =
{
  Ibm852_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "IBM852",
  "pl"
};

const SequenceModel Mac_CentraleuropePolishModel =
{
  Mac_Centraleurope_CharToOrderMap,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "pl"
};

const LanguageModel PolishModel =
{
  "pl",
  Unicode_CharOrder,
  76,
  PolishLangModel,
  38,
  (float)0.9881622113600178,
};
