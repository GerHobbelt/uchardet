/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Polish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-08 23:28:38.990681
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 * IRR: irrelevant character (which does belong to a word)
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */



#define IRR                     (-1)

#define PolishOrderWidth        36


static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 23,SYM, 20,SYM,249, 27,SYM,SYM,249,249,249, 33,SYM,249, 26, /* AX */
  SYM, 23,SYM, 20,SYM,249, 27,SYM,SYM,249,249,249, 33,SYM,249, 26, /* BX */
  249, 34,249,249,249,249, 30,249,249,249, 25,249,249,249,249,249, /* CX */
  249, 29,249, 24,249,249,249,SYM,249,249,249,249,249,249,249,249, /* DX */
  249, 34,249,249,249,249, 30,249,249,249, 25,249,249,249,249,249, /* EX */
  249, 29,249, 24,249,249,249,SYM,249,249,249,249,249,249,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* BX */
   23,249,249, 30,249,249, 25,249,249,249, 33,249,249,249,249,249, /* CX */
  249, 29,249, 24,249,249,249,SYM,249, 20, 27,249,249, 26,249,249, /* DX */
   23,249,249, 30,249,249, 25,249,249,249, 33,249,249,249,249,249, /* EX */
  249, 29,249, 24,249,249,249,SYM,249, 20, 27,249,249, 26,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 23, 23, 20,SYM,SYM,249,SYM,249,SYM,249,SYM, 33,SYM, 33, 26, /* AX */
  SYM,SYM,249, 20,249,SYM,SYM,SYM,249,249,249,SYM,249,249,249, 26, /* BX */
  249, 34,249,249,249, 30,249,249,249,249,249,249,249,249,249,249, /* CX */
  249, 29,249, 24,249,249,249, 27,249,249,249,249,249, 25,249,249, /* DX */
  249, 34,249,249,249, 30,249,249,249,249,249,249,249,249,249,249, /* EX */
  249, 29,249, 24,249,249,249, 27,249,249,249,249,249, 25,249,249, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM,249,SYM, 27,249,249, 33, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,249,SYM, 27,249,249, 33, /* 9X */
  SYM,SYM,SYM, 20,SYM, 23,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM,SYM, 26, /* AX */
  SYM,SYM,SYM, 20,SYM,SYM,SYM,SYM,SYM, 23,249,SYM,249,SYM,249, 26, /* BX */
  249, 34,249,249,249,249, 30,249,249,249, 25,249,249,249,249,249, /* CX */
  249, 29,249, 24,249,249,249,SYM,249,249,249,249,249,249,249,249, /* DX */
  249, 34,249,249,249,249, 30,249,249,249, 25,249,249,249,249,249, /* EX */
  249, 29,249, 24,249,249,249,SYM,249,249,249,249,249,249,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  249,249,249,249,249,249, 30,249, 20,249,249,249,249, 33,249, 30, /* 8X */
  249,249,249,249,249,249,249, 27, 27,249,249,249,249, 20,SYM,249, /* 9X */
   34,249, 24,249, 23, 23,249,249, 25, 25,SYM, 33,249,249,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 34,249,249,249,SYM,SYM,SYM,SYM, 26, 26,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,249,249,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  249,249,249,249,249,249,249,249,249,SYM,SYM,SYM,SYM,249,249,SYM, /* DX */
   24,249,249, 29, 29,249,249,249,249,249,249,249,249,249,249,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,249,249,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Maccentraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 4X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 10, 13,  3, 28, 19, 22,  1, 18, 11, 16, 15,  4,  2, /* 6X */
   14, 35,  5,  8,  9, 17, 31,  7, 32, 12,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  249,249,249,249, 23,249,249, 34, 23,249,249,249, 30, 30,249, 33, /* 8X */
   33,249,249,249,249,249,249, 24,249,249,249,249,249,249,249,249, /* 9X */
  SYM,SYM, 25,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM, 25,SYM,SYM,249,249, /* AX */
  249,249,SYM,SYM,249,249,SYM,SYM, 20,249,249,249,249,249,249,249, /* BX */
  249, 29,SYM,SYM, 29,249,SYM,SYM,SYM,SYM,SYM,249,249,249,249,249, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,249,249,249,SYM,SYM,249,249, /* DX */
  249,249,SYM,SYM,249, 27, 27, 34,249,249,249,249,249,249, 24,249, /* EX */
  249,249,249,249,249,249,249,249,249,249,249, 26, 20, 26,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    72

static const PRUint32 Unicode_CharOrder[] =
{
   65,  0,  66, 21,  67, 10,  68, 13,  69,  3,  70, 28,  71, 19,  72, 22,
   73,  1,  74, 18,  75, 11,  76, 16,  77, 15,  78,  4,  79,  2,  80, 14,
   81, 35,  82,  5,  83,  8,  84,  9,  85, 17,  86, 31,  87,  7,  88, 32,
   89, 12,  90,  6,  97,  0,  98, 21,  99, 10, 100, 13, 101,  3, 102, 28,
  103, 19, 104, 22, 105,  1, 106, 18, 107, 11, 108, 16, 109, 15, 110,  4,
  111,  2, 112, 14, 113, 35, 114,  5, 115,  8, 116,  9, 117, 17, 118, 31,
  119,  7, 120, 32, 121, 12, 122,  6, 193, 34, 211, 24, 225, 34, 243, 24,
  260, 23, 261, 23, 262, 30, 263, 30, 280, 25, 281, 25, 321, 20, 322, 20,
  323, 29, 324, 29, 346, 27, 347, 27, 377, 33, 378, 33, 379, 26, 380, 26,
};

static const float OrderToRatio[] =
{
  0.089842567f,  0.081739664f,  0.079394337f,  0.075644599f,  0.058916197f,  0.052050915f,  0.049414987f,  0.048686529f, 
  0.044590999f,  0.039792652f,  0.039590208f,  0.035912997f,  0.035678562f,  0.030949081f,  0.029162491f,  0.026971012f, 
  0.025460860f,  0.025103347f,  0.021825164f,  0.015997746f,  0.015768439f,  0.013756449f,  0.013030434f,  0.009097543f, 
  0.008869945f,  0.008551016f,  0.005930961f,  0.005393226f,  0.004912878f,  0.002091111f,  0.002014676f,  0.001436647f, 
  0.000969975f,  0.000587553f,  0.000131625f,  0.000115264f, 
  0    /* value slot for out-of-bounds index values; range: 0..freq_count(36) */
};


/* Model Table:
 * Number of web pages processed for this model: 886
 * Number of characters consumed for this model: 4094952
 * Total considered sequences: 1688 / 1296
 *
 * - Positive sequences: first 606 (0.9950348692755507)
 * - Probable sequences: next 243 (849-606) (0.003968491032137034)
 * - Neutral sequences: last 447 (0.000996639692312229)
 * - Negative sequences: -392 (off-ratio, TODO)
 */
#define PolishUnicodeCharToOrderIsReduced  0


#define PolishFCMLowerBound  65
#define PolishFCMUpperBound  380


static const PRInt16 PolishUnicodeCharToOrder[] =
{
  0,21,10,13,3,28,19,22,1,18,11,16,15,4,2,14,35,5,8,9,
  17,31,7,32,12,6,IRR,IRR,IRR,IRR,IRR,IRR,0,21,10,13,3,28,19,22,
  1,18,11,16,15,4,2,14,35,5,8,9,17,31,7,32,12,6,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,34,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,24,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  34,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,24,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,23,23,30,30,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,25,25,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,20,20,29,29,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,27,27,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,33,33,26,26,
};



#define PolishUnicodeCharToOrderFirstTableChunkSize    58
#define PolishUnicodeCharToOrderSecondTableChunkOffset 128
#define PolishUnicodeCharToOrderSecondTableChunkSize   188


static const PRInt16 PolishUnicodeCharToOrder2[] =
{
  34,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,24,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,34,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,24,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,23,23,30,30,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,25,25,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,20,20,29,29,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,27,27,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,33,33,26,26,
};

static const PRUint8 PolishCompactedLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,2,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,1,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,3,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,3,3,3,3,3,3,3,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,0,3,3,3,3,3,3,1,3,0,0,2,2,0,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,3,2,2,3,1,3,3,0,0,2,1,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,0,2,0,0,1,1,0,2,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,1,2,3,2,2,3,3,3,1,3,1,0,0,1,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,2,0,1,3,0,0,2,1,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,2,3,2,3,3,3,3,0,1,2,0,0,2,1,0,2,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,2,2,3,3,3,3,1,3,2,3,3,3,3,0,0,1,0,0,1,1,0,1,2,
  3,3,3,3,3,3,1,3,3,3,3,3,2,2,2,3,3,3,1,2,3,2,2,3,3,3,3,2,2,0,0,2,0,0,2,1,
  3,2,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,2,3,3,3,3,2,1,1,1,3,3,3,3,3,1,1,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,1,2,0,0,2,1,3,1,0,
  3,3,3,3,3,3,2,2,3,3,3,3,3,2,3,2,3,3,1,2,3,2,3,2,3,3,0,0,2,1,0,1,1,0,1,0,
  3,3,3,3,3,3,2,2,3,2,3,3,3,2,3,3,3,3,2,2,3,3,2,3,3,3,2,2,3,0,0,2,1,0,2,1,
  3,3,3,3,3,2,2,3,3,3,3,3,3,3,2,3,3,3,2,3,1,3,2,3,2,3,2,1,3,1,0,2,1,0,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,2,0,0,0,3,2,3,3,1,2,2,2,1,1,
  3,3,3,3,3,2,2,3,3,2,3,3,2,3,3,3,3,3,1,2,1,3,1,3,3,3,1,3,1,0,0,1,0,0,2,0,
  3,3,3,3,3,3,3,3,3,2,2,2,2,3,2,3,3,3,2,2,3,2,3,3,3,3,1,0,2,0,0,1,1,0,1,1,
  3,1,3,3,3,2,2,2,2,3,3,3,3,2,3,3,1,3,0,2,2,2,1,3,3,3,2,1,3,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,3,3,2,3,3,3,2,2,2,3,3,3,1,3,3,2,3,3,3,0,0,2,0,0,1,1,0,1,0,
  3,3,3,3,3,3,2,3,2,3,3,2,3,2,2,3,3,3,1,1,3,2,2,2,3,2,1,1,2,0,0,2,0,0,1,1,
  0,0,1,0,0,0,3,2,3,3,3,3,0,3,3,1,0,0,0,3,3,3,0,1,0,0,3,1,1,0,3,0,0,1,0,0,
  0,0,0,0,2,3,3,3,3,3,3,2,0,3,2,1,3,0,3,3,3,3,0,0,0,0,3,1,1,0,2,1,0,3,0,0,
  0,1,0,0,1,0,3,1,3,3,3,3,0,3,3,1,2,0,0,3,3,3,0,0,0,0,3,3,0,0,3,0,0,2,0,0,
  3,1,3,3,3,1,0,2,3,1,3,3,3,3,1,2,3,3,0,1,1,3,1,3,2,2,0,1,0,0,0,0,0,0,0,0,
  1,0,0,0,3,3,0,3,0,0,3,1,0,0,2,3,3,0,0,0,0,1,0,0,0,0,0,1,0,1,3,0,0,0,0,0,
  3,3,3,3,2,3,1,1,2,2,2,2,2,1,1,2,3,3,1,2,1,2,1,1,2,1,0,0,3,0,0,0,1,0,1,0,
  0,0,0,0,0,0,0,0,3,0,3,2,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,0,0,0,0,3,1,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,
  3,3,3,3,2,2,1,1,2,1,1,1,2,2,2,1,1,2,1,1,0,1,1,2,0,1,0,0,1,0,0,1,0,0,2,1,
  2,3,2,2,0,1,1,1,1,2,2,0,1,1,2,1,2,1,0,0,0,1,1,1,1,1,0,0,1,0,0,3,3,0,0,0,
  1,0,0,0,3,3,0,3,1,0,2,1,0,3,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,
  0,1,0,0,2,2,1,0,2,2,1,1,0,1,1,1,2,0,0,2,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,
  1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,0,3,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,
};


const SequenceModel Iso_8859_2PolishModel =
{
  Iso_8859_2_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "ISO-8859-2",
  "pl"
};

const SequenceModel Iso_8859_13PolishModel =
{
  Iso_8859_13_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "ISO-8859-13",
  "pl"
};

const SequenceModel Iso_8859_16PolishModel =
{
  Iso_8859_16_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "ISO-8859-16",
  "pl"
};

const SequenceModel Windows_1250PolishModel =
{
  Windows_1250_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "WINDOWS-1250",
  "pl"
};

const SequenceModel Ibm852PolishModel =
{
  Ibm852_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "IBM852",
  "pl"
};

const SequenceModel MaccentraleuropePolishModel =
{
  Maccentraleurope_CharToOrderMap,
  PolishCompactedLangModel,
  PolishOrderWidth,
  0.9990033603076878f,
  PR_TRUE,
  "MacCentralEurope",
  "pl"
};

const LanguageModel PolishModel =
{
  "pl",
  Unicode_CharOrder,
  Unicode_Char_size,

  PolishFCMLowerBound,
  PolishFCMUpperBound,
  PolishUnicodeCharToOrderIsReduced,
  PolishUnicodeCharToOrder,
  PolishUnicodeCharToOrderFirstTableChunkSize,
  PolishUnicodeCharToOrderSecondTableChunkOffset,
  PolishUnicodeCharToOrderSecondTableChunkSize,
  PolishUnicodeCharToOrder2,
  OrderToRatio,
  PolishCompactedLangModel,
  PolishOrderWidth,
  6,
  0.43758827942305556f,
  24,
  0.03213493100773831f,
  0.9993826545463782f,
};
