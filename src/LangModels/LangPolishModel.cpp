/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Polish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 07:48:12.435444
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 23,SYM, 20,SYM, 80, 28,SYM,SYM, 46, 71, 74, 33,SYM, 53, 26, /* AX */
  SYM, 23,SYM, 20,SYM, 81, 28,SYM,SYM, 46, 71, 74, 33,SYM, 53, 26, /* BX */
   82, 39, 59, 68, 40, 83, 29, 45, 47, 36, 25, 55, 65, 42, 72, 84, /* CX */
   56, 30, 85, 24, 67, 66, 37,SYM, 69, 86, 43, 70, 38, 54, 75, 48, /* DX */
   87, 39, 59, 68, 40, 88, 29, 45, 47, 36, 25, 55, 65, 42, 72, 89, /* EX */
   56, 30, 90, 24, 67, 66, 37,SYM, 69, 91, 43, 70, 38, 54, 75,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 49,SYM, 92,SYM,SYM,SYM,SYM, 62, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 49,SYM, 93,SYM,SYM,SYM,SYM, 62, /* BX */
   23, 94, 58, 29, 40, 57, 25, 52, 47, 36, 33, 64, 95, 96, 51, 97, /* CX */
   46, 30, 78, 24, 35, 98, 37,SYM, 99, 20, 28, 41, 38, 26, 53, 48, /* DX */
   23,100, 58, 29, 40, 57, 25, 52, 47, 36, 33, 64,101,102, 51,103, /* EX */
   46, 30, 78, 24, 35,104, 37,SYM,105, 20, 28, 41, 38, 26, 53,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 23, 23, 20,SYM,SYM, 46,SYM, 46,SYM, 77,SYM, 33,SYM, 33, 26, /* AX */
  SYM,SYM, 47, 20, 53,SYM,SYM,SYM, 53, 47, 77,SYM,106,107,108, 26, /* BX */
   50, 39, 59, 68, 40, 29, 62, 45, 44, 36, 61, 55, 63, 42, 72, 60, /* CX */
   56, 30, 79, 24, 67, 66, 37, 28, 70, 73, 43,109, 38, 25, 76, 48, /* DX */
   50, 39, 59, 68, 40, 29, 62, 45, 44, 36, 61, 55, 63, 42, 72, 60, /* EX */
   56, 30, 79, 24, 67, 66, 37, 28, 70, 73, 43,110, 38, 25, 76,111, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 46,SYM, 28, 74, 53, 33, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 46,SYM, 28, 74, 53, 33, /* 9X */
  SYM,SYM,SYM, 20,SYM, 23,SYM,SYM,SYM,SYM, 71,SYM,SYM,SYM,SYM, 26, /* AX */
  SYM,SYM,SYM, 20,SYM,SYM,SYM,SYM,SYM, 23, 71,SYM,112,SYM,113, 26, /* BX */
  114, 39, 59, 68, 40,115, 29, 45, 47, 36, 25, 55, 65, 42, 72,116, /* CX */
   56, 30,117, 24, 67, 66, 37,SYM, 69,118, 43, 70, 38, 54, 75, 48, /* DX */
  119, 39, 59, 68, 40,120, 29, 45, 47, 36, 25, 55, 65, 42, 72,121, /* EX */
   56, 30,122, 24, 67, 66, 37,SYM, 69,123, 43, 70, 38, 54, 75,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
   45, 38, 36, 59, 40,124, 29, 45, 20, 55, 66, 66, 72, 33, 40, 29, /* 8X */
   36,125,126, 67, 37,127,128, 28, 28, 37, 38, 74, 74, 20,SYM, 47, /* 9X */
   39, 42, 24, 43, 23, 23, 53, 53, 25, 25,SYM, 33, 47, 71,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 39, 59, 65, 71,SYM,SYM,SYM,SYM, 26, 26,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 68, 68,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   56, 56,129, 55,130,131, 42, 72, 65,SYM,SYM,SYM,SYM, 75,132,SYM, /* DX */
   24, 48, 67, 30, 30,133, 46, 46,134, 43,135, 70, 54, 54, 75,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 70, 69, 69,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Maccentraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 4X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 22, 10, 13,  3, 27, 19, 21,  1, 18, 12, 17, 15,  4,  2, /* 6X */
   14, 34,  5,  8,  9, 16, 31,  7, 32, 11,  6,SYM,SYM,SYM,SYM,CTR, /* 7X */
   40, 58, 58, 36, 23, 37, 38, 39, 23, 47, 40, 47, 29, 29, 36, 33, /* 8X */
   33,136, 42,137, 52, 52, 64, 24, 64, 67, 37,138, 43, 65, 65, 38, /* 9X */
  SYM,SYM, 25,SYM,SYM,SYM,SYM, 48,SYM,SYM,SYM, 25,SYM,SYM,139,140, /* AX */
  141, 51,SYM,SYM, 51,142,SYM,SYM, 20,143,144,145,146,147,148, 78, /* BX */
   78, 30,SYM,SYM, 30,149,SYM,SYM,SYM,SYM,SYM,150, 66,151, 66, 35, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 35,152,153, 69,SYM,SYM, 69,154, /* DX */
  155, 46,SYM,SYM, 46, 28, 28, 39, 74, 74, 42, 53, 53, 41, 24, 67, /* EX */
   41,156, 43,157, 70, 70,158,159, 54, 54,160, 26, 20, 26,161,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 70;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 22, 67, 10, 68, 13, 69,  3, 70, 27, 71, 19,72, 21,
  73,  1, 74, 18, 75, 12, 76, 17, 77, 15, 78,  4, 79,  2,80, 14,
  81, 34, 82,  5, 83,  8, 84,  9, 85, 16, 86, 31, 87,  7,88, 32,
  89, 11, 90,  6, 97,  0, 98, 22, 99, 10, 100, 13, 101,  3,102, 27,
  103, 19, 104, 21, 105,  1, 106, 18, 107, 12, 108, 17, 109, 15,110,  4,
  111,  2, 112, 14, 113, 34, 114,  5, 115,  8, 116,  9, 117, 16,118, 31,
  119,  7, 120, 32, 121, 11, 122,  6, 211, 24, 243, 24, 260, 23,261, 23,
  262, 29, 263, 29, 280, 25, 281, 25, 321, 20, 322, 20, 323, 30,324, 30,
  346, 28, 347, 28, 377, 33, 378, 33, 379, 26, 380, 26,
};


/* Model Table:
 * Total considered sequences: 1382 / 1225
 * - Positive sequences: first 587 (0.9950131525789636)
 * - Probable sequences: next 182 (769-587) (0.003988848532721412)
 * - Neutral sequences: last 456 (0.000997998888314977)
 * - Negative sequences: -157 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 PolishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,2,3,2,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,3,3,3,2,3,3,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,0,3,3,3,3,3,3,3,1,0,0,2,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,2,3,2,2,1,2,0,0,1,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,1,1,1,0,0,1,1,0,1,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,3,2,1,3,2,2,3,3,3,1,1,3,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,2,0,3,0,0,0,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,2,2,3,3,2,3,3,3,0,2,0,0,0,2,1,0,1,
  3,3,3,3,3,3,3,2,2,3,3,3,3,3,1,3,3,3,3,1,2,3,2,3,3,3,0,1,0,0,0,2,1,0,2,
  3,2,3,3,3,3,3,3,3,3,3,1,3,3,3,3,2,3,3,3,3,2,3,1,1,1,3,3,3,3,3,1,1,2,0,
  3,3,3,3,3,3,1,3,3,3,3,2,3,1,2,3,3,3,1,2,3,2,2,3,3,3,3,2,1,0,0,2,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,1,0,0,2,0,3,0,
  3,3,3,3,3,3,2,2,3,3,3,3,3,1,3,2,3,3,1,1,3,3,2,2,3,3,0,2,1,0,1,1,1,0,0,
  3,3,3,3,3,3,1,2,3,2,3,3,3,2,3,3,3,3,1,2,3,2,3,2,3,3,1,2,2,0,0,2,1,0,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,2,3,1,0,1,3,2,2,1,2,2,2,1,1,
  3,3,3,3,3,2,2,3,3,3,3,3,3,3,2,3,3,3,2,3,0,2,3,3,2,3,2,3,1,0,1,3,1,0,1,
  3,3,3,3,3,2,1,3,3,2,3,1,3,3,3,3,3,3,1,2,1,1,3,3,3,3,1,1,3,0,0,1,0,0,0,
  3,3,3,3,3,3,3,3,2,2,1,2,2,3,2,3,3,3,1,2,3,3,3,3,3,3,1,2,0,0,0,1,1,0,1,
  3,1,3,3,3,2,2,2,2,3,3,3,3,2,3,2,3,0,0,2,1,1,2,3,3,3,2,2,0,1,0,0,0,0,0,
  3,3,3,3,3,3,2,3,2,3,3,3,2,2,1,2,3,3,1,1,3,2,3,2,3,2,1,1,2,0,0,2,1,0,1,
  3,3,3,3,3,3,1,2,3,2,3,3,3,2,1,2,3,3,3,1,3,2,2,3,3,3,0,3,1,1,0,1,0,0,0,
  0,0,1,0,0,0,3,2,3,3,3,0,2,3,3,0,0,0,0,3,3,0,2,0,0,0,3,0,1,2,0,0,0,1,0,
  0,0,0,0,2,3,2,3,3,3,3,0,2,3,2,1,0,3,3,2,3,0,3,0,0,0,3,0,1,0,0,0,0,3,0,
  0,1,0,0,1,0,3,1,3,3,3,0,3,3,3,0,0,2,0,3,3,0,3,0,0,0,3,0,3,3,0,0,0,2,0,
  3,2,3,3,3,0,0,2,3,0,3,3,3,3,0,1,3,3,1,0,0,0,2,3,2,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,1,3,0,1,2,3,2,2,1,1,1,2,3,3,1,2,1,1,2,1,1,1,0,3,0,0,0,1,1,0,0,
  1,0,0,0,3,3,0,3,0,1,3,0,1,0,2,3,0,3,0,0,0,0,1,0,0,0,0,0,0,3,1,0,0,0,0,
  0,0,1,1,0,0,0,2,1,0,0,0,0,1,0,2,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,1,3,1,3,0,2,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,1,1,1,1,2,0,1,2,1,2,2,1,2,1,1,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,1,
  2,3,2,2,1,1,1,1,1,2,1,1,0,0,2,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,0,3,3,0,0,
  1,0,0,0,3,3,0,2,1,0,2,0,0,3,0,2,0,2,0,1,0,0,2,0,0,0,0,0,0,2,1,0,0,0,0,
  1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,
};


const SequenceModel Iso_8859_2PolishModel =
{
  Iso_8859_2_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "ISO-8859-2",
  "pl"
};

const SequenceModel Iso_8859_13PolishModel =
{
  Iso_8859_13_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "ISO-8859-13",
  "pl"
};

const SequenceModel Iso_8859_16PolishModel =
{
  Iso_8859_16_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "ISO-8859-16",
  "pl"
};

const SequenceModel Windows_1250PolishModel =
{
  Windows_1250_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "WINDOWS-1250",
  "pl"
};

const SequenceModel Ibm852PolishModel =
{
  Ibm852_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "IBM852",
  "pl"
};

const SequenceModel MaccentraleuropePolishModel =
{
  Maccentraleurope_CharToOrderMap,
  PolishLangModel,
  35,
  (float)0.999002001111685,
  PR_TRUE,
  "MacCentralEurope",
  "pl"
};

const LanguageModel PolishModel =
{
  "pl",
  Unicode_CharOrder,
  70,
  PolishLangModel,
  35,
  6,
  (float)0.4410078944164801,
  24,
  (float)0.03157104974832081,
  (float)0.999573918520518,
};
