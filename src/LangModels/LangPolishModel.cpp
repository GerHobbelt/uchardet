/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Polish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:27:15.211093
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24,SYM, 19,SYM, 84, 28,SYM,SYM, 42, 72, 85, 33,SYM, 44, 26, /* AX */
  SYM, 24,SYM, 19,SYM, 86, 28,SYM,SYM, 42, 72, 87, 33,SYM, 44, 26, /* BX */
   88, 35, 65, 52, 41, 89, 30, 46, 43, 34, 23, 56, 47, 38, 75, 90, /* CX */
   63, 29, 70, 25, 61, 78, 39,SYM, 51, 76, 55, 91, 37, 54, 77, 53, /* DX */
   92, 35, 65, 52, 41, 93, 30, 46, 43, 34, 23, 56, 47, 38, 75, 94, /* EX */
   63, 29, 70, 25, 61, 78, 39,SYM, 51, 76, 55, 95, 37, 54, 77,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 40,SYM, 96,SYM,SYM,SYM,SYM, 50, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 40,SYM, 97,SYM,SYM,SYM,SYM, 50, /* BX */
   24, 98, 58, 30, 41, 48, 23, 62, 43, 34, 33, 64, 82, 99, 71,100, /* CX */
   42, 29, 74, 25, 49, 68, 39,SYM,101, 19, 28, 57, 37, 26, 44, 53, /* DX */
   24,102, 58, 30, 41, 48, 23, 62, 43, 34, 33, 64, 82,103, 71,104, /* EX */
   42, 29, 74, 25, 49, 68, 39,SYM,105, 19, 28, 57, 37, 26, 44,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24, 24, 19,SYM,SYM, 42,SYM, 42,SYM, 73,SYM, 33,SYM, 33, 26, /* AX */
  SYM,SYM, 43, 19, 44,SYM,SYM,SYM, 44, 43, 73,SYM, 80, 80, 81, 26, /* BX */
   66, 35, 65, 52, 41, 30, 50, 46, 45, 34, 59, 56,106, 38, 75, 69, /* CX */
   63, 29, 67, 25, 61, 78, 39, 28,107, 79, 55, 83, 37, 23, 60, 53, /* DX */
   66, 35, 65, 52, 41, 30, 50, 46, 45, 34, 59, 56,108, 38, 75, 69, /* EX */
   63, 29, 67, 25, 61, 78, 39, 28,109, 79, 55, 83, 37, 23, 60, 81, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 42,SYM, 28,110, 44, 33, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 42,SYM, 28,111, 44, 33, /* 9X */
  SYM,SYM,SYM, 19,SYM, 24,SYM,SYM,SYM,SYM, 72,SYM,SYM,SYM,SYM, 26, /* AX */
  SYM,SYM,SYM, 19,SYM,SYM,SYM,SYM,SYM, 24, 72,SYM,112,SYM,113, 26, /* BX */
  114, 35, 65, 52, 41,115, 30, 46, 43, 34, 23, 56, 47, 38, 75,116, /* CX */
   63, 29, 70, 25, 61, 78, 39,SYM, 51, 76, 55,117, 37, 54, 77, 53, /* DX */
  118, 35, 65, 52, 41,119, 30, 46, 43, 34, 23, 56, 47, 38, 75,120, /* EX */
   63, 29, 70, 25, 61, 78, 39,SYM, 51, 76, 55,121, 37, 54, 77,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
   46, 37, 34, 65, 41, 76, 30, 46, 19, 56, 78, 78, 75, 33, 41, 30, /* 8X */
   34,122,123, 61, 39,124,125, 28, 28, 39, 37,126,127, 19,SYM, 43, /* 9X */
   35, 38, 25, 55, 24, 24, 44, 44, 23, 23,SYM, 33, 43, 72,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 35, 65, 47, 72,SYM,SYM,SYM,SYM, 26, 26,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 52, 52,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   63, 63,128, 56,129, 70, 38, 75, 47,SYM,SYM,SYM,SYM, 77, 76,SYM, /* DX */
   25, 53, 61, 29, 29, 70, 42, 42,130, 55,131,132, 54, 54, 77,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,133, 51, 51,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 4X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 11, 14,  3, 27, 20, 22,  1, 18,  8, 16, 15,  4,  2, /* 6X */
   13, 36,  5,  6, 10, 17, 31,  9, 32, 12,  7,SYM,SYM,SYM,SYM,CTR, /* 7X */
   41, 58, 58, 34, 24, 39, 37, 35, 24, 43, 41, 43, 30, 30, 34, 33, /* 8X */
   33,134, 38,135, 62, 62, 64, 25, 64, 61, 39, 68, 55, 47, 47, 37, /* 9X */
  SYM,SYM, 23,SYM,SYM,SYM,SYM, 53,SYM,SYM,SYM, 23,SYM,SYM, 82,136, /* AX */
  137, 71,SYM,SYM, 71,138,SYM,SYM, 19,139,140,141,142,143,144, 74, /* BX */
   74, 29,SYM,SYM, 29, 70,SYM,SYM,SYM,SYM,SYM, 70, 78, 68, 78, 49, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 49,145,146, 51,SYM,SYM, 51,147, /* DX */
  148, 42,SYM,SYM, 42, 28, 28, 35,149,150, 38, 44, 44, 57, 25, 61, /* EX */
   57, 76, 55, 76,151,152,153,154, 54, 54,155, 26, 19, 26, 82,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 74;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 21,  67, 11,  68, 14,  69,  3,  70, 27,  71, 20, 72, 22,
   73,  1,  74, 18,  75,  8,  76, 16,  77, 15,  78,  4,  79,  2, 80, 13,
   81, 36,  82,  5,  83,  6,  84, 10,  85, 17,  86, 31,  87,  9, 88, 32,
   89, 12,  90,  7,  97,  0,  98, 21,  99, 11, 100, 14, 101,  3,102, 27,
  103, 20, 104, 22, 105,  1, 106, 18, 107,  8, 108, 16, 109, 15,110,  4,
  111,  2, 112, 13, 113, 36, 114,  5, 115,  6, 116, 10, 117, 17,118, 31,
  119,  9, 120, 32, 121, 12, 122,  7, 193, 35, 201, 34, 211, 25,225, 35,
  233, 34, 243, 25, 260, 24, 261, 24, 262, 30, 263, 30, 280, 23,281, 23,
  321, 19, 322, 19, 323, 29, 324, 29, 346, 28, 347, 28, 377, 33,378, 33,
  379, 26, 380, 26,
};


/* Model Table:
 * Total considered sequences: 1469 / 1369
 * - Positive sequences: first 603 (0.9950009015061881)
 * - Probable sequences: next 297 (900-603) (0.004003405092029788)
 * - Neutral sequences: last 469 (0.0009956934017820718)
 * - Negative sequences: -100 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 PolishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,2,3,0,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,1,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,2,2,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,3,3,3,3,3,3,3,3,0,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,0,3,3,3,3,3,3,3,3,1,0,0,2,1,0,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,0,2,2,0,0,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,2,3,3,1,3,0,0,0,2,0,0,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,2,0,0,0,1,0,0,1,2,1,
  3,3,3,3,3,3,3,1,3,3,3,3,3,2,2,3,3,3,2,3,2,2,2,3,3,3,3,2,1,0,0,1,1,0,2,2,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,1,3,2,2,2,3,3,3,0,1,3,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,2,3,2,2,3,3,3,3,1,2,0,0,1,2,1,0,2,2,0,
  3,3,3,3,3,3,2,3,3,2,3,3,3,1,2,3,3,3,3,3,2,1,3,3,3,3,0,2,0,0,0,1,1,0,2,1,2,
  3,2,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,2,3,3,3,3,2,0,1,0,3,3,3,3,3,1,1,2,1,1,0,
  3,3,3,3,3,3,3,2,3,2,3,3,3,3,1,2,3,3,1,3,1,2,3,3,2,3,0,2,0,0,0,1,0,0,2,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,1,0,0,2,0,3,2,1,1,
  3,3,3,3,3,2,3,1,3,2,2,3,3,3,2,3,3,3,1,2,2,3,2,3,2,3,1,2,2,0,0,1,0,0,2,2,1,
  3,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,3,3,2,0,3,3,3,3,3,3,2,3,1,1,0,3,1,0,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,2,1,0,0,3,3,3,3,1,2,2,2,1,1,1,
  3,3,3,3,3,2,3,2,3,3,2,3,1,3,3,3,2,3,2,2,2,3,1,3,3,3,1,1,3,0,1,1,0,0,1,2,0,
  3,1,3,3,3,2,2,2,3,3,3,3,3,2,3,2,1,3,0,2,3,2,1,3,3,3,2,1,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,2,2,2,2,3,3,3,3,2,3,2,2,3,3,3,3,0,2,0,0,0,2,1,0,1,2,1,
  3,3,3,3,3,3,3,1,3,3,2,3,3,1,2,1,3,3,3,3,1,2,2,3,3,3,1,2,0,0,0,1,0,0,2,1,1,
  3,3,3,3,3,3,2,2,2,3,3,3,3,2,2,3,3,3,1,3,1,2,2,2,2,3,1,1,2,0,0,2,0,0,2,1,0,
  0,0,0,0,0,0,3,3,3,1,3,3,0,3,3,0,3,0,1,3,3,3,0,0,0,0,3,0,3,0,3,0,0,1,0,0,0,
  0,0,0,0,0,0,3,3,2,2,3,3,0,3,3,0,0,0,0,3,3,2,0,0,0,0,3,0,1,0,3,0,0,1,0,0,0,
  0,0,0,0,2,3,3,3,2,3,3,3,1,2,3,1,3,0,3,3,2,3,1,0,0,0,3,0,0,1,0,1,0,3,0,0,0,
  3,2,3,3,3,0,3,0,3,2,0,2,3,0,3,2,3,3,0,0,0,3,0,3,3,2,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,2,1,2,1,3,2,3,2,1,2,3,3,2,2,2,1,1,1,2,2,0,3,0,0,0,1,0,0,2,0,0,
  1,1,0,0,3,3,0,0,2,3,0,3,0,2,0,3,3,0,0,0,0,1,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,
  0,0,0,0,0,0,3,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,1,1,0,0,0,2,2,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,2,2,0,0,1,1,2,2,2,1,1,2,2,2,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,2,0,
  2,3,2,2,0,0,1,0,0,1,2,1,1,2,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,3,3,0,0,0,0,
  0,1,0,0,3,3,1,0,1,2,0,2,0,0,3,1,2,0,0,0,0,3,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,
  2,1,2,1,2,2,2,0,1,0,2,2,0,1,2,2,2,0,0,0,1,2,1,0,0,0,0,1,0,0,0,2,0,0,0,0,0,
  0,1,0,0,3,2,2,2,2,0,1,2,0,1,1,1,2,1,0,0,1,2,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,
  1,2,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,
};


const SequenceModel Iso_8859_2PolishModel =
{
  Iso_8859_2_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "ISO-8859-2",
  "pl"
};

const SequenceModel Iso_8859_13PolishModel =
{
  Iso_8859_13_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "ISO-8859-13",
  "pl"
};

const SequenceModel Iso_8859_16PolishModel =
{
  Iso_8859_16_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "ISO-8859-16",
  "pl"
};

const SequenceModel Windows_1250PolishModel =
{
  Windows_1250_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "WINDOWS-1250",
  "pl"
};

const SequenceModel Ibm852PolishModel =
{
  Ibm852_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "IBM852",
  "pl"
};

const SequenceModel Mac_CentraleuropePolishModel =
{
  Mac_Centraleurope_CharToOrderMap,
  PolishLangModel,
  37,
  (float)0.9990043065982179,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "pl"
};

const LanguageModel PolishModel =
{
  "pl",
  Unicode_CharOrder,
  74,
  PolishLangModel,
  37,
  5,
  (float)0.38580674970932544,
  24,
  (float)0.030099113395268155,
};
