/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Irish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 02:46:04.793926
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 4X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 6X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 44,SYM, 45,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 36, 46,SYM,SYM, 36,SYM,SYM,SYM, 47, 48, 49,SYM, /* BX */
   43, 21, 50, 51, 33, 52, 39, 53, 40, 23, 42, 54, 55, 20, 56, 57, /* CX */
   37, 38, 58, 25, 35, 59, 32,SYM, 60, 61, 26, 34, 31, 62, 63, 41, /* DX */
   43, 21, 64, 65, 33, 66, 39, 67, 40, 23, 42, 68, 69, 20, 70, 71, /* EX */
   37, 38, 72, 25, 35, 73, 32,SYM, 74, 75, 26, 34, 31, 76, 77, 78, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 4X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 6X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 79,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   43, 21, 80, 81, 33, 82, 39, 83, 40, 23, 42, 84, 85, 20, 86, 87, /* CX */
   37, 38, 88, 25, 35, 89, 32,SYM, 90, 91, 26, 34, 31, 92, 93, 41, /* DX */
   43, 21, 94, 95, 33, 96, 39, 97, 40, 23, 42, 98, 99, 20,100,101, /* EX */
   37, 38,102, 25, 35,103, 32,SYM,104,105, 26, 34, 31,106,107,108, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 4X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 6X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,109,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   43, 21,110,111, 33,112, 39,113, 40, 23, 42,114,115, 20,116,117, /* CX */
  118, 38,119, 25, 35,120, 32,SYM,121,122, 26, 34, 31,123,124, 41, /* DX */
   43, 21,125,126, 33,127, 39,128, 40, 23, 42,129,130, 20,131,132, /* EX */
  133, 38,134, 25, 35,135, 32,SYM,136,137, 26, 34, 31,138,139,140, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 4X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 17,  9, 11,  1, 16, 14, 10,  2, 27, 22,  8, 12,  3,  7, /* 6X */
   15, 30,  4,  5,  6, 13, 19, 24, 28, 18, 29,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,141,SYM,SYM,SYM,SYM,SYM,SYM,142,SYM,143,ILL, 36,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,144,SYM,145,ILL, 36,146, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,147,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   43, 21,148,149, 33,150, 39,151, 40, 23, 42,152,153, 20,154,155, /* CX */
   37, 38,156, 25, 35,157, 32,SYM,158,159, 26, 34, 31,160,161, 41, /* DX */
   43, 21,162,163, 33,164, 39,165, 40, 23, 42,166,167, 20,168,169, /* EX */
   37, 38,170, 25, 35,171, 32,SYM,172,173, 26, 34, 31,174,175,176, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 62;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 17, 67,  9, 68, 11, 69,  1, 70, 16, 71, 14,72, 10,
  73,  2, 74, 27, 75, 22, 76,  8, 77, 12, 78,  3, 79,  7,80, 15,
  81, 30, 82,  4, 83,  5, 84,  6, 85, 13, 86, 19, 87, 24,88, 28,
  89, 18, 90, 29, 97,  0, 98, 17, 99,  9, 100, 11, 101,  1,102, 16,
  103, 14, 104, 10, 105,  2, 106, 27, 107, 22, 108,  8, 109, 12,110,  3,
  111,  7, 112, 15, 113, 30, 114,  4, 115,  5, 116,  6, 117, 13,118, 19,
  119, 24, 120, 28, 121, 18, 122, 29, 193, 21, 201, 23, 205, 20,211, 25,
  218, 26, 225, 21, 233, 23, 237, 20, 243, 25, 250, 26,
};


/* Model Table:
 * Total considered sequences: 777 / 961
 * - Positive sequences: first 469 (0.9950649366494031)
 * - Probable sequences: next 115 (584-469) (0.003937680337219196)
 * - Neutral sequences: last 377 (0.0009973830133777062)
 * - Negative sequences: 184 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 IrishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,0,2,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,1,3,2,0,2,3,2,3,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,0,1,3,1,0,2,3,2,3,3,2,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,3,3,1,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,0,0,1,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,2,3,3,1,3,3,3,3,0,0,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,1,3,0,1,2,2,2,0,
  3,3,3,2,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,1,
  3,3,3,3,3,3,3,3,3,3,3,1,2,3,2,1,1,2,3,1,2,3,3,3,2,3,3,1,0,2,3,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,2,2,3,3,3,3,3,3,2,3,2,3,3,0,0,0,0,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,3,3,3,1,3,3,3,3,3,1,2,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,2,3,3,1,3,3,1,3,1,3,2,1,1,0,1,
  3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,2,2,3,1,3,0,1,0,1,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,0,2,2,3,0,2,2,1,2,1,2,1,1,1,0,1,
  3,3,3,2,3,3,3,3,3,2,3,1,3,3,1,3,1,2,2,0,2,3,1,3,1,3,1,0,0,1,0,
  3,3,3,1,3,3,3,3,3,1,3,0,2,3,1,0,3,1,2,0,3,3,1,3,0,3,0,0,0,0,0,
  3,3,3,2,3,3,2,3,3,2,3,2,2,3,1,3,0,3,3,0,3,3,1,3,1,2,1,2,0,0,0,
  3,3,2,3,3,3,2,3,3,3,1,3,3,3,2,3,1,2,0,1,0,0,2,0,2,0,0,0,1,1,0,
  3,3,3,1,1,2,0,3,1,0,0,1,0,1,0,1,0,0,2,0,2,1,0,1,0,1,0,0,0,0,0,
  2,0,1,3,3,3,3,3,3,3,0,2,1,0,1,0,1,3,0,1,0,0,0,0,0,0,2,0,0,0,0,
  0,1,3,3,3,3,3,0,3,3,0,2,3,0,2,1,2,3,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,3,0,2,1,2,3,1,1,2,2,3,1,1,0,2,0,2,0,0,1,1,0,0,
  3,0,3,1,2,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,
  3,3,3,3,3,3,1,3,2,1,3,1,1,1,0,0,1,2,2,0,0,0,1,0,3,0,0,0,0,0,0,
  0,0,3,3,3,3,3,0,3,2,0,2,3,0,3,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,3,3,3,3,1,1,3,3,0,3,1,0,2,3,0,2,0,0,1,0,0,0,0,0,1,0,0,0,0,
  3,3,3,0,2,1,1,3,1,0,0,0,1,3,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,
  3,3,2,1,0,1,3,1,2,3,1,0,1,2,1,3,2,0,1,1,0,0,0,0,1,0,0,0,2,1,0,
  3,3,3,0,1,0,1,3,1,1,1,0,2,3,1,0,1,1,2,0,0,0,1,0,2,0,0,0,0,2,0,
  1,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,
};


const SequenceModel Iso_8859_15IrishModel =
{
  Iso_8859_15_CharToOrderMap,
  IrishLangModel,
  31,
  (float)0.9990026169866223,
  PR_TRUE,
  "ISO-8859-15",
  "ga"
};

const SequenceModel Iso_8859_1IrishModel =
{
  Iso_8859_1_CharToOrderMap,
  IrishLangModel,
  31,
  (float)0.9990026169866223,
  PR_TRUE,
  "ISO-8859-1",
  "ga"
};

const SequenceModel Iso_8859_9IrishModel =
{
  Iso_8859_9_CharToOrderMap,
  IrishLangModel,
  31,
  (float)0.9990026169866223,
  PR_TRUE,
  "ISO-8859-9",
  "ga"
};

const SequenceModel Windows_1252IrishModel =
{
  Windows_1252_CharToOrderMap,
  IrishLangModel,
  31,
  (float)0.9990026169866223,
  PR_TRUE,
  "WINDOWS-1252",
  "ga"
};

const LanguageModel IrishModel =
{
  "ga",
  Unicode_CharOrder,
  62,
  IrishLangModel,
  31,
  5,
  (float)0.4519318049719152,
  20,
  (float)0.030236624776471575,
  (float)0.9998590194182202,
};
