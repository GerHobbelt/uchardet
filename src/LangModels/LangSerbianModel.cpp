/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Serbian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 08:11:33.801518
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 20, 48, 40, 39, 21, 49, 47, 43, 23, 45, 44, 35, 37, 28, 25, /* 4X */
   41, 55, 30, 31, 29, 38, 46, 52, 54, 51, 50,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 20, 48, 40, 39, 21, 49, 47, 43, 23, 45, 44, 35, 37, 28, 25, /* 6X */
   41, 55, 30, 31, 29, 38, 46, 52, 54, 51, 50,SYM,SYM,SYM,SYM,CTR, /* 7X */
   42, 57,SYM, 58,SYM,SYM,SYM,SYM,SYM,SYM, 32,SYM, 24, 59, 36, 53, /* 8X */
   42,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 32,SYM, 24, 60, 36, 53, /* 9X */
  SYM, 61, 62, 10,SYM, 63,SYM,SYM, 64,SYM, 65,SYM,SYM,SYM,SYM, 66, /* AX */
  SYM,SYM, 67, 68, 69,SYM,SYM,SYM, 70,SYM, 71,SYM, 10, 72, 73, 74, /* BX */
    0, 18, 11, 17, 13,  2, 34, 16,  1, 75,  9, 14, 12,  4,  3, 15, /* CX */
    5,  6,  7,  8, 33, 27, 22, 19, 26, 76, 77, 78, 79, 80, 81, 56, /* DX */
    0, 18, 11, 17, 13,  2, 34, 16,  1, 82,  9, 14, 12,  4,  3, 15, /* EX */
    5,  6,  7,  8, 33, 27, 22, 19, 26, 83, 84, 85, 86, 87, 88, 56, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 20, 48, 40, 39, 21, 49, 47, 43, 23, 45, 44, 35, 37, 28, 25, /* 4X */
   41, 55, 30, 31, 29, 38, 46, 52, 54, 51, 50,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 20, 48, 40, 39, 21, 49, 47, 43, 23, 45, 44, 35, 37, 28, 25, /* 6X */
   41, 55, 30, 31, 29, 38, 46, 52, 54, 51, 50,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 89, 42, 90, 91, 92, 93, 94, 10, 32, 24, 36, 95,SYM, 96, 53, /* AX */
    0, 18, 11, 17, 13,  2, 34, 16,  1, 97,  9, 14, 12,  4,  3, 15, /* BX */
    5,  6,  7,  8, 33, 27, 22, 19, 26, 98, 99,100,101,102,103, 56, /* CX */
    0, 18, 11, 17, 13,  2, 34, 16,  1,104,  9, 14, 12,  4,  3, 15, /* DX */
    5,  6,  7,  8, 33, 27, 22, 19, 26,105,106,107,108,109,110, 56, /* EX */
  SYM,111, 42,112,113,114,115,116, 10, 32, 24, 36,117,SYM,118, 53, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 108;
static const unsigned int Unicode_CharOrder[] =
{
  65, 20, 66, 48, 67, 40, 68, 39, 69, 21, 70, 49, 71, 47,72, 43,
  73, 23, 74, 45, 75, 44, 76, 35, 77, 37, 78, 28, 79, 25,80, 41,
  82, 30, 83, 31, 84, 29, 85, 38, 86, 46, 87, 52, 89, 51,90, 50,
  97, 20, 98, 48, 99, 40, 100, 39, 101, 21, 102, 49, 103, 47,104, 43,
  105, 23, 106, 45, 107, 44, 108, 35, 109, 37, 110, 28, 111, 25,112, 41,
  114, 30, 115, 31, 116, 29, 117, 38, 118, 46, 119, 52, 121, 51,122, 50,
  1026, 42, 1032, 10, 1033, 32, 1034, 24, 1035, 36, 1039, 53, 1040,  0,1041, 18,
  1042, 11, 1043, 17, 1044, 13, 1045,  2, 1046, 34, 1047, 16, 1048,  1,1050,  9,
  1051, 14, 1052, 12, 1053,  4, 1054,  3, 1055, 15, 1056,  5, 1057,  6,1058,  7,
  1059,  8, 1060, 33, 1061, 27, 1062, 22, 1063, 19, 1064, 26, 1072,  0,1073, 18,
  1074, 11, 1075, 17, 1076, 13, 1077,  2, 1078, 34, 1079, 16, 1080,  1,1082,  9,
  1083, 14, 1084, 12, 1085,  4, 1086,  3, 1087, 15, 1088,  5, 1089,  6,1090,  7,
  1091,  8, 1092, 33, 1093, 27, 1094, 22, 1095, 19, 1096, 26, 1106, 42,1112, 10,
  1113, 32, 1114, 24, 1115, 36, 1119, 53,
};


/* Model Table:
 * Total considered sequences: 1260 / 2916
 * - Positive sequences: first 750 (0.9950043179885425)
 * - Probable sequences: next 197 (947-750) (0.004004192733913059)
 * - Neutral sequences: last 1969 (0.000991489277544444)
 * - Negative sequences: 1656 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SerbianLangModel[] =
{
  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,3,0,3,0,3,3,1,0,0,0,3,3,3,0,3,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,1,0,2,
  3,1,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,0,1,3,0,3,0,3,3,0,1,0,0,3,3,3,0,3,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,0,0,2,
  3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,3,0,3,1,3,3,0,0,0,0,3,3,3,0,3,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,3,3,0,0,1,0,3,3,3,0,3,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,1,3,3,3,3,3,2,3,2,3,2,3,3,3,3,3,0,0,3,0,0,1,2,2,0,0,0,0,2,3,2,0,0,0,0,0,
   0,0,2,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,3,3,0,0,0,0,3,3,3,0,2,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,3,0,1,2,0,0,0,3,0,0,0,0,3,0,0,0,0,2,3,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,2,1,2,1,1,0,2,0,3,0,0,3,0,0,0,0,3,3,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,0,1,3,0,3,0,3,3,1,0,0,0,3,2,3,0,3,0,0,0,
   0,0,3,1,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,1,1,3,3,1,3,1,0,1,1,1,0,1,3,0,3,0,2,1,0,0,0,0,3,1,0,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,3,0,0,2,0,1,0,2,2,0,0,0,0,0,2,1,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,1,3,3,3,1,1,3,3,3,0,3,2,1,0,0,3,0,1,0,3,1,0,0,0,0,3,0,0,0,0,0,0,0,
   0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,2,3,3,1,2,3,3,0,1,3,2,0,0,3,0,2,0,1,0,0,0,0,0,3,2,0,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,1,3,1,3,3,3,0,3,2,2,3,3,0,0,0,1,0,3,0,2,1,0,0,0,0,3,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,0,3,3,3,3,1,2,3,3,1,2,2,3,3,1,0,1,2,0,1,0,1,2,0,0,0,0,0,3,1,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,0,0,0,1,2,0,0,3,0,1,0,3,2,0,0,0,0,3,0,0,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,0,1,3,0,3,3,3,3,3,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,2,3,1,0,3,3,3,3,1,2,1,2,1,0,0,1,0,1,0,0,1,0,0,0,0,3,1,0,0,1,0,0,0,
   0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,1,3,1,3,2,1,3,3,0,3,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,0,1,0,3,3,3,3,2,3,3,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,3,0,3,0,3,0,0,3,3,3,3,0,0,0,3,0,3,3,3,
   3,3,0,3,3,3,3,3,3,3,3,3,2,0,
  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,3,0,3,0,0,3,3,3,3,0,0,0,3,0,3,3,3,
   3,3,0,2,3,2,3,3,3,3,3,3,3,0,
  3,3,3,3,2,3,1,1,3,2,2,3,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,3,3,3,0,0,0,3,0,3,3,3,
   3,3,0,3,3,3,3,3,3,3,3,2,0,0,
  3,3,3,3,0,0,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,2,0,3,0,3,0,0,3,3,3,3,0,0,0,3,0,3,3,3,
   3,3,0,2,3,3,3,3,3,3,3,1,3,0,
  3,3,3,3,3,1,0,3,3,3,0,2,1,0,3,3,0,0,0,2,0,0,2,0,3,0,0,1,0,0,0,0,3,0,0,0,3,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,1,3,3,1,1,3,2,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,3,1,3,0,0,0,2,0,2,3,3,
   3,1,0,2,3,3,2,3,2,3,2,2,1,0,
  0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,3,3,0,3,0,3,0,0,3,3,3,3,0,0,0,2,0,2,3,1,
   2,2,0,3,3,1,3,1,2,1,2,3,2,0,
  0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,3,3,0,3,0,3,0,0,3,3,3,3,0,0,0,3,0,3,3,3,
   3,3,0,2,3,1,3,3,2,1,1,3,1,0,
  1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,3,3,0,3,0,3,0,0,3,3,2,3,0,0,0,3,0,3,3,1,
   3,3,0,3,3,2,3,1,3,2,0,2,1,0,
  3,3,3,3,3,0,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,1,0,0,1,1,3,0,0,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,2,0,0,3,0,3,1,1,2,2,0,0,0,3,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
   0,0,3,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,3,1,3,0,0,0,3,0,3,3,3,
   2,2,0,1,2,3,2,2,2,2,1,3,2,0,
  3,3,3,2,3,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,2,1,1,3,0,0,0,2,0,3,3,2,
   2,3,0,1,0,1,0,2,3,2,1,3,1,0,
  1,0,0,1,0,1,2,1,0,0,0,0,0,1,1,1,0,0,1,0,3,3,0,3,0,2,0,1,3,3,3,3,0,0,0,3,0,3,1,3,
   3,3,0,2,3,3,2,3,3,2,3,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,1,3,3,0,0,0,2,0,2,3,2,
   1,1,0,2,1,1,3,2,2,3,0,2,2,0,
  1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,3,3,1,3,0,3,0,1,1,3,3,3,0,0,0,3,0,2,3,1,
   2,1,0,3,3,1,1,1,1,1,0,3,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,2,3,3,3,0,0,0,3,0,2,3,3,
   2,2,0,3,0,1,0,2,1,0,0,1,1,0,
  3,3,3,2,1,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,3,2,2,0,0,0,2,0,2,3,1,
   1,1,0,1,1,1,2,0,1,1,2,3,1,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,3,0,3,0,3,0,0,2,3,3,3,0,1,0,3,0,3,3,1,
   2,0,0,2,1,1,2,2,1,0,0,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,2,1,1,3,0,0,0,1,0,1,3,1,
   1,1,0,0,1,1,1,0,2,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,0,3,0,3,0,0,3,1,3,2,0,0,0,3,0,0,3,2,
   1,1,0,0,1,0,0,1,0,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,0,3,0,3,0,0,3,1,3,2,0,0,0,3,0,1,3,2,
   0,1,0,3,0,0,1,2,1,1,0,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,1,3,2,0,0,0,3,0,2,3,1,
   2,1,0,1,0,1,0,0,1,0,1,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,0,2,3,1,0,0,0,3,0,0,3,0,
   1,1,0,0,0,0,0,1,1,3,1,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,3,0,2,0,0,0,0,2,0,2,3,2,
   0,0,0,1,1,0,3,2,2,0,1,1,0,0,
  0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,1,0,2,0,0,2,2,3,3,0,0,0,2,0,3,1,1,
   2,2,0,0,1,0,0,1,3,0,0,1,1,0,
  0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,0,0,2,1,2,2,0,0,0,1,0,0,0,1,
   0,0,0,2,1,0,0,0,1,0,0,1,2,0,
  3,3,3,3,0,0,0,0,3,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251SerbianModel =
{
  Windows_1251_CharToOrderMap,
  SerbianLangModel,
  54,
  (float)0.9990085107224556,
  PR_FALSE,
  "WINDOWS-1251",
  "sr"
};

const SequenceModel Iso_8859_5SerbianModel =
{
  Iso_8859_5_CharToOrderMap,
  SerbianLangModel,
  54,
  (float)0.9990085107224556,
  PR_FALSE,
  "ISO-8859-5",
  "sr"
};

const LanguageModel SerbianModel =
{
  "sr",
  Unicode_CharOrder,
  108,
  SerbianLangModel,
  54,
  5,
  (float)0.4222797704107475,
  35,
  (float)0.03310421826066527,
  (float)0.9997402787746328,
};
