/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Swedish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 20:24:13.934277
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 4X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 6X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 34,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   49, 33, 50, 51, 16, 19, 37, 40, 32, 28, 42, 52, 53, 38, 43, 54, /* CX */
   55, 56, 57, 58, 59, 60, 22,SYM, 39, 61, 62, 63, 31, 64, 65, 66, /* DX */
   67, 33, 68, 69, 16, 19, 37, 40, 32, 28, 42, 70, 71, 38, 43, 72, /* EX */
   73, 74, 75, 76, 77, 78, 22,SYM, 39, 79, 80, 81, 31, 82, 83, 84, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 4X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 6X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 85, 86, 87,SYM, 88, 89,SYM,SYM, 90, 91, 92, 93,SYM, 94,SYM, /* AX */
  SYM, 95,SYM, 96,SYM, 97, 98,SYM,SYM, 99,100,101,102, 46,103, 46, /* BX */
   30, 33,104,105, 16, 19, 37,106,107, 28,108,109, 44, 38, 43, 48, /* CX */
  110,111, 35,112,113,114, 22,SYM, 39, 41,115,116, 31,117, 47,118, /* DX */
   30, 33,119,120, 16, 19, 37,121,122, 28,123,124, 44, 38, 43, 48, /* EX */
  125,126, 35,127,128,129, 22,SYM, 39, 41,130,131, 31,132, 47,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 4X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 6X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 34,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  133, 33,134,135, 16, 19, 37, 40, 32, 28, 42,136,137, 38, 43,138, /* CX */
  139,140,141,142,143,144, 22,SYM, 39,145,146,147, 31,148,149,150, /* DX */
  151, 33,152,153, 16, 19, 37, 40, 32, 28, 42,154,155, 38, 43,156, /* EX */
  157,158,159,160,161,162, 22,SYM, 39,163,164,165, 31, 45,166,167, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 4X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 6X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,168,SYM,169,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,170, 34,SYM,SYM,171,SYM,SYM,SYM,172,173,174,SYM, /* BX */
  175, 33,176,177, 16, 19, 37, 40, 32, 28, 42,178,179, 38, 43,180, /* CX */
  181,182,183,184,185,186, 22,SYM, 39,187,188,189, 31,190,191,192, /* DX */
  193, 33,194,195, 16, 19, 37, 40, 32, 28, 42,196,197, 38, 43,198, /* EX */
  199,200,201,202,203,204, 22,SYM, 39,205,206,207, 31,208,209,210, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 4X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 20,  9,  1, 13, 12, 17,  6, 23, 11,  7, 10,  3,  8, /* 6X */
   18, 29,  2,  5,  4, 15, 14, 26, 25, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 36,SYM,SYM,SYM,SYM,SYM,SYM,211,SYM,212,ILL,213,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,214,SYM,215,ILL,216,217, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 34,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  218, 33,219,220, 16, 19, 37, 40, 32, 28, 42,221,222, 38, 43,223, /* CX */
  224,225,226,227,228,229, 22,SYM, 39,230,231,232, 31,233,234,235, /* DX */
  236, 33,237,238, 16, 19, 37, 40, 32, 28, 42,239,240, 38, 43,241, /* EX */
  242,243,244,245,246,247, 22,SYM, 39,248,249,249, 31,249,249,249, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 60;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 21,  67, 20,  68,  9,  69,  1,  70, 13,  71, 12, 72, 17,
   73,  6,  74, 23,  75, 11,  76,  7,  77, 10,  78,  3,  79,  8, 80, 18,
   81, 29,  82,  2,  83,  5,  84,  4,  85, 15,  86, 14,  87, 26, 88, 25,
   89, 24,  90, 27,  97,  0,  98, 21,  99, 20, 100,  9, 101,  1,102, 13,
  103, 12, 104, 17, 105,  6, 106, 23, 107, 11, 108,  7, 109, 10,110,  3,
  111,  8, 112, 18, 113, 29, 114,  2, 115,  5, 116,  4, 117, 15,118, 14,
  119, 26, 120, 25, 121, 24, 122, 27, 196, 16, 197, 19, 201, 28,214, 22,
  228, 16, 229, 19, 233, 28, 246, 22,
};


/* Model Table:
 * Total sequences: 752
 * First 512 sequences: 0.996987580875875
 * Next 512 sequences (512-1024): 0.00301241912412493
 * Rest: 4.640385298237959e-17
 * Negative sequences: TODO
 */
static const PRUint8 SwedishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,3,3,2,3,3,3,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,2,3,3,2,3,3,3,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,2,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,2,2,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,2,3,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,0,2,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,2,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,2,3,0,2,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,2,2,0,0,
  3,3,3,2,3,2,3,3,3,2,2,0,2,3,2,3,3,0,2,3,2,0,3,3,3,0,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,2,3,0,3,2,2,0,0,0,2,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,0,2,3,0,3,3,2,2,0,3,2,2,0,0,
  2,2,3,3,3,3,2,3,0,3,3,3,3,3,3,2,2,0,3,0,3,3,0,0,0,3,0,0,0,0,
  3,3,3,3,3,2,3,3,3,2,2,2,2,2,0,3,3,2,0,3,2,2,3,3,3,0,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,2,2,3,0,0,2,2,0,
  2,3,3,3,3,3,2,3,0,3,2,3,3,2,3,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,2,2,3,2,2,2,3,0,3,0,0,3,2,0,0,3,0,0,2,2,2,
  3,3,3,3,3,3,3,3,3,2,2,2,0,2,2,3,3,2,3,3,3,3,3,3,3,0,0,2,2,0,
  3,3,3,3,3,3,2,3,2,3,3,3,3,2,3,0,2,2,3,0,3,2,2,3,0,0,0,0,0,0,
  3,3,0,2,2,3,2,3,3,3,0,2,0,2,0,3,3,2,0,0,0,2,3,0,0,0,0,0,0,0,
  3,2,3,3,3,3,2,3,3,3,3,3,3,3,2,2,0,2,3,0,3,3,0,2,0,3,2,2,0,0,
  3,3,2,2,3,0,3,3,3,0,2,2,0,2,0,2,0,2,3,0,0,2,0,0,2,2,0,0,0,0,
  3,3,2,2,2,2,3,2,3,2,0,2,0,2,0,2,0,3,0,0,0,0,0,0,2,0,2,2,0,0,
  3,3,0,2,2,0,2,2,3,0,0,2,0,2,0,2,0,2,0,0,0,2,0,0,2,0,0,2,0,0,
  0,3,2,2,0,2,0,2,0,2,0,0,0,0,2,2,0,2,2,0,0,0,2,0,0,0,0,0,0,0,
  0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_1SwedishModel =
{
  Iso_8859_1_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
  PR_TRUE,
  "ISO-8859-1",
  "sv"
};

const SequenceModel Iso_8859_4SwedishModel =
{
  Iso_8859_4_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
  PR_TRUE,
  "ISO-8859-4",
  "sv"
};

const SequenceModel Iso_8859_9SwedishModel =
{
  Iso_8859_9_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
  PR_TRUE,
  "ISO-8859-9",
  "sv"
};

const SequenceModel Iso_8859_15SwedishModel =
{
  Iso_8859_15_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
  PR_TRUE,
  "ISO-8859-15",
  "sv"
};

const SequenceModel Windows_1252SwedishModel =
{
  Windows_1252_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
  PR_TRUE,
  "WINDOWS-1252",
  "sv"
};

const LanguageModel SwedishModel =
{
  "sv",
  Unicode_CharOrder,
  60,
  SwedishLangModel,
  30,
  (float)0.996987580875875,
};
