/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Swedish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 08:18:16.993602
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 4X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 6X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 60,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   40, 31, 58, 61, 20, 21, 32, 42, 36, 28, 54, 57, 62, 34, 63, 46, /* CX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43, 64, 53, 65, 35, 51, 66, 67, /* DX */
   40, 31, 58, 68, 20, 21, 32, 42, 36, 28, 54, 57, 69, 34, 70, 46, /* EX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43, 71, 53, 72, 35, 51, 73, 74, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 4X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 6X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 75, 76, 77,SYM, 78, 49,SYM,SYM, 41, 79, 80, 81,SYM, 82,SYM, /* AX */
  SYM, 83,SYM, 84,SYM, 85, 49,SYM,SYM, 41, 86, 87, 88, 47, 89, 47, /* BX */
   39, 31, 58, 90, 20, 21, 32, 91, 37, 28, 92, 57, 93, 34, 94, 50, /* CX */
   56, 48, 95, 96, 38, 45, 22,SYM, 43, 97, 53, 98, 35, 99, 44,100, /* DX */
   39, 31, 58,101, 20, 21, 32,102, 37, 28,103, 57,104, 34,105, 50, /* EX */
   56, 48,106,107, 38, 45, 22,SYM, 43,108, 53,109, 35,110, 44,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 4X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 6X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,111,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   40, 31, 58,112, 20, 21, 32, 42, 36, 28, 54, 57,113, 34,114, 46, /* CX */
  115, 33, 52, 30, 38, 45, 22,SYM, 43,116, 53,117, 35,118,119,120, /* DX */
   40, 31, 58,121, 20, 21, 32, 42, 36, 28, 54, 57,122, 34,123, 46, /* EX */
  124, 33, 52, 30, 38, 45, 22,SYM, 43,125, 53,126, 35, 55,127,128, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 4X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 6X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM, 41,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,129,130,SYM,SYM,131,SYM,SYM,SYM,132,133,134,SYM, /* BX */
   40, 31, 58,135, 20, 21, 32, 42, 36, 28, 54, 57,136, 34,137, 46, /* CX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43,138, 53,139, 35, 51,140,141, /* DX */
   40, 31, 58,142, 20, 21, 32, 42, 36, 28, 54, 57,143, 34,144, 46, /* EX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43,145, 53,146, 35, 51,147,148, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 4X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 19, 18,  9,  0, 17, 12, 13,  6, 24, 11,  7, 10,  2,  8, /* 6X */
   15, 29,  3,  5,  4, 16, 14, 25, 26, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,149,SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM,150,ILL,151,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM,152,ILL,153,154, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,155,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   40, 31, 58,156, 20, 21, 32, 42, 36, 28, 54, 57,157, 34,158, 46, /* CX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43,159, 53,160, 35, 51,161,162, /* DX */
   40, 31, 58,163, 20, 21, 32, 42, 36, 28, 54, 57,164, 34,165, 46, /* EX */
   59, 33, 52, 30, 38, 45, 22,SYM, 43,166, 53,167, 35, 51,168,169, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 60;
static const unsigned int Unicode_CharOrder[] =
{
  65,  1, 66, 19, 67, 18, 68,  9, 69,  0, 70, 17, 71, 12,72, 13,
  73,  6, 74, 24, 75, 11, 76,  7, 77, 10, 78,  2, 79,  8,80, 15,
  81, 29, 82,  3, 83,  5, 84,  4, 85, 16, 86, 14, 87, 25,88, 26,
  89, 23, 90, 27, 97,  1, 98, 19, 99, 18, 100,  9, 101,  0,102, 17,
  103, 12, 104, 13, 105,  6, 106, 24, 107, 11, 108,  7, 109, 10,110,  2,
  111,  8, 112, 15, 113, 29, 114,  3, 115,  5, 116,  4, 117, 16,118, 14,
  119, 25, 120, 26, 121, 23, 122, 27, 196, 20, 197, 21, 201, 28,214, 22,
  228, 20, 229, 21, 233, 28, 246, 22,
};


/* Model Table:
 * Total considered sequences: 909 / 900
 * - Positive sequences: first 499 (0.9950060916165856)
 * - Probable sequences: next 126 (625-499) (0.003996897203831784)
 * - Neutral sequences: last 275 (0.0009970111795826186)
 * - Negative sequences: -9 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SwedishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,1,3,3,3,3,3,0,2,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,0,1,1,3,3,3,3,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,1,2,3,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,2,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,3,1,3,3,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,0,2,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,3,3,3,3,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,1,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,1,1,2,2,1,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,2,2,3,3,3,3,3,2,1,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,3,3,1,3,3,3,3,3,3,1,0,0,1,1,
  3,3,3,3,3,2,3,3,3,2,2,2,1,1,1,2,3,1,1,2,3,3,3,3,3,2,1,1,1,1,
  3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,3,2,1,3,3,3,2,2,3,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,2,2,2,3,2,2,2,1,1,1,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,0,0,2,2,2,1,3,1,2,1,
  3,3,2,3,3,2,3,3,3,0,2,1,1,1,1,1,3,3,2,1,3,3,3,3,3,0,0,1,1,0,
  3,3,2,3,3,3,3,3,3,2,2,3,1,3,1,2,3,1,3,1,0,0,0,3,1,1,0,1,2,2,
  3,3,3,3,2,3,3,3,3,1,2,1,1,1,1,3,3,1,2,3,3,3,3,3,3,1,0,1,1,1,
  1,1,3,3,3,3,1,3,0,3,3,3,3,1,3,3,0,3,3,2,0,0,0,0,0,0,3,0,0,0,
  3,2,3,3,3,3,0,3,0,3,2,3,3,2,3,2,0,1,0,2,0,1,0,0,1,0,0,0,0,0,
  1,2,3,3,3,3,1,3,1,3,3,3,3,1,3,3,0,1,2,1,0,0,0,0,3,1,0,0,0,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,2,2,3,2,3,3,3,0,1,0,0,1,2,2,1,0,0,
  3,3,2,2,2,2,3,3,3,3,2,2,1,1,0,0,3,1,1,1,3,0,3,0,0,1,1,0,0,0,
  3,3,3,2,1,2,3,2,3,1,2,2,1,3,1,1,1,2,1,1,1,1,1,1,1,2,1,0,0,0,
  3,3,2,0,3,1,3,2,2,1,1,1,1,2,1,3,2,2,2,1,1,0,1,2,1,1,2,0,0,1,
  3,3,0,1,1,1,3,1,3,1,2,1,1,1,0,1,2,0,1,1,1,0,1,2,1,1,1,2,0,0,
  2,2,3,1,1,3,0,1,2,1,2,1,1,0,0,1,1,1,1,2,1,0,0,0,1,0,0,0,0,0,
  0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,3,0,1,1,0,0,0,1,0,1,1,0,0,0,
};


const SequenceModel Iso_8859_1SwedishModel =
{
  Iso_8859_1_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.9990029888204174,
  PR_TRUE,
  "ISO-8859-1",
  "sv"
};

const SequenceModel Iso_8859_4SwedishModel =
{
  Iso_8859_4_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.9990029888204174,
  PR_TRUE,
  "ISO-8859-4",
  "sv"
};

const SequenceModel Iso_8859_9SwedishModel =
{
  Iso_8859_9_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.9990029888204174,
  PR_TRUE,
  "ISO-8859-9",
  "sv"
};

const SequenceModel Iso_8859_15SwedishModel =
{
  Iso_8859_15_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.9990029888204174,
  PR_TRUE,
  "ISO-8859-15",
  "sv"
};

const SequenceModel Windows_1252SwedishModel =
{
  Windows_1252_CharToOrderMap,
  SwedishLangModel,
  30,
  (float)0.9990029888204174,
  PR_TRUE,
  "WINDOWS-1252",
  "sv"
};

const LanguageModel SwedishModel =
{
  "sv",
  Unicode_CharOrder,
  60,
  SwedishLangModel,
  30,
  5,
  (float)0.43932340133431586,
  21,
  (float)0.03238859831976376,
  (float)0.999826138969914,
};
