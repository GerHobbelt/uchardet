/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Swedish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:21:28.823388
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 4X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 6X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 52,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   34, 33, 53, 54, 15, 20, 37, 41, 39, 29, 55, 56, 57, 38, 58, 59, /* CX */
   60, 61, 62, 35, 42, 45, 22,SYM, 32, 63, 47, 64, 40, 46, 65, 66, /* DX */
   34, 33, 67, 68, 15, 20, 37, 41, 39, 29, 69, 70, 71, 38, 72, 73, /* EX */
   74, 75, 76, 35, 42, 45, 22,SYM, 32, 77, 47, 78, 40, 46, 79, 80, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 4X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 6X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 81, 82, 83,SYM, 84, 85,SYM,SYM, 44, 50, 86, 87,SYM, 51,SYM, /* AX */
  SYM, 88,SYM, 89,SYM, 90, 91,SYM,SYM, 44, 50, 92, 93, 94, 51, 95, /* BX */
   30, 33, 96, 97, 15, 20, 37, 98, 48, 29, 99,100,101, 38,102, 36, /* CX */
  103,104, 31,105, 42, 45, 22,SYM, 32,106, 47,107, 40,108, 43,109, /* DX */
   30, 33,110,111, 15, 20, 37,112, 48, 29,113,114,115, 38,116, 36, /* EX */
  117,118, 31,119, 42, 45, 22,SYM, 32,120, 47,121, 40,122, 43,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 4X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 6X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,123,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   34, 33,124,125, 15, 20, 37, 41, 39, 29,126,127,128, 38,129,130, /* CX */
  131,132,133, 35, 42, 45, 22,SYM, 32,134, 47,135, 40,136,137,138, /* DX */
   34, 33,139,140, 15, 20, 37, 41, 39, 29,141,142,143, 38,144,145, /* EX */
  146,147,148, 35, 42, 45, 22,SYM, 32,149, 47,150, 40,151,152,153, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 4X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 6X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 44,SYM, 44,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 51,154,SYM,SYM, 51,SYM,SYM,SYM,155,156,157,SYM, /* BX */
   34, 33,158,159, 15, 20, 37, 41, 39, 29,160,161,162, 38,163,164, /* CX */
  165,166,167, 35, 42, 45, 22,SYM, 32,168, 47,169, 40, 46,170,171, /* DX */
   34, 33,172,173, 15, 20, 37, 41, 39, 29,174,175,176, 38,177,178, /* EX */
  179,180,181, 35, 42, 45, 22,SYM, 32,182, 47,183, 40, 46,184,185, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 4X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 21, 19,  9,  0, 14, 12, 18,  6, 24, 11,  7, 10,  3,  8, /* 6X */
   17, 28,  2,  5,  4, 16, 13, 26, 25, 23, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 49,SYM,SYM,SYM,SYM,SYM,SYM, 44,SYM,186,ILL, 51,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 44,SYM,187,ILL, 51,188, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,189,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   34, 33,190,191, 15, 20, 37, 41, 39, 29,192,193,194, 38,195,196, /* CX */
  197,198,199, 35, 42, 45, 22,SYM, 32,200, 47,201, 40, 46,202,203, /* DX */
   34, 33,204,205, 15, 20, 37, 41, 39, 29,206,207,208, 38,209,210, /* EX */
  211,212,213, 35, 42, 45, 22,SYM, 32,214, 47,215, 40, 46,216,217, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 58;
static const unsigned int Unicode_CharOrder[] =
{
   65,  1,  66, 21,  67, 19,  68,  9,  69,  0,  70, 14,  71, 12, 72, 18,
   73,  6,  74, 24,  75, 11,  76,  7,  77, 10,  78,  3,  79,  8, 80, 17,
   81, 28,  82,  2,  83,  5,  84,  4,  85, 16,  86, 13,  87, 26, 88, 25,
   89, 23,  90, 27,  97,  1,  98, 21,  99, 19, 100,  9, 101,  0,102, 14,
  103, 12, 104, 18, 105,  6, 106, 24, 107, 11, 108,  7, 109, 10,110,  3,
  111,  8, 112, 17, 113, 28, 114,  2, 115,  5, 116,  4, 117, 16,118, 13,
  119, 26, 120, 25, 121, 23, 122, 27, 196, 15, 197, 20, 214, 22,228, 15,
  229, 20, 246, 22,
};


/* Model Table:
 * Total considered sequences: 886 / 841
 * - Positive sequences: first 482 (0.9950244403710493)
 * - Probable sequences: next 121 (603-482) (0.003978503582736215)
 * - Neutral sequences: last 238 (0.0009970560462144729)
 * - Negative sequences: -45 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SwedishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,2,3,1,3,3,3,3,2,2,
  3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,1,3,2,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,0,1,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,1,2,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,1,2,3,3,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,1,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,1,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,1,3,2,3,3,2,0,2,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,3,1,3,3,3,3,3,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,2,2,2,2,3,3,3,1,2,1,3,2,2,2,2,1,0,0,0,
  3,3,3,2,3,3,3,3,3,1,1,1,1,1,3,3,3,1,0,0,3,0,3,3,3,0,0,0,0,
  0,1,3,3,3,3,1,3,0,3,3,3,3,3,3,0,1,3,0,3,0,3,0,0,0,3,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,0,2,3,1,3,0,3,1,1,1,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,3,3,3,1,3,2,1,2,2,0,0,1,0,
  3,3,3,2,3,2,3,2,3,2,2,1,1,1,1,3,3,1,1,1,3,2,3,3,3,0,2,1,1,
  3,3,3,2,3,2,3,3,3,2,2,3,1,0,1,0,3,1,3,3,0,1,0,3,0,0,0,2,1,
  3,1,3,3,3,3,1,3,1,3,2,3,3,3,2,0,0,2,1,0,1,2,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,0,1,2,1,1,3,3,2,2,2,3,3,3,3,3,0,1,0,0,
  2,3,3,3,3,3,2,3,1,3,3,3,3,3,2,1,0,3,1,2,0,1,1,0,3,0,0,0,0,
  2,3,3,3,3,3,2,3,3,3,3,3,3,2,3,0,2,3,2,3,0,3,1,0,1,2,1,1,0,
  3,3,1,2,2,2,3,3,3,3,1,2,0,1,2,3,3,0,0,0,0,1,3,2,0,0,0,1,0,
  3,3,1,2,3,1,3,2,3,0,1,1,0,1,2,0,3,3,1,1,0,1,0,1,1,1,0,0,0,
  3,3,1,2,1,2,3,1,2,0,0,1,0,0,1,1,1,0,2,1,0,1,0,1,0,0,2,1,0,
  3,3,0,2,1,1,2,0,3,1,1,1,0,0,0,0,1,0,2,1,0,1,0,1,1,0,1,1,0,
  0,0,1,0,0,0,2,1,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_1SwedishModel =
{
  Iso_8859_1_CharToOrderMap,
  SwedishLangModel,
  29,
  (float)0.9990029439537855,
  PR_TRUE,
  "ISO-8859-1",
  "sv"
};

const SequenceModel Iso_8859_4SwedishModel =
{
  Iso_8859_4_CharToOrderMap,
  SwedishLangModel,
  29,
  (float)0.9990029439537855,
  PR_TRUE,
  "ISO-8859-4",
  "sv"
};

const SequenceModel Iso_8859_9SwedishModel =
{
  Iso_8859_9_CharToOrderMap,
  SwedishLangModel,
  29,
  (float)0.9990029439537855,
  PR_TRUE,
  "ISO-8859-9",
  "sv"
};

const SequenceModel Iso_8859_15SwedishModel =
{
  Iso_8859_15_CharToOrderMap,
  SwedishLangModel,
  29,
  (float)0.9990029439537855,
  PR_TRUE,
  "ISO-8859-15",
  "sv"
};

const SequenceModel Windows_1252SwedishModel =
{
  Windows_1252_CharToOrderMap,
  SwedishLangModel,
  29,
  (float)0.9990029439537855,
  PR_TRUE,
  "WINDOWS-1252",
  "sv"
};

const LanguageModel SwedishModel =
{
  "sv",
  Unicode_CharOrder,
  58,
  SwedishLangModel,
  29,
  4,
  (float)0.36974030827358995,
  21,
  (float)0.030157896788186284,
};
