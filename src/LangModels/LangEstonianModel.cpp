/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Estonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 02:08:25.902958
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 4X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 6X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 60, 66, 67,SYM, 68, 69,SYM,SYM, 29, 58, 70, 71,SYM, 31,SYM, /* AX */
  SYM, 60,SYM, 72,SYM, 73, 74,SYM,SYM, 29, 58, 75, 76, 77, 31, 78, /* BX */
   40, 34, 59, 50, 19, 47, 49, 79, 37, 32, 65, 56, 62, 36, 63, 39, /* CX */
   80, 81, 28, 82, 83, 20, 25,SYM, 43, 84, 52, 85, 21, 86, 35, 48, /* DX */
   40, 34, 59, 50, 19, 47, 49, 87, 37, 32, 65, 56, 62, 36, 63, 39, /* EX */
   88, 89, 28, 90, 91, 20, 25,SYM, 43, 92, 52, 93, 21, 94, 35,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 4X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 6X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 43,SYM, 95,SYM,SYM,SYM,SYM, 49, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 43,SYM, 96,SYM,SYM,SYM,SYM, 49, /* BX */
   60, 97, 40, 38, 19, 47, 65, 58, 37, 32, 98, 62, 99,100, 39,101, /* CX */
   29, 61,102, 42, 28, 20, 25,SYM,103, 45,104, 35, 21,105, 31, 48, /* DX */
   60,106, 40, 38, 19, 47, 65, 58, 37, 32,107, 62,108,109, 39,110, /* EX */
   29, 61,111, 42, 28, 20, 25,SYM,112, 45,113, 35, 21,114, 31,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 4X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 6X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM, 29,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 31, 53,SYM,SYM, 31,SYM,SYM,SYM,115,116,117,SYM, /* BX */
   57, 34, 59, 50, 19, 47, 49, 44, 46, 32, 51, 56,118, 36, 63, 41, /* CX */
  119, 64, 54, 42,120, 20, 25,SYM, 43,121, 52,122, 21, 55,123, 48, /* DX */
   57, 34, 59, 50, 19, 47, 49, 44, 46, 32, 51, 56,124, 36, 63, 41, /* EX */
  125, 64, 54, 42,126, 20, 25,SYM, 43,127, 52,128, 21, 55,129,130, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 4X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 6X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,131,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,132,ILL, 31,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,133,ILL, 31,134, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 53,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   57, 34, 59, 50, 19, 47, 49, 44, 46, 32, 51, 56,135, 36, 63, 41, /* CX */
  136, 64, 54, 42,137, 20, 25,SYM, 43,138, 52,139, 21, 55,140, 48, /* DX */
   57, 34, 59, 50, 19, 47, 49, 44, 46, 32, 51, 56,141, 36, 63, 41, /* EX */
  142, 64, 54, 42,143, 20, 25,SYM, 43,144, 52,145, 21, 55,146,147, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1257_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 4X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 22, 11,  2, 23, 14, 16,  1, 15,  9,  5, 12,  7,  8, /* 6X */
   17, 33, 10,  3,  4,  6, 13, 26, 30, 24, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,SYM, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,ILL, /* 9X */
  SYM,ILL,SYM,SYM,SYM,ILL,SYM,SYM, 43,SYM,148,SYM,SYM,SYM,SYM, 49, /* AX */
  SYM,SYM,SYM,SYM,SYM, 53,SYM,SYM, 43,SYM,149,SYM,SYM,SYM,SYM, 49, /* BX */
   60,150, 40, 38, 19, 47, 65, 58, 37, 32,151, 62,152,153, 39,154, /* CX */
   29, 61,155, 42, 28, 20, 25,SYM,156, 45,157, 35, 21,158, 31, 48, /* DX */
   60,159, 40, 38, 19, 47, 65, 58, 37, 32,160, 62,161,162, 39,163, /* EX */
   29, 61,164, 42, 28, 20, 25,SYM,165, 45,166, 35, 21,167, 31,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 68;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 18, 67, 22, 68, 11, 69,  2, 70, 23, 71, 14,72, 16,
  73,  1, 74, 15, 75,  9, 76,  5, 77, 12, 78,  7, 79,  8,80, 17,
  81, 33, 82, 10, 83,  3, 84,  4, 85,  6, 86, 13, 87, 26,88, 30,
  89, 24, 90, 27, 97,  0, 98, 18, 99, 22, 100, 11, 101,  2,102, 23,
  103, 14, 104, 16, 105,  1, 106, 15, 107,  9, 108,  5, 109, 12,110,  7,
  111,  8, 112, 17, 113, 33, 114, 10, 115,  3, 116,  4, 117,  6,118, 13,
  119, 26, 120, 30, 121, 24, 122, 27, 196, 19, 201, 32, 213, 20,214, 25,
  220, 21, 228, 19, 233, 32, 245, 20, 246, 25, 252, 21, 332, 28,333, 28,
  352, 29, 353, 29, 381, 31, 382, 31,
};


/* Model Table:
 * Total considered sequences: 993 / 1156
 * - Positive sequences: first 504 (0.9950329118919757)
 * - Probable sequences: next 213 (717-504) (0.003969160077240685)
 * - Neutral sequences: last 439 (0.0009979280307835792)
 * - Negative sequences: 163 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 EstonianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,3,3,3,0,3,3,0,2,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,3,3,0,2,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,3,3,3,1,3,3,0,1,3,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,2,1,0,0,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,2,3,3,2,2,3,3,3,3,2,3,3,2,3,3,3,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,1,2,0,2,0,1,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,3,3,1,2,3,0,2,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,2,3,3,3,2,2,3,1,1,1,1,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,2,3,3,3,0,3,2,0,1,2,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,2,3,3,3,2,1,3,3,2,0,3,2,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,0,1,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,0,1,2,2,2,3,0,2,2,2,0,0,3,1,0,
  3,3,3,3,3,3,3,3,3,3,2,2,3,2,2,2,2,3,3,3,3,3,2,2,3,3,0,0,0,0,0,0,2,0,
  3,3,3,3,2,3,3,3,3,3,2,3,2,0,2,2,2,2,0,3,3,2,1,0,2,2,0,0,0,1,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,3,2,0,2,3,1,0,3,2,2,0,1,0,0,0,2,0,
  3,3,3,2,3,0,3,2,3,2,0,1,3,1,1,0,0,1,0,3,3,3,0,1,0,1,0,0,1,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,1,1,3,3,3,1,1,3,1,2,0,2,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,0,1,2,3,3,0,3,3,3,1,1,2,3,1,1,0,0,0,0,1,0,
  3,3,3,3,2,3,3,3,3,2,3,1,2,1,0,3,0,0,3,2,0,3,3,0,2,2,0,0,0,0,0,0,0,0,
  1,3,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,3,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,0,2,3,3,3,3,3,3,3,3,2,0,3,0,0,0,0,0,0,1,0,1,0,0,0,0,
  3,0,2,3,3,3,0,3,3,3,3,3,3,2,3,0,3,3,2,0,0,3,1,2,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,1,1,0,3,1,2,0,0,0,3,1,3,0,1,3,0,0,0,0,0,1,
  3,3,3,3,3,3,3,1,3,1,3,0,2,1,1,1,0,1,0,2,0,3,0,3,1,2,0,0,0,0,0,0,0,0,
  3,2,3,3,3,3,3,3,3,2,2,3,2,2,2,0,0,2,2,0,0,0,3,1,0,1,1,0,3,0,0,0,0,0,
  1,2,2,3,3,3,0,2,1,3,3,3,3,2,2,2,1,2,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,
  3,3,3,3,1,1,1,3,3,1,2,1,0,0,1,0,3,0,1,0,0,1,1,2,2,0,2,0,0,0,0,0,0,0,
  3,3,3,2,2,1,3,1,3,0,1,1,0,1,0,1,2,2,1,0,1,1,0,0,2,0,1,2,3,0,0,0,0,0,
  0,2,1,2,2,0,0,2,0,2,2,0,1,0,1,2,1,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,
  2,3,3,0,2,0,1,1,3,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
  3,3,2,0,2,0,1,0,0,0,0,0,1,1,0,0,0,2,1,0,0,0,0,2,0,0,2,0,0,0,1,0,0,0,
  2,3,2,0,0,0,2,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,1,2,2,2,0,2,1,0,2,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,
  1,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_4EstonianModel =
{
  Iso_8859_4_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9990020719692164,
  PR_TRUE,
  "ISO-8859-4",
  "et"
};

const SequenceModel Iso_8859_13EstonianModel =
{
  Iso_8859_13_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9990020719692164,
  PR_TRUE,
  "ISO-8859-13",
  "et"
};

const SequenceModel Iso_8859_15EstonianModel =
{
  Iso_8859_15_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9990020719692164,
  PR_TRUE,
  "ISO-8859-15",
  "et"
};

const SequenceModel Windows_1252EstonianModel =
{
  Windows_1252_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9990020719692164,
  PR_TRUE,
  "WINDOWS-1252",
  "et"
};

const SequenceModel Windows_1257EstonianModel =
{
  Windows_1257_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9990020719692164,
  PR_TRUE,
  "WINDOWS-1257",
  "et"
};

const LanguageModel EstonianModel =
{
  "et",
  Unicode_CharOrder,
  68,
  EstonianLangModel,
  34,
  4,
  (float)0.4177634032886457,
  19,
  (float)0.03031396868254438,
  (float)0.9993887633527534,
};
