/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Estonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:02:05.522096
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 4X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 6X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 60, 61, 62,SYM, 63, 64,SYM,SYM, 28, 41, 65, 66,SYM, 30,SYM, /* AX */
  SYM, 67,SYM, 68,SYM, 69, 70,SYM,SYM, 28, 41, 71, 72, 73, 30, 74, /* BX */
   33, 35, 46, 75, 18, 32, 47, 76, 43, 34, 77, 78, 79, 54, 80, 38, /* CX */
   53, 81, 52, 82, 51, 19, 24,SYM, 36, 83, 84, 85, 21, 86, 39, 87, /* DX */
   33, 35, 46, 88, 18, 32, 47, 89, 43, 34, 90, 91, 92, 54, 93, 38, /* EX */
   53, 94, 52, 95, 51, 19, 24,SYM, 36, 96, 97, 98, 21, 99, 39,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 4X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 6X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 36,SYM,100,SYM,SYM,SYM,SYM, 47, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 36,SYM,101,SYM,SYM,SYM,SYM, 47, /* BX */
  102,103, 33, 48, 18, 32,104, 41, 43, 34,105,106,107,108, 38,109, /* CX */
   28,110,111, 40, 52, 19, 24,SYM,112, 37, 58, 39, 21, 59, 30,113, /* DX */
  114,115, 33, 48, 18, 32,116, 41, 43, 34,117,118,119,120, 38,121, /* EX */
   28,122,123, 40, 52, 19, 24,SYM,124, 37, 58, 39, 21, 59, 30,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 4X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 6X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM, 28,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 30,125,SYM,SYM, 30,SYM,SYM,SYM,126,127,128,SYM, /* BX */
   45, 35, 46,129, 18, 32, 47, 42, 49, 34,130,131, 56, 54,132,133, /* CX */
   44, 55, 50, 40, 51, 19, 24,SYM, 36, 57,134,135, 21,136,137,138, /* DX */
   45, 35, 46,139, 18, 32, 47, 42, 49, 34,140,141, 56, 54,142,143, /* EX */
   44, 55, 50, 40, 51, 19, 24,SYM, 36, 57,144,145, 21,146,147,148, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 4X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 6X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,149,SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM,150,ILL, 30,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM,151,ILL, 30,152, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,153,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   45, 35, 46,154, 18, 32, 47, 42, 49, 34,155,156, 56, 54,157,158, /* CX */
   44, 55, 50, 40, 51, 19, 24,SYM, 36, 57,159,160, 21,161,162,163, /* DX */
   45, 35, 46,164, 18, 32, 47, 42, 49, 34,165,166, 56, 54,167,168, /* EX */
   44, 55, 50, 40, 51, 19, 24,SYM, 36, 57,169,170, 21,171,172,173, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1257_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 4X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 11,  2, 22, 14, 17,  1, 16,  8,  5, 12,  7,  9, /* 6X */
   15, 31, 10,  3,  4,  6, 13, 26, 29, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,SYM, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,ILL, /* 9X */
  SYM,ILL,SYM,SYM,SYM,ILL,SYM,SYM, 36,SYM,174,SYM,SYM,SYM,SYM, 47, /* AX */
  SYM,SYM,SYM,SYM,SYM,175,SYM,SYM, 36,SYM,176,SYM,SYM,SYM,SYM, 47, /* BX */
  177,178, 33, 48, 18, 32,179, 41, 43, 34,180,181,182,183, 38,184, /* CX */
   28,185,186, 40, 52, 19, 24,SYM,187, 37, 58, 39, 21, 59, 30,188, /* DX */
  189,190, 33, 48, 18, 32,191, 41, 43, 34,192,193,194,195, 38,196, /* EX */
   28,197,198, 40, 52, 19, 24,SYM,199, 37, 58, 39, 21, 59, 30,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 64;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 20,  67, 23,  68, 11,  69,  2,  70, 22,  71, 14, 72, 17,
   73,  1,  74, 16,  75,  8,  76,  5,  77, 12,  78,  7,  79,  9, 80, 15,
   81, 31,  82, 10,  83,  3,  84,  4,  85,  6,  86, 13,  87, 26, 88, 29,
   89, 25,  90, 27,  97,  0,  98, 20,  99, 23, 100, 11, 101,  2,102, 22,
  103, 14, 104, 17, 105,  1, 106, 16, 107,  8, 108,  5, 109, 12,110,  7,
  111,  9, 112, 15, 113, 31, 114, 10, 115,  3, 116,  4, 117,  6,118, 13,
  119, 26, 120, 29, 121, 25, 122, 27, 196, 18, 213, 19, 214, 24,220, 21,
  228, 18, 245, 19, 246, 24, 252, 21, 352, 28, 353, 28, 381, 30,382, 30,
};


/* Model Table:
 * Total considered sequences: 915 / 1024
 * - Positive sequences: first 453 (0.9950155799281164)
 * - Probable sequences: next 161 (614-453) (0.003991392475357514)
 * - Neutral sequences: last 410 (0.000993027596526086)
 * - Negative sequences: 109 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 EstonianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,3,2,3,3,2,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,2,3,3,1,1,2,2,2,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,1,3,3,2,2,3,2,1,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,2,2,2,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,1,3,3,3,3,3,1,3,1,2,3,3,2,2,3,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,2,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,2,2,3,0,1,1,2,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,2,2,3,3,3,2,3,3,3,1,2,0,3,1,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,0,2,2,3,2,0,1,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,1,3,3,1,1,2,2,0,2,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,0,0,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,3,2,0,1,2,3,2,0,0,2,2,2,1,0,3,1,
  3,3,3,3,3,3,3,3,3,3,2,1,3,2,3,3,2,2,3,3,3,3,2,2,3,2,1,1,0,0,0,0,
  3,3,3,3,2,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,0,3,0,1,3,0,0,0,1,0,0,0,
  3,3,3,3,2,3,3,3,3,3,3,1,3,2,2,3,1,3,1,0,1,2,1,0,2,3,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,2,3,1,2,3,1,3,3,3,0,3,1,1,3,2,1,1,1,1,0,0,
  3,2,3,0,3,1,3,2,2,3,1,1,2,0,0,2,0,0,3,3,0,2,0,1,1,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,3,3,1,3,3,0,1,3,3,3,3,2,3,0,1,1,3,1,0,0,0,0,0,
  2,3,3,3,3,3,1,3,3,2,3,3,3,3,3,3,0,3,3,0,3,0,0,0,0,1,0,0,0,0,0,0,
  1,3,3,3,3,3,3,3,2,1,3,3,3,2,3,3,3,3,0,3,2,0,0,0,0,0,0,0,1,0,0,0,
  3,3,3,3,1,3,3,3,2,3,3,1,1,0,1,1,3,2,0,1,2,3,1,1,0,2,0,1,0,0,0,0,
  3,0,2,3,3,3,0,3,3,3,3,3,3,2,3,3,1,3,1,0,2,3,1,0,0,0,0,1,0,0,0,0,
  3,3,3,2,3,2,3,2,0,3,3,1,1,0,1,0,2,0,3,0,0,3,2,0,3,1,0,1,0,0,0,1,
  3,3,3,2,3,3,3,2,3,3,2,1,3,1,1,1,0,3,0,0,1,1,0,3,0,2,0,2,0,1,0,1,
  1,2,3,3,3,3,0,3,3,1,3,3,2,2,2,3,1,1,0,0,2,1,1,0,3,0,0,0,0,1,0,0,
  2,1,3,3,2,3,1,2,1,2,3,2,2,1,2,2,0,1,0,0,1,0,0,2,1,0,0,0,0,1,0,0,
  3,3,3,2,1,0,1,1,1,3,1,0,1,0,0,0,1,2,0,0,0,0,1,1,1,1,2,0,0,0,0,0,
  3,3,3,0,1,1,2,2,1,3,0,2,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,2,0,0,0,0,
  3,3,3,0,2,1,2,0,2,2,1,0,0,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
  2,2,2,1,2,0,1,0,1,2,0,0,1,1,0,2,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,
  3,2,2,1,0,0,2,2,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,
  2,1,0,0,0,0,2,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_4EstonianModel =
{
  Iso_8859_4_CharToOrderMap,
  EstonianLangModel,
  32,
  (float)0.9990069724034739,
  PR_TRUE,
  "ISO-8859-4",
  "et"
};

const SequenceModel Iso_8859_13EstonianModel =
{
  Iso_8859_13_CharToOrderMap,
  EstonianLangModel,
  32,
  (float)0.9990069724034739,
  PR_TRUE,
  "ISO-8859-13",
  "et"
};

const SequenceModel Iso_8859_15EstonianModel =
{
  Iso_8859_15_CharToOrderMap,
  EstonianLangModel,
  32,
  (float)0.9990069724034739,
  PR_TRUE,
  "ISO-8859-15",
  "et"
};

const SequenceModel Windows_1252EstonianModel =
{
  Windows_1252_CharToOrderMap,
  EstonianLangModel,
  32,
  (float)0.9990069724034739,
  PR_TRUE,
  "WINDOWS-1252",
  "et"
};

const SequenceModel Windows_1257EstonianModel =
{
  Windows_1257_CharToOrderMap,
  EstonianLangModel,
  32,
  (float)0.9990069724034739,
  PR_TRUE,
  "WINDOWS-1257",
  "et"
};

const LanguageModel EstonianModel =
{
  "et",
  Unicode_CharOrder,
  64,
  EstonianLangModel,
  32,
  3,
  (float)0.33312644846916206,
  18,
  (float)0.03563976943342159,
};
