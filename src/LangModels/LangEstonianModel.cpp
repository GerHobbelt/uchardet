/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Estonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-08 23:28:26.125101
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 * IRR: irrelevant character (which does belong to a word)
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */



#define IRR                     (-1)

#define EstonianOrderWidth        33


static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 4X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 6X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,249,249,249,SYM,249,249,SYM,SYM, 29,249,249,249,SYM, 32,SYM, /* AX */
  SYM,249,SYM,249,SYM,249,249,SYM,SYM, 29,249,249,249,249, 32,249, /* BX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* CX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,249, /* DX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* EX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 4X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 6X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* BX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* CX */
   29,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249, 32,249, /* DX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* EX */
   29,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249, 32,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 4X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 6X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM, 29,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 32,249,SYM,SYM, 32,SYM,SYM,SYM,249,249,249,SYM, /* BX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* CX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,249, /* DX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* EX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,249, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 4X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 6X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,249,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,249,ILL, 32,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,249,ILL, 32,249, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* CX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,249, /* DX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* EX */
  249,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249,249,249, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1257_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 4X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 22, 11,  2, 23, 14, 17,  1, 16,  9,  5, 12,  7,  8, /* 6X */
   15, 30, 10,  3,  4,  6, 13, 26, 28, 25, 27,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,SYM, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,ILL, /* 9X */
  SYM,ILL,SYM,SYM,SYM,ILL,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* AX */
  SYM,SYM,SYM,SYM,SYM,249,SYM,SYM,249,SYM,249,SYM,SYM,SYM,SYM,249, /* BX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* CX */
   29,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249, 32,249, /* DX */
  249,249,249,249, 18,249,249,249,249, 31,249,249,249,249,249,249, /* EX */
   29,249,249,249,249, 20, 24,SYM,249,249,249,249, 21,249, 32,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    66

static const PRUint32 Unicode_CharOrder[] =
{
   65,  0,  66, 19,  67, 22,  68, 11,  69,  2,  70, 23,  71, 14,  72, 17,
   73,  1,  74, 16,  75,  9,  76,  5,  77, 12,  78,  7,  79,  8,  80, 15,
   81, 30,  82, 10,  83,  3,  84,  4,  85,  6,  86, 13,  87, 26,  88, 28,
   89, 25,  90, 27,  97,  0,  98, 19,  99, 22, 100, 11, 101,  2, 102, 23,
  103, 14, 104, 17, 105,  1, 106, 16, 107,  9, 108,  5, 109, 12, 110,  7,
  111,  8, 112, 15, 113, 30, 114, 10, 115,  3, 116,  4, 117,  6, 118, 13,
  119, 26, 120, 28, 121, 25, 122, 27, 196, 18, 201, 31, 213, 20, 214, 24,
  220, 21, 228, 18, 233, 31, 245, 20, 246, 24, 252, 21, 352, 29, 353, 29,
  381, 32, 382, 32,
};

static const float OrderToRatio[] =
{
  0.126801244f,  0.104768940f,  0.098866095f,  0.087641009f,  0.069356282f,  0.061559184f,  0.053737823f,  0.051987679f, 
  0.044930734f,  0.043617085f,  0.042130896f,  0.038569093f,  0.034592362f,  0.023470211f,  0.018577357f,  0.017858281f, 
  0.016930883f,  0.015757667f,  0.010033243f,  0.009322010f,  0.009036732f,  0.006036170f,  0.004226961f,  0.003277016f, 
  0.001959936f,  0.001159247f,  0.001025431f,  0.000802650f,  0.000557811f,  0.000258809f,  0.000184793f,  0.000170333f, 
  0.000148766f, 
  0    /* value slot for out-of-bounds index values; range: 0..freq_count(33) */
};


/* Model Table:
 * Number of web pages processed for this model: 1012
 * Number of characters consumed for this model: 4080236
 * Total considered sequences: 1657 / 1089
 *
 * - Positive sequences: first 509 (0.9950072332102391)
 * - Probable sequences: next 286 (795-509) (0.003996854651661885)
 * - Neutral sequences: last 294 (0.00099591213809902)
 * - Negative sequences: -568 (off-ratio, TODO)
 */
#define EstonianUnicodeCharToOrderIsReduced  0


#define EstonianFCMLowerBound  65
#define EstonianFCMUpperBound  382


static const PRInt16 EstonianUnicodeCharToOrder[] =
{
  0,19,22,11,2,23,14,17,1,16,9,5,12,7,8,15,30,10,3,4,
  6,13,26,28,25,27,IRR,IRR,IRR,IRR,IRR,IRR,0,19,22,11,2,23,14,17,
  1,16,9,5,12,7,8,15,30,10,3,4,6,13,26,28,25,27,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,18,IRR,IRR,IRR,IRR,31,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,20,24,IRR,IRR,IRR,IRR,IRR,21,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,18,IRR,IRR,IRR,IRR,31,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  20,24,IRR,IRR,IRR,IRR,IRR,21,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,29,29,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,32,32,
};



#define EstonianUnicodeCharToOrderFirstTableChunkSize    188
#define EstonianUnicodeCharToOrderSecondTableChunkOffset 287
#define EstonianUnicodeCharToOrderSecondTableChunkSize   31


static const PRInt16 EstonianUnicodeCharToOrder2[] =
{
  29,29,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,
  IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,IRR,32,32,
};

static const PRUint8 EstonianCompactedLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,3,3,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,2,2,3,3,2,2,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,3,1,3,3,3,3,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,2,1,0,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,2,3,3,3,2,3,3,2,3,1,3,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,2,3,3,0,2,2,2,2,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,3,3,3,2,3,2,3,1,2,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,1,2,3,3,1,3,3,2,3,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,2,3,3,1,2,3,3,2,0,0,2,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,3,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,1,3,2,2,2,3,3,2,0,0,1,2,3,
  3,3,3,3,3,3,3,3,3,3,2,2,3,2,2,3,3,2,3,3,3,3,2,2,3,3,2,1,1,1,0,2,1,
  3,3,3,3,2,3,3,3,3,3,3,2,2,2,3,3,2,2,3,1,3,3,1,1,2,2,0,0,0,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,2,3,1,2,1,3,2,2,2,2,2,2,1,1,1,2,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,1,3,2,3,3,2,3,3,2,2,3,2,1,1,0,1,0,2,0,
  3,3,3,1,2,1,3,2,3,1,1,1,2,1,1,2,2,0,3,1,3,3,1,1,2,1,1,1,0,0,0,1,0,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,2,3,3,1,2,2,3,2,2,0,0,0,2,0,
  2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,3,3,0,0,2,1,0,1,1,0,0,0,1,0,0,
  3,3,3,3,2,3,3,3,3,2,3,2,2,1,1,1,3,2,2,3,1,3,2,1,2,3,2,1,0,0,0,2,0,
  1,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,0,3,3,0,0,0,1,0,0,1,0,1,1,0,0,
  3,1,2,3,3,3,0,3,2,3,3,3,3,2,3,3,1,3,1,3,1,3,2,2,1,1,0,1,1,0,0,0,1,
  3,3,3,3,3,3,3,2,3,3,3,2,2,1,1,2,0,3,1,2,0,0,3,1,0,3,1,3,1,0,2,2,0,
  3,3,3,2,3,3,3,2,3,1,3,2,2,1,2,1,2,1,2,1,0,3,2,3,3,1,1,1,0,0,0,2,0,
  2,3,3,3,3,3,0,3,1,3,3,3,3,3,2,2,2,2,0,2,1,1,1,1,3,0,2,1,0,0,0,0,0,
  3,2,3,3,2,3,2,3,3,2,2,2,2,2,2,2,1,1,0,2,0,0,2,1,1,2,1,2,1,0,0,1,0,
  3,3,3,2,2,2,2,2,3,1,2,1,1,0,1,1,0,2,1,1,1,1,1,1,1,2,2,1,0,0,1,0,0,
  3,3,3,2,2,1,3,2,3,2,1,2,2,1,1,2,2,2,1,2,1,1,1,1,1,2,2,3,0,0,1,1,0,
  3,3,2,1,3,1,1,1,2,1,1,0,0,2,1,2,0,1,0,1,1,0,2,2,0,1,1,1,2,0,0,0,0,
  2,3,3,1,2,1,2,2,2,2,1,0,1,2,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,
  2,2,1,1,1,1,3,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,
  2,1,2,2,2,2,1,2,2,1,2,2,2,2,2,1,1,1,0,2,0,0,2,1,0,0,0,1,1,0,0,0,0,
  2,3,2,1,0,0,2,2,2,1,1,1,1,1,0,0,1,0,2,0,1,1,0,1,1,1,0,0,0,0,0,0,1,
};


const SequenceModel Iso_8859_4EstonianModel =
{
  Iso_8859_4_CharToOrderMap,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  0.999004087861901f,
  PR_TRUE,
  "ISO-8859-4",
  "et"
};

const SequenceModel Iso_8859_13EstonianModel =
{
  Iso_8859_13_CharToOrderMap,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  0.999004087861901f,
  PR_TRUE,
  "ISO-8859-13",
  "et"
};

const SequenceModel Iso_8859_15EstonianModel =
{
  Iso_8859_15_CharToOrderMap,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  0.999004087861901f,
  PR_TRUE,
  "ISO-8859-15",
  "et"
};

const SequenceModel Windows_1252EstonianModel =
{
  Windows_1252_CharToOrderMap,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  0.999004087861901f,
  PR_TRUE,
  "WINDOWS-1252",
  "et"
};

const SequenceModel Windows_1257EstonianModel =
{
  Windows_1257_CharToOrderMap,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  0.999004087861901f,
  PR_TRUE,
  "WINDOWS-1257",
  "et"
};

const LanguageModel EstonianModel =
{
  "et",
  Unicode_CharOrder,
  Unicode_Char_size,

  EstonianFCMLowerBound,
  EstonianFCMUpperBound,
  EstonianUnicodeCharToOrderIsReduced,
  EstonianUnicodeCharToOrder,
  EstonianUnicodeCharToOrderFirstTableChunkSize,
  EstonianUnicodeCharToOrderSecondTableChunkOffset,
  EstonianUnicodeCharToOrderSecondTableChunkSize,
  EstonianUnicodeCharToOrder2,
  OrderToRatio,
  EstonianCompactedLangModel,
  EstonianOrderWidth,
  4,
  0.4180772876863005f,
  18,
  0.038166664869385004f,
  0.9993527335183553f,
};
