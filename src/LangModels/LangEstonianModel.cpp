/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Estonian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 19:01:52.571827
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 4X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 6X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 55, 56, 57,SYM, 58, 59,SYM,SYM, 30, 47, 60, 61,SYM, 33,SYM, /* AX */
  SYM, 62,SYM, 63,SYM, 64, 65,SYM,SYM, 30, 47, 66, 67, 68, 33, 69, /* BX */
   37, 44, 70, 71, 18, 43, 45, 72, 73, 31, 74, 75, 76, 36, 77, 41, /* CX */
   78, 79, 32, 80, 81, 19, 24,SYM, 39, 82, 53, 83, 21, 84, 34, 85, /* DX */
   37, 44, 86, 87, 18, 43, 45, 88, 89, 31, 90, 91, 92, 36, 93, 41, /* EX */
   94, 95, 32, 96, 97, 19, 24,SYM, 39, 98, 53, 99, 21,100, 34,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 4X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 6X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 39,SYM,101,SYM,SYM,SYM,SYM, 45, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 39,SYM,102,SYM,SYM,SYM,SYM, 45, /* BX */
  103,104, 37,105, 18, 43,106, 47,107, 31,108,109,110,111, 41,112, /* CX */
   30,113,114, 42, 32, 19, 24,SYM,115, 54,116, 34, 21, 51, 33,117, /* DX */
  118,119, 37,120, 18, 43,121, 47,122, 31,123,124,125,126, 41,127, /* EX */
   30,128,129, 42, 32, 19, 24,SYM,130, 54,131, 34, 21, 51, 33,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 4X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 6X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 30,SYM, 30,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 33, 52,SYM,SYM, 33,SYM,SYM,SYM,132,133,134,SYM, /* BX */
   38, 44,135,136, 18, 43, 45, 50, 40, 31,137,138, 35, 36,139,140, /* CX */
   46,141, 49, 42,142, 19, 24,SYM, 39, 48, 53,143, 21,144,145,146, /* DX */
   38, 44,147,148, 18, 43, 45, 50, 40, 31,149,150, 35, 36,151,152, /* EX */
   46,153, 49, 42,154, 19, 24,SYM, 39, 48, 53,155, 21,156,157,158, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 4X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 6X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,159,SYM,SYM,SYM,SYM,SYM,SYM, 30,SYM,160,ILL, 33,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 30,SYM,161,ILL, 33,162, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 52,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   38, 44,163,164, 18, 43, 45, 50, 40, 31,165,166, 35, 36,167,168, /* CX */
   46,169, 49, 42,170, 19, 24,SYM, 39, 48, 53,171, 21,172,173,174, /* DX */
   38, 44,175,176, 18, 43, 45, 50, 40, 31,177,178, 35, 36,179,180, /* EX */
   46,181, 49, 42,182, 19, 24,SYM, 39, 48, 53,183, 21,184,185,186, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1257_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 4X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 20, 23, 10,  2, 22, 15, 16,  1, 17,  8,  5, 12,  7,  9, /* 6X */
   14, 29, 11,  3,  4,  6, 13, 27, 26, 25, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,SYM, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,SYM,SYM,ILL, /* 9X */
  SYM,ILL,SYM,SYM,SYM,ILL,SYM,SYM, 39,SYM,187,SYM,SYM,SYM,SYM, 45, /* AX */
  SYM,SYM,SYM,SYM,SYM, 52,SYM,SYM, 39,SYM,188,SYM,SYM,SYM,SYM, 45, /* BX */
  189,190, 37,191, 18, 43,192, 47,193, 31,194,195,196,197, 41,198, /* CX */
   30,199,200, 42, 32, 19, 24,SYM,201, 54,202, 34, 21, 51, 33,203, /* DX */
  204,205, 37,206, 18, 43,207, 47,208, 31,209,210,211,212, 41,213, /* EX */
   30,214,215, 42, 32, 19, 24,SYM,216, 54,217, 34, 21, 51, 33,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 68;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 20,  67, 23,  68, 10,  69,  2,  70, 22,  71, 15, 72, 16,
   73,  1,  74, 17,  75,  8,  76,  5,  77, 12,  78,  7,  79,  9, 80, 14,
   81, 29,  82, 11,  83,  3,  84,  4,  85,  6,  86, 13,  87, 27, 88, 26,
   89, 25,  90, 28,  97,  0,  98, 20,  99, 23, 100, 10, 101,  2,102, 22,
  103, 15, 104, 16, 105,  1, 106, 17, 107,  8, 108,  5, 109, 12,110,  7,
  111,  9, 112, 14, 113, 29, 114, 11, 115,  3, 116,  4, 117,  6,118, 13,
  119, 27, 120, 26, 121, 25, 122, 28, 196, 18, 201, 31, 213, 19,214, 24,
  220, 21, 228, 18, 233, 31, 245, 19, 246, 24, 252, 21, 332, 32,333, 32,
  352, 30, 353, 30, 381, 33, 382, 33,
};


/* Model Table:
 * Total sequences: 869
 * First 512 sequences: 0.9973685549586747
 * Next 512 sequences (512-1024): 0.002631445041325318
 * Rest: -3.122502256758253e-17
 * Negative sequences: TODO
 */
static const PRUint8 EstonianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,0,3,3,3,3,3,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,2,3,3,2,2,3,3,3,2,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,0,2,3,3,2,2,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,0,3,2,3,3,3,2,2,2,0,3,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,2,0,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,2,2,3,0,0,2,2,0,2,2,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,2,3,3,3,2,2,3,0,3,2,2,3,0,2,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,2,2,3,3,0,2,0,0,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,2,3,3,0,3,3,3,2,2,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,2,3,0,2,0,3,0,0,0,2,2,2,0,0,0,0,2,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,2,2,2,2,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,2,3,3,3,3,3,2,3,3,0,2,2,0,2,2,0,0,
  3,3,3,3,2,3,3,3,3,3,2,2,2,2,2,2,2,2,3,3,0,2,0,2,3,2,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,2,3,2,3,3,0,3,0,2,3,2,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,3,3,0,2,2,2,2,2,0,2,2,0,2,2,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,0,3,3,3,3,0,3,3,2,0,3,0,2,0,0,0,2,2,0,
  3,3,3,2,3,0,3,3,2,3,2,0,3,0,2,0,0,0,3,3,0,3,0,0,2,0,0,0,0,0,0,0,0,0,
  2,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,0,0,0,0,2,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,2,0,3,3,3,3,3,3,3,3,0,3,3,0,0,0,0,0,0,0,2,0,0,0,0,0,
  3,3,3,3,2,3,3,3,3,3,0,3,2,0,0,0,2,3,0,2,2,2,0,2,0,2,2,0,0,0,0,0,0,0,
  3,0,2,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,2,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,2,0,3,2,3,0,0,0,2,0,2,2,0,0,3,3,3,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,3,0,0,0,2,0,2,3,0,3,0,0,2,2,0,0,0,0,
  2,2,3,3,3,3,0,3,3,2,3,3,3,3,3,3,2,2,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,2,3,2,3,2,0,3,2,0,0,0,0,2,0,0,3,2,0,2,0,2,0,0,0,2,0,
  2,3,2,2,2,0,2,2,2,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,
  3,3,3,2,2,2,2,2,2,3,0,2,0,0,0,2,3,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,
  2,3,3,2,0,2,2,2,2,3,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,
  3,3,2,0,0,0,3,0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
  2,3,3,0,0,2,3,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
  0,0,0,2,0,2,0,2,2,2,2,2,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,2,2,2,2,2,2,0,0,0,2,0,0,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,2,0,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_4EstonianModel =
{
  Iso_8859_4_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
  PR_TRUE,
  "ISO-8859-4",
  "et"
};

const SequenceModel Iso_8859_13EstonianModel =
{
  Iso_8859_13_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
  PR_TRUE,
  "ISO-8859-13",
  "et"
};

const SequenceModel Iso_8859_15EstonianModel =
{
  Iso_8859_15_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
  PR_TRUE,
  "ISO-8859-15",
  "et"
};

const SequenceModel Windows_1252EstonianModel =
{
  Windows_1252_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
  PR_TRUE,
  "WINDOWS-1252",
  "et"
};

const SequenceModel Windows_1257EstonianModel =
{
  Windows_1257_CharToOrderMap,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
  PR_TRUE,
  "WINDOWS-1257",
  "et"
};

const LanguageModel EstonianModel =
{
  "et",
  Unicode_CharOrder,
  68,
  EstonianLangModel,
  34,
  (float)0.9973685549586747,
};
