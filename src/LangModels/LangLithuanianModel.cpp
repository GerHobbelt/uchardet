/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Lithuanian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:30:25.794872
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 4X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 6X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 26, 68, 69,SYM, 66, 56,SYM,SYM, 21, 49, 70, 71,SYM, 22,SYM, /* AX */
  SYM, 26,SYM, 72,SYM, 66, 56,SYM,SYM, 21, 49, 73, 74, 75, 22, 76, /* BX */
   40, 38, 77, 53, 37, 47, 59, 30, 24, 34, 31, 46, 17, 39, 65, 44, /* CX */
   58, 51, 41, 63, 54, 60, 36,SYM, 55, 20, 50, 64, 42, 67, 27, 52, /* DX */
   40, 38, 78, 53, 37, 47, 59, 30, 24, 34, 31, 46, 17, 39, 65, 44, /* EX */
   58, 51, 41, 63, 54, 60, 36,SYM, 55, 20, 50, 64, 42, 67, 27,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_10_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 4X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 6X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 26, 49, 79, 44, 66, 63,SYM, 56, 58, 21, 80, 22,SYM, 27, 81, /* AX */
  SYM, 26, 49, 82, 44, 66, 63,SYM, 56, 58, 21, 83, 22, 84, 27, 85, /* BX */
   40, 38, 86, 53, 37, 47, 59, 30, 24, 34, 31, 46, 17, 39, 65, 57, /* CX */
   87, 51, 41, 45, 54, 60, 36, 67, 55, 20, 50, 64, 42, 88, 89, 52, /* DX */
   40, 38, 90, 53, 37, 47, 59, 30, 24, 34, 31, 46, 17, 39, 65, 57, /* EX */
   91, 51, 41, 45, 54, 60, 36, 67, 55, 20, 50, 64, 42, 92, 93, 94, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 4X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 18, 23, 12,  5, 28, 16, 29,  0, 15,  9, 10, 11,  7,  3, /* 6X */
   14, 35,  4,  2,  6,  8, 13, 33, 32, 19, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 55,SYM, 95,SYM,SYM,SYM,SYM, 59, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 55,SYM, 96,SYM,SYM,SYM,SYM, 59, /* BX */
   26, 30, 40, 48, 37, 47, 31, 49, 24, 34, 97, 17, 98, 63, 44, 56, /* CX */
   21, 99, 51, 45, 41, 60, 36,SYM, 20, 43, 61, 27, 42, 62, 22, 52, /* DX */
   26, 30, 40, 48, 37, 47, 31, 49, 24, 34,100, 17,101, 63, 44, 56, /* EX */
   21,102, 51, 45, 41, 60, 36,SYM, 20, 43, 61, 27, 42, 62, 22,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 72;
static const unsigned int Unicode_CharOrder[] =
{
   65,  1,  66, 18,  67, 23,  68, 12,  69,  5,  70, 28,  71, 16, 72, 29,
   73,  0,  74, 15,  75,  9,  76, 10,  77, 11,  78,  7,  79,  3, 80, 14,
   81, 35,  82,  4,  83,  2,  84,  6,  85,  8,  86, 13,  87, 33, 88, 32,
   89, 19,  90, 25,  97,  1,  98, 18,  99, 23, 100, 12, 101,  5,102, 28,
  103, 16, 104, 29, 105,  0, 106, 15, 107,  9, 108, 10, 109, 11,110,  7,
  111,  3, 112, 14, 113, 35, 114,  4, 115,  2, 116,  6, 117,  8,118, 13,
  119, 33, 120, 32, 121, 19, 122, 25, 201, 34, 233, 34, 260, 26,261, 26,
  268, 24, 269, 24, 278, 17, 279, 17, 280, 31, 281, 31, 302, 30,303, 30,
  352, 21, 353, 21, 362, 27, 363, 27, 370, 20, 371, 20, 381, 22,382, 22,
};


/* Model Table:
 * Total considered sequences: 1175 / 1296
 * - Positive sequences: first 557 (0.995037232341861)
 * - Probable sequences: next 229 (786-557) (0.0039665071105200456)
 * - Neutral sequences: last 510 (0.0009962605476189212)
 * - Negative sequences: 121 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 LithuanianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,2,0,1,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,0,3,3,3,3,3,0,1,3,3,0,0,2,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,2,1,3,3,2,3,3,3,3,3,2,0,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,0,3,3,3,3,3,0,0,3,3,0,0,2,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,3,3,3,3,3,0,1,3,2,3,0,2,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,3,3,3,3,2,2,2,0,2,3,3,2,3,3,3,0,2,1,1,
  3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,2,3,3,3,3,3,2,3,3,3,3,3,2,3,2,3,3,1,1,1,0,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,2,0,3,3,3,3,3,0,0,3,2,0,0,2,1,1,1,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,2,3,2,3,3,3,0,3,2,0,3,3,2,3,3,3,0,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,3,3,3,3,3,0,1,2,0,
  3,3,3,3,2,3,3,2,3,2,3,3,2,2,3,2,2,3,3,3,3,2,3,2,1,3,3,3,2,1,1,3,1,2,2,0,
  3,3,3,3,3,3,2,3,3,3,3,3,2,3,2,2,2,3,2,3,3,1,3,2,0,3,3,3,0,2,3,3,0,2,2,0,
  3,3,3,3,2,3,1,2,3,1,3,1,2,1,2,2,2,3,1,3,3,1,0,1,2,3,3,3,1,0,2,3,0,0,1,0,
  3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,3,3,2,3,2,3,1,2,1,1,3,3,1,3,2,2,0,0,1,0,
  3,3,1,3,2,3,2,1,3,2,0,0,1,0,1,0,1,3,0,2,3,1,0,1,0,0,3,3,1,0,3,3,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,2,3,2,3,3,2,3,1,1,3,3,3,1,3,2,3,0,2,1,0,
  0,0,3,0,3,0,3,3,1,3,3,3,3,3,3,3,3,0,2,0,0,2,3,2,2,2,0,0,2,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,2,3,1,3,2,1,2,0,3,2,3,3,1,1,1,1,3,3,3,1,2,1,3,0,1,0,0,
  2,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,0,3,1,0,3,3,2,3,3,0,1,1,1,0,0,1,0,0,0,
  0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,2,3,2,2,2,0,3,0,2,2,1,0,2,2,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,2,3,2,1,0,0,1,0,2,2,2,1,2,1,0,0,0,0,
  3,3,2,3,3,3,3,1,3,3,3,2,2,1,0,1,2,3,1,2,1,0,1,2,0,2,2,3,1,3,0,0,1,0,1,2,
  3,3,0,2,0,3,0,1,2,2,0,0,2,0,0,0,0,2,0,2,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
  3,3,2,3,2,3,2,2,3,1,3,3,3,2,1,0,2,3,2,3,3,0,0,0,0,2,1,2,0,1,1,2,0,1,1,0,
  0,0,3,0,2,0,0,1,0,2,3,1,0,2,0,3,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,3,0,3,0,3,3,0,3,2,3,3,2,2,1,3,0,2,0,0,3,2,0,3,3,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,3,3,3,0,3,2,3,1,1,1,0,2,2,2,0,1,1,0,0,2,0,0,1,1,2,1,0,0,0,0,2,0,
  3,3,2,3,3,3,3,3,3,2,2,3,2,1,0,2,1,2,1,3,2,0,0,0,0,0,1,1,0,0,0,0,0,2,0,1,
  0,1,3,0,3,1,3,2,0,3,2,2,2,3,3,2,3,2,1,0,0,1,3,1,0,0,0,0,1,0,0,0,0,0,0,0,
  0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,0,1,1,2,2,0,1,0,1,0,0,3,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,3,0,0,0,
  3,3,2,2,2,3,0,2,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,2,0,0,0,2,0,0,
  0,0,2,1,2,1,1,2,0,0,1,2,2,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,
  1,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_4LithuanianModel =
{
  Iso_8859_4_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990037394523811,
  PR_TRUE,
  "ISO-8859-4",
  "lt"
};

const SequenceModel Iso_8859_10LithuanianModel =
{
  Iso_8859_10_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990037394523811,
  PR_TRUE,
  "ISO-8859-10",
  "lt"
};

const SequenceModel Iso_8859_13LithuanianModel =
{
  Iso_8859_13_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990037394523811,
  PR_TRUE,
  "ISO-8859-13",
  "lt"
};

const LanguageModel LithuanianModel =
{
  "lt",
  Unicode_CharOrder,
  72,
  LithuanianLangModel,
  36,
  4,
  (float)0.39411092741692494,
  23,
  (float)0.03166060999861138,
};
