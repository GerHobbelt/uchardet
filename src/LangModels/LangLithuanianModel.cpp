/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Lithuanian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 07:22:31.106348
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 4X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 6X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24, 52, 53,SYM, 54, 45,SYM,SYM, 21, 36, 55, 56,SYM, 23,SYM, /* AX */
  SYM, 24,SYM, 57,SYM, 58, 45,SYM,SYM, 21, 36, 59, 60, 61, 23, 62, /* BX */
   37, 39, 48, 63, 41, 49, 64, 27, 29, 34, 32, 65, 18, 40, 66, 47, /* CX */
   67, 38, 46, 68, 69, 70, 42,SYM, 71, 20, 51, 72, 44, 73, 30, 74, /* DX */
   37, 39, 48, 75, 41, 49, 76, 27, 29, 34, 32, 77, 18, 40, 78, 47, /* EX */
   79, 38, 46, 80, 81, 82, 42,SYM, 83, 20, 51, 84, 44, 85, 30,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_10_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 4X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 6X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 24, 36, 86, 47, 87, 88,SYM, 45, 89, 21, 90, 23,SYM, 30, 91, /* AX */
  SYM, 24, 36, 92, 47, 93, 94,SYM, 45, 95, 21, 96, 23, 97, 30, 98, /* BX */
   37, 39, 48, 99, 41, 49,100, 27, 29, 34, 32,101, 18, 40,102,103, /* CX */
  104, 38, 46, 43,105,106, 42,107,108, 20, 51,109, 44,110,111,112, /* DX */
   37, 39, 48,113, 41, 49,114, 27, 29, 34, 32,115, 18, 40,116,117, /* EX */
  118, 38, 46, 43,119,120, 42,121,122, 20, 51,123, 44,124,125,126, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 4X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 22, 13,  4, 26, 16, 25,  0, 14,  9, 11, 10,  7,  3, /* 6X */
   12, 35,  5,  2,  6,  8, 15, 31, 33, 19, 28,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,127,SYM,128,SYM,SYM,SYM,SYM,129, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,130,SYM,131,SYM,SYM,SYM,SYM,132, /* BX */
   24, 27, 37,133, 41, 49, 32, 36, 29, 34,134, 18,135,136, 47, 45, /* CX */
   21,137, 38, 43, 46,138, 42,SYM, 20,139,140, 30, 44, 50, 23,141, /* DX */
   24, 27, 37,142, 41, 49, 32, 36, 29, 34,143, 18,144,145, 47, 45, /* EX */
   21,146, 38, 43, 46,147, 42,SYM, 20,148,149, 30, 44, 50, 23,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 72;
static const unsigned int Unicode_CharOrder[] =
{
  65,  1, 66, 17, 67, 22, 68, 13, 69,  4, 70, 26, 71, 16,72, 25,
  73,  0, 74, 14, 75,  9, 76, 11, 77, 10, 78,  7, 79,  3,80, 12,
  81, 35, 82,  5, 83,  2, 84,  6, 85,  8, 86, 15, 87, 31,88, 33,
  89, 19, 90, 28, 97,  1, 98, 17, 99, 22, 100, 13, 101,  4,102, 26,
  103, 16, 104, 25, 105,  0, 106, 14, 107,  9, 108, 11, 109, 10,110,  7,
  111,  3, 112, 12, 113, 35, 114,  5, 115,  2, 116,  6, 117,  8,118, 15,
  119, 31, 120, 33, 121, 19, 122, 28, 201, 34, 233, 34, 260, 24,261, 24,
  268, 29, 269, 29, 278, 18, 279, 18, 280, 32, 281, 32, 302, 27,303, 27,
  352, 21, 353, 21, 362, 30, 363, 30, 370, 20, 371, 20, 381, 23,382, 23,
};


/* Model Table:
 * Total considered sequences: 906 / 1296
 * - Positive sequences: first 561 (0.9950173769399764)
 * - Probable sequences: next 153 (714-561) (0.003983406956831859)
 * - Neutral sequences: last 582 (0.000999216103191758)
 * - Negative sequences: 390 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 LithuanianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,3,3,3,3,2,3,0,3,3,3,1,0,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,3,3,3,0,3,3,1,3,3,0,3,0,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,0,3,0,3,3,3,3,1,3,3,3,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,3,3,0,3,3,1,3,3,0,3,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,3,3,0,3,3,3,3,3,0,3,0,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,3,2,3,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,3,3,3,3,3,3,2,3,1,3,3,3,3,2,0,3,3,3,1,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,1,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,2,3,0,0,1,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,1,0,3,3,3,0,2,3,0,3,3,0,0,0,2,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,1,3,1,3,2,1,3,3,3,3,3,0,3,2,1,3,0,1,3,2,3,0,3,1,
  3,3,3,3,3,2,3,3,3,2,3,3,3,3,2,0,2,3,3,3,3,1,2,3,3,1,2,1,2,1,2,2,2,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,2,2,3,1,3,3,2,2,3,1,3,0,1,0,
  3,3,3,3,3,3,3,2,3,3,1,3,3,3,3,3,2,1,3,3,3,2,2,2,3,3,1,2,0,1,2,0,3,0,0,0,
  3,3,3,3,3,3,2,3,3,2,3,2,0,3,2,3,3,3,3,3,3,0,1,3,3,2,2,3,2,0,3,2,3,0,1,0,
  3,3,0,3,3,2,2,1,3,2,0,0,0,0,1,0,0,0,3,1,3,0,1,0,3,0,0,3,0,0,3,0,3,0,0,0,
  3,3,2,3,3,1,1,2,3,1,0,2,2,2,1,0,0,0,3,3,3,0,2,0,3,1,0,2,3,0,3,0,3,0,0,0,
  3,3,3,3,3,3,3,3,3,1,3,3,3,3,1,3,2,1,3,3,3,3,1,3,3,3,3,2,3,1,3,1,2,0,0,0,
  3,3,3,3,3,3,3,2,3,0,2,3,1,3,2,2,0,3,3,3,3,0,2,0,3,2,0,0,1,0,3,1,3,0,0,0,
  0,0,3,0,0,3,3,3,1,3,3,3,3,3,3,3,3,1,0,0,0,2,2,2,0,0,0,0,1,1,0,0,0,0,0,0,
  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,0,3,2,3,0,1,2,0,3,3,0,2,0,1,0,1,
  0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,3,2,3,3,3,2,0,0,3,0,0,3,0,3,2,0,2,0,0,0,
  3,3,3,3,3,3,3,2,3,3,1,3,0,2,1,0,1,1,2,2,1,0,3,0,2,3,1,0,1,0,3,2,0,1,0,1,
  3,3,3,3,3,2,3,3,3,2,3,2,1,3,0,3,1,2,3,3,3,0,0,0,2,0,1,2,0,0,2,0,2,0,0,0,
  0,0,3,0,0,3,0,1,0,1,1,2,0,0,3,2,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,3,3,3,3,3,1,2,2,0,1,0,2,0,1,2,3,0,0,0,0,2,0,1,0,0,0,0,2,0,0,0,0,
  3,3,1,3,3,3,3,0,3,2,2,3,1,1,0,0,2,0,2,2,1,0,2,0,0,0,3,0,1,0,0,1,0,0,1,0,
  0,1,3,0,0,3,3,1,0,3,3,0,3,2,1,3,3,1,2,0,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,3,3,3,1,2,3,0,3,2,0,3,0,1,2,1,3,2,3,0,0,0,2,2,0,0,2,0,1,1,2,0,1,0,
  3,3,0,2,3,0,0,1,1,1,0,0,0,2,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
  0,0,3,0,0,3,3,3,0,3,2,3,2,3,0,2,3,2,0,0,0,3,0,1,0,1,0,0,3,3,0,0,0,0,0,0,
  3,3,2,3,3,2,1,3,1,1,1,2,0,1,0,0,0,1,0,2,0,0,0,0,0,3,0,0,0,0,0,2,0,0,0,0,
  0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,0,2,1,0,2,0,0,0,0,1,2,0,0,2,0,2,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,3,0,0,
  0,0,0,0,0,0,0,1,0,0,3,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
};


const SequenceModel Iso_8859_4LithuanianModel =
{
  Iso_8859_4_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990007838968082,
  PR_TRUE,
  "ISO-8859-4",
  "lt"
};

const SequenceModel Iso_8859_10LithuanianModel =
{
  Iso_8859_10_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990007838968082,
  PR_TRUE,
  "ISO-8859-10",
  "lt"
};

const SequenceModel Iso_8859_13LithuanianModel =
{
  Iso_8859_13_CharToOrderMap,
  LithuanianLangModel,
  36,
  (float)0.9990007838968082,
  PR_TRUE,
  "ISO-8859-13",
  "lt"
};

const LanguageModel LithuanianModel =
{
  "lt",
  Unicode_CharOrder,
  72,
  LithuanianLangModel,
  36,
  5,
  (float)0.44000406867011,
  24,
  (float)0.03074106305308484,
  (float)0.9998163447519804,
};
