/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Danish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 01:28:04.877357
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 4X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 6X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM, 41,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 56, 67,SYM,SYM, 56,SYM,SYM,SYM, 60, 60, 66,SYM, /* BX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 68, 35, 59, 62, /* CX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 39, /* DX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 69, 35, 59, 62, /* EX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 66, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 4X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 6X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 70,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 71, 35, 59, 62, /* CX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 39, /* DX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 72, 35, 59, 62, /* EX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 66, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 4X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 6X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 73,SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM, 60,ILL, 56,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 41,SYM, 60,ILL, 56, 66, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 74,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 75, 35, 59, 62, /* CX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 39, /* DX */
   42, 32, 49, 51, 34, 21, 22, 38, 36, 28, 58, 45, 76, 35, 59, 62, /* EX */
   50, 37, 52, 30, 55, 53, 31,SYM, 23, 61, 40, 63, 33, 46, 57, 66, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm865_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 4X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  4, 16, 19,  7,  0, 13, 10, 17,  5, 24, 12,  9, 11,  2,  8, /* 6X */
   18, 29,  1,  6,  3, 15, 14, 25, 27, 20, 26,SYM,SYM,SYM,SYM,CTR, /* 7X */
   38, 33, 28, 49, 34, 42, 21, 38, 58, 45, 36, 62, 59, 77, 34, 21, /* 8X */
   28, 22, 22, 55, 31, 52, 63, 61, 66, 31, 33, 23,SYM, 23,SYM,SYM, /* 9X */
   32, 35, 30, 40, 37, 37,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* DX */
   44, 39, 78, 43, 48, 48, 79, 54, 65, 80, 81, 64, 82, 65, 47,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 60;
static const unsigned int Unicode_CharOrder[] =
{
  65,  4, 66, 16, 67, 19, 68,  7, 69,  0, 70, 13, 71, 10,72, 17,
  73,  5, 74, 24, 75, 12, 76,  9, 77, 11, 78,  2, 79,  8,80, 18,
  81, 29, 82,  1, 83,  6, 84,  3, 85, 15, 86, 14, 87, 25,88, 27,
  89, 20, 90, 26, 97,  4, 98, 16, 99, 19, 100,  7, 101,  0,102, 13,
  103, 10, 104, 17, 105,  5, 106, 24, 107, 12, 108,  9, 109, 11,110,  2,
  111,  8, 112, 18, 113, 29, 114,  1, 115,  6, 116,  3, 117, 15,118, 14,
  119, 25, 120, 27, 121, 20, 122, 26, 197, 21, 198, 22, 201, 28,216, 23,
  229, 21, 230, 22, 233, 28, 248, 23,
};


/* Model Table:
 * Total considered sequences: 1180 / 900
 * - Positive sequences: first 509 (0.9950044876263864)
 * - Probable sequences: next 161 (670-509) (0.003999037603270916)
 * - Neutral sequences: last 230 (0.0009964747703427035)
 * - Negative sequences: -280 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 DanishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,3,3,2,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,1,
  3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,3,3,2,3,3,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,2,0,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,2,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,0,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,2,1,3,3,3,3,3,2,1,0,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,2,1,1,2,1,
  3,3,3,3,3,3,3,2,3,3,2,3,3,2,3,3,2,3,2,1,3,2,3,3,2,2,1,1,1,1,
  3,3,2,3,3,3,3,2,3,3,3,2,2,3,2,3,2,3,2,3,3,3,3,3,3,1,1,2,1,0,
  3,3,3,3,3,3,3,3,3,3,2,3,2,2,2,3,2,2,2,1,3,3,3,2,3,0,1,0,1,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,3,3,3,2,1,1,1,2,2,2,2,1,1,
  3,3,3,3,3,3,3,2,3,3,1,2,2,1,1,3,3,2,2,2,3,3,3,3,3,2,1,1,1,1,
  3,3,3,3,3,3,3,2,3,2,1,3,2,2,3,3,2,2,2,2,3,3,3,3,3,2,1,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,2,3,3,2,1,1,1,0,1,0,
  3,3,2,3,3,3,3,2,3,3,2,2,3,2,2,3,2,3,1,3,3,0,1,1,1,3,2,0,1,2,
  3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,2,3,2,3,2,1,0,0,1,1,2,2,1,0,1,
  3,3,3,3,1,0,3,3,1,3,2,1,2,2,3,0,3,1,2,0,0,0,1,0,0,0,0,0,0,0,
  2,3,3,3,1,2,3,3,2,3,3,3,3,3,3,2,3,1,1,2,0,0,0,1,1,0,0,0,0,0,
  3,3,3,3,1,1,3,3,1,3,3,3,3,2,3,1,3,1,1,0,1,1,1,0,3,0,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,1,2,1,1,3,1,2,1,1,2,1,3,3,1,1,1,0,1,0,
  3,3,3,2,3,3,3,1,3,2,1,2,2,2,1,1,2,3,3,3,2,0,1,0,0,3,1,0,0,0,
  3,1,2,1,3,3,2,1,3,1,2,2,2,1,1,2,1,2,1,1,2,0,0,0,1,1,3,1,1,0,
  2,1,1,2,2,3,1,1,2,2,1,1,1,2,2,1,1,2,2,2,1,0,0,0,0,1,0,2,0,0,
  2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,
  1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,3,0,0,1,1,0,0,0,0,0,1,0,0,0,0,
};


const SequenceModel Iso_8859_15DanishModel =
{
  Iso_8859_15_CharToOrderMap,
  DanishLangModel,
  30,
  (float)0.9990035252296573,
  PR_TRUE,
  "ISO-8859-15",
  "da"
};

const SequenceModel Iso_8859_1DanishModel =
{
  Iso_8859_1_CharToOrderMap,
  DanishLangModel,
  30,
  (float)0.9990035252296573,
  PR_TRUE,
  "ISO-8859-1",
  "da"
};

const SequenceModel Windows_1252DanishModel =
{
  Windows_1252_CharToOrderMap,
  DanishLangModel,
  30,
  (float)0.9990035252296573,
  PR_TRUE,
  "WINDOWS-1252",
  "da"
};

const SequenceModel Ibm865DanishModel =
{
  Ibm865_CharToOrderMap,
  DanishLangModel,
  30,
  (float)0.9990035252296573,
  PR_TRUE,
  "IBM865",
  "da"
};

const LanguageModel DanishModel =
{
  "da",
  Unicode_CharOrder,
  60,
  DanishLangModel,
  30,
  5,
  (float)0.4456329321562808,
  20,
  (float)0.03062934337858024,
  (float)0.9996439532842727,
};
