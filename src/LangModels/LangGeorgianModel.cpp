/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Georgian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 04:51:26.478567
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Georgian_Academy_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 25, 44, 37, 40, 20, 49, 45, 38, 28, 56, 52, 35, 42, 30, 27, /* 4X */
   46, 58, 31, 32, 29, 43, 50, 51, 55, 47, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 25, 44, 37, 40, 20, 49, 45, 38, 28, 56, 52, 35, 42, 30, 27, /* 6X */
   46, 58, 31, 32, 29, 43, 50, 51, 55, 47, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,SYM, 72,SYM,SYM,SYM,SYM, 73,SYM, 65,SYM, 74,CTR,CTR,CTR, /* 8X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 65,SYM, 75,CTR,CTR, 76, /* 9X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 77,SYM,SYM,CTR,SYM,SYM, /* AX */
  SYM,SYM,NUM,NUM,SYM, 78,SYM,SYM,SYM,NUM, 69,SYM,SYM,SYM,SYM,SYM, /* BX */
    0, 10, 14,  9,  2, 11, 21, 13,  1, 16,  7,  6,  8,  5, 23, 54, /* CX */
    4,  3, 15, 12, 26, 24, 34, 33, 17, 36, 18, 39, 22, 53, 19, 41, /* DX */
   48, 79, 80, 81, 82, 83, 84, 66, 67, 59, 85, 86, 70, 62, 87, 88, /* EX */
   89, 90, 64, 63, 91, 92, 61,SYM, 68, 93, 94, 95, 60, 96, 97, 98, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Georgian_Ps_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 25, 44, 37, 40, 20, 49, 45, 38, 28, 56, 52, 35, 42, 30, 27, /* 4X */
   46, 58, 31, 32, 29, 43, 50, 51, 55, 47, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 25, 44, 37, 40, 20, 49, 45, 38, 28, 56, 52, 35, 42, 30, 27, /* 6X */
   46, 58, 31, 32, 29, 43, 50, 51, 55, 47, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,SYM, 99,SYM,SYM,SYM,SYM,100,SYM, 65,SYM,101,CTR,CTR,CTR, /* 8X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 65,SYM,102,CTR,CTR,103, /* 9X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,104,SYM,SYM,CTR,SYM,SYM, /* AX */
  SYM,SYM,NUM,NUM,SYM,105,SYM,SYM,SYM,NUM, 69,SYM,SYM,SYM,SYM,SYM, /* BX */
    0, 10, 14,  9,  2, 11, 21,106, 13,  1, 16,  7,  6,  8,107,  5, /* CX */
   23, 54,  4,  3, 15,108, 12, 26, 24, 34, 33, 17, 36, 18, 39, 22, /* DX */
   53, 19,109, 41, 48,110, 71, 66, 67, 59,111,112, 70, 62,113,114, /* EX */
  115,116, 64, 63,117,118, 61,SYM, 68,119,120,121, 60,122,123,124, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 110;
static const unsigned int Unicode_CharOrder[] =
{
  65, 25, 66, 44, 67, 37, 68, 40, 69, 20, 70, 49, 71, 45,72, 38,
  73, 28, 75, 52, 76, 35, 77, 42, 78, 30, 79, 27, 80, 46,82, 31,
  83, 32, 84, 29, 85, 43, 86, 50, 87, 51, 89, 47, 97, 25,98, 44,
  99, 37, 100, 40, 101, 20, 102, 49, 103, 45, 104, 38, 105, 28,107, 52,
  108, 35, 109, 42, 110, 30, 111, 27, 112, 46, 114, 31, 115, 32,116, 29,
  117, 43, 118, 50, 119, 51, 121, 47, 4304,  0, 4305, 10, 4306, 14,4307,  9,
  4308,  2, 4309, 11, 4310, 21, 4311, 13, 4312,  1, 4313, 16, 4314,  7,4315,  6,
  4316,  8, 4317,  5, 4318, 23, 4319, 54, 4320,  4, 4321,  3, 4322, 15,4323, 12,
  4324, 26, 4325, 24, 4326, 34, 4327, 33, 4328, 17, 4329, 36, 4330, 18,4331, 39,
  4332, 22, 4333, 53, 4334, 19, 4335, 41, 4336, 48, 7312,  0, 7313, 10,7314, 14,
  7315,  9, 7316,  2, 7317, 11, 7318, 21, 7319, 13, 7320,  1, 7321, 16,7322,  7,
  7323,  6, 7324,  8, 7325,  5, 7326, 23, 7327, 54, 7328,  4, 7329,  3,7330, 15,
  7331, 12, 7332, 26, 7333, 24, 7334, 34, 7335, 33, 7336, 17, 7337, 36,7338, 18,
  7339, 39, 7340, 22, 7341, 53, 7342, 19, 7343, 41, 7344, 48,
};


/* Model Table:
 * Total considered sequences: 1339 / 3025
 * - Positive sequences: first 849 (0.9950051447517181)
 * - Probable sequences: next 213 (1062-849) (0.003996392322252018)
 * - Neutral sequences: last 1963 (0.0009984629260298972)
 * - Negative sequences: 1686 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 GeorgianLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,1,0,0,0,3,3,0,3,0,0,3,
   0,3,0,0,0,0,0,0,3,0,0,0,0,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,1,3,1,0,1,0,0,1,3,3,0,3,0,0,3,
   0,3,1,0,0,0,0,1,3,0,0,0,0,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,3,2,0,3,0,0,3,
   0,3,0,0,0,0,0,0,1,0,0,0,0,3,3,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,1,1,0,2,0,0,3,
   0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,
  3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,3,3,0,3,0,0,3,
   0,3,0,0,0,0,0,0,2,0,0,0,0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,3,3,0,3,0,0,3,
   0,3,0,0,0,0,0,0,3,0,0,0,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,3,3,0,3,0,0,3,
   0,3,0,0,0,0,0,0,0,0,0,0,0,3,3,
  3,3,3,3,2,3,3,1,3,3,3,3,3,3,3,3,3,3,2,3,0,3,3,2,3,0,3,0,0,0,0,0,0,3,2,0,3,0,0,1,
   0,2,0,0,0,0,0,0,2,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,0,3,2,2,3,0,3,0,0,0,0,0,0,3,2,0,2,0,0,3,
   0,3,0,0,0,0,0,0,2,0,0,0,0,1,2,
  3,3,3,3,3,3,3,3,3,3,1,3,3,2,3,3,2,3,0,1,0,3,2,0,0,0,2,0,0,0,0,0,0,1,3,0,0,0,0,1,
   0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,0,1,3,0,0,0,3,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
  3,3,3,3,3,3,3,3,3,3,1,0,3,3,2,3,3,3,2,2,0,3,2,0,2,0,2,0,0,0,0,0,0,2,1,0,1,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,3,3,0,3,0,0,3,
   0,3,0,0,0,0,0,0,3,0,0,0,0,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,3,0,3,0,3,2,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,1,2,0,3,0,0,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
   0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,
  3,3,3,3,3,3,3,3,3,2,2,3,3,3,2,2,3,3,1,0,0,3,2,1,0,0,2,0,0,0,0,0,0,3,0,0,1,0,0,0,
   0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,2,3,3,2,1,1,1,3,1,0,0,2,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,1,3,3,3,3,3,1,1,3,3,2,0,3,3,3,0,1,0,1,0,2,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,2,3,3,0,3,3,2,1,0,3,2,0,3,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,0,3,1,3,0,1,0,2,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,1,0,3,0,3,3,3,3,3,3,0,0,3,0,3,2,0,
   3,0,3,3,3,3,3,3,0,3,3,3,2,0,0,
  3,3,3,3,3,3,3,1,3,1,2,3,3,2,1,0,0,3,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,0,3,3,3,3,2,0,0,3,3,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,2,3,2,1,0,2,3,1,0,3,1,2,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,1,1,3,3,2,0,3,0,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,0,1,3,3,3,3,3,0,0,3,0,3,2,0,
   3,0,3,3,3,3,3,3,0,3,3,3,3,0,0,
  3,3,3,3,3,3,3,3,3,2,0,1,3,2,0,3,0,2,1,3,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,3,3,3,0,0,3,0,3,3,0,
   3,0,3,3,3,3,3,2,0,3,3,3,3,0,0,
  0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,3,3,3,0,0,3,0,3,1,0,
   3,0,3,2,3,3,3,1,0,3,3,0,3,0,0,
  1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,2,3,3,0,0,3,0,3,3,0,
   2,0,2,3,2,2,2,3,0,2,2,2,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,1,3,3,3,3,2,3,0,0,2,0,3,1,0,
   3,0,1,3,3,3,1,3,0,2,2,1,3,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,3,3,3,0,0,3,0,3,2,0,
   3,0,3,3,3,3,2,3,0,2,2,2,3,0,0,
  1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,2,2,3,0,0,3,0,3,3,0,
   2,0,2,3,3,2,3,3,0,2,2,3,3,0,0,
  3,3,3,1,3,3,3,2,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,1,3,3,1,0,1,2,2,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,1,1,3,0,0,3,1,2,1,0,
   3,0,2,3,3,1,2,3,0,2,1,2,3,0,0,
  3,3,3,1,3,3,3,1,3,0,0,3,3,0,0,0,2,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,2,3,2,0,0,3,0,2,3,0,
   3,0,0,3,2,2,1,2,0,0,1,0,3,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,2,3,2,0,0,1,0,0,1,0,
   1,0,2,3,1,1,1,2,0,0,0,1,1,0,0,
  3,3,3,1,3,3,3,3,3,0,0,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,2,3,3,0,0,2,0,1,0,0,
   2,0,2,3,2,2,1,3,0,2,3,2,1,0,0,
  3,3,3,1,2,3,2,1,1,2,0,3,3,0,3,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,2,1,1,3,0,0,0,0,2,0,0,
   1,0,3,3,3,0,3,3,0,1,1,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,0,3,3,3,3,3,0,0,3,0,3,1,0,
   3,0,3,0,3,3,3,2,0,2,1,0,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,2,3,3,2,0,0,3,0,3,0,0,
   1,0,2,3,3,0,1,3,0,0,1,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,2,2,3,3,0,0,3,0,1,3,0,
   0,0,1,3,1,3,1,2,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,2,2,3,3,0,0,3,0,1,3,0,
   2,0,2,3,2,1,3,2,0,1,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,2,2,2,3,3,0,0,2,1,2,1,0,
   2,0,3,1,3,1,2,0,0,0,0,2,0,0,0,
  3,3,3,1,0,3,2,1,0,0,0,0,3,0,2,0,2,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,3,0,3,2,0,0,3,0,1,0,0,
   0,0,0,2,0,1,0,2,0,3,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,1,1,1,0,0,0,1,0,0,1,0,
   3,0,0,1,0,2,2,2,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,0,3,2,3,0,0,2,0,1,3,0,
   1,0,0,0,0,0,0,1,0,0,0,3,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,3,3,2,2,2,3,0,0,3,0,1,1,0,
   2,0,1,1,2,1,0,3,0,0,0,2,1,0,0,
  3,3,3,0,3,3,2,0,1,3,0,2,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,1,0,2,1,0,2,1,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Georgian_AcademyGeorgianModel =
{
  Georgian_Academy_CharToOrderMap,
  GeorgianLangModel,
  55,
  (float)0.9990015370739701,
  PR_FALSE,
  "GEORGIAN-ACADEMY",
  "ka"
};

const SequenceModel Georgian_PsGeorgianModel =
{
  Georgian_Ps_CharToOrderMap,
  GeorgianLangModel,
  55,
  (float)0.9990015370739701,
  PR_FALSE,
  "GEORGIAN-PS",
  "ka"
};

const LanguageModel GeorgianModel =
{
  "ka",
  Unicode_CharOrder,
  110,
  GeorgianLangModel,
  55,
  5,
  (float)0.4488021495761185,
  37,
  (float)0.030411813987003572,
  (float)0.999021144154429,
};
