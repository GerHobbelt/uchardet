/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Georgian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 22:42:42.117794
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Georgian_Academy_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, /* 4X */
   76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101, /* 6X */
  102,103,104,105,106,107,108,109,110,111,112,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,SYM,113,SYM,SYM,SYM,SYM,114,SYM,115,SYM,116,CTR,CTR,CTR, /* 8X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,117,SYM,118,CTR,CTR, 57, /* 9X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,119,SYM,SYM,CTR,SYM,SYM, /* AX */
  SYM,SYM,NUM,NUM,SYM,120,SYM,SYM,SYM,NUM,121,SYM,SYM,SYM,SYM,SYM, /* BX */
    0, 10, 15,  9,  2, 11, 23, 13,  1, 17,  6,  7,  8,  5, 22, 32, /* CX */
    4,  3, 14, 12, 24, 20, 26, 25, 16, 28, 19, 27, 21, 30, 18, 29, /* DX */
   31,122, 36, 40, 45,123,124, 41, 39, 33, 55, 50, 58, 35, 47, 54, /* EX */
   52, 43, 46, 37, 53, 59, 38,SYM, 48, 60, 44, 56, 34, 51, 49, 57, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Georgian_Ps_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139, /* 4X */
  140,141,142,143,144,145,146,147,148,149,150,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165, /* 6X */
  166,167,168,169,170,171,172,173,174,175,176,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,SYM,177,SYM,SYM,SYM,SYM,178,SYM,179,SYM,180,CTR,CTR,CTR, /* 8X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,181,SYM,182,CTR,CTR, 57, /* 9X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,183,SYM,SYM,CTR,SYM,SYM, /* AX */
  SYM,SYM,NUM,NUM,SYM,184,SYM,SYM,SYM,NUM,185,SYM,SYM,SYM,SYM,SYM, /* BX */
    0, 10, 15,  9,  2, 11, 23,186, 13,  1, 17,  6,  7,  8, 36,  5, /* CX */
   22, 32,  4,  3, 14, 40, 12, 24, 20, 26, 25, 16, 28, 19, 27, 21, /* DX */
   30, 18, 45, 29, 31,187, 42, 41, 39, 33, 55, 50, 58, 35, 47, 54, /* EX */
   52, 43, 46, 37, 53, 59, 38,SYM, 48, 60, 44, 56, 34, 51, 49, 57, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    66

static const unsigned int Unicode_CharOrder[] =
{
  4304,  0, 4305, 10, 4306, 15, 4307,  9, 4308,  2, 4309, 11, 4310, 23, 4311, 13,
  4312,  1, 4313, 17, 4314,  6, 4315,  7, 4316,  8, 4317,  5, 4318, 22, 4319, 32,
  4320,  4, 4321,  3, 4322, 14, 4323, 12, 4324, 24, 4325, 20, 4326, 26, 4327, 25,
  4328, 16, 4329, 28, 4330, 19, 4331, 27, 4332, 21, 4333, 30, 4334, 18, 4335, 29,
  4336, 31, 7312,  0, 7313, 10, 7314, 15, 7315,  9, 7316,  2, 7317, 11, 7318, 23,
  7319, 13, 7320,  1, 7321, 17, 7322,  6, 7323,  7, 7324,  8, 7325,  5, 7326, 22,
  7327, 32, 7328,  4, 7329,  3, 7330, 14, 7331, 12, 7332, 24, 7333, 20, 7334, 26,
  7335, 25, 7336, 16, 7337, 28, 7338, 19, 7339, 27, 7340, 21, 7341, 30, 7342, 18,
  7343, 29, 7344, 31,
};

static const float OrderToRatio[] =
{
  0.134647006,  0.134647006,  0.126723059,  0.126723059,  0.089979854,  0.089979854,  0.071702166,  0.071702166, 
  0.061639814,  0.061639814,  0.055138377,  0.055138377,  0.048648664,  0.048648664,  0.048215610,  0.048215610, 
  0.042081036,  0.042081036,  0.039614115,  0.039614115,  0.035772557,  0.035772557,  0.029726157,  0.029726157, 
  0.027989054,  0.027989054,  0.023571311,  0.023571311,  0.020415850,  0.020415850,  0.020249760,  0.020249760, 
  0.016552553,  0.016552553,  0.015927763,  0.015927763,  0.012414720,  0.012414720,  0.011390337,  0.011390337, 
  0.009896262,  0.009896262,  0.009694268,  0.009694268,  0.008703347,  0.008703347,  0.008312303,  0.008312303, 
  0.008060726,  0.008060726,  0.005816805,  0.005816805,  0.004339583,  0.004339583,  0.003820797,  0.003820797, 
  0.003193564,  0.003193564,  0.002479134,  0.002479134,  0.001243963,  0.001243963,  0.001213676,  0.001213676, 
  0.000692448,  0.000692448, 
};


/* Model Table:
 * Number of web pages processed for this model: 1558
 * Number of characters consumed for this model: 4094172
 * Total considered sequences: 954 / 1089
 *
 * - Positive sequences: first 529 (0.9950675742889232)
 * - Probable sequences: next 111 (640-529) (0.003932563730573491)
 * - Neutral sequences: last 449 (0.0009998619805032805)
 * - Negative sequences: 135 (off-ratio, TODO)
 */


#define GeorgianUnicodeAlphabetWidth         33
#define GeorgianUnicodeCharToOrderIsReduced  0


#define GeorgianFCMLowerBound  4304
#define GeorgianFCMUpperBound  4336


static const PRUint8 GeorgianUnicodeCharToOrder[] =
{
  1,11,16,10,3,12,24,14,2,18,7,8,9,6,23,33,5,4,15,13,
  25,21,27,26,17,29,20,28,22,31,19,30,32,
};

static const PRUint8 GeorgianCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,
  0,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,2,1,2,1,2,1,1,0,
  0,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,2,3,3,3,2,1,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,
  0,3,3,3,3,2,3,1,3,3,3,3,3,3,3,3,3,3,
  3,3,2,3,3,2,3,3,2,2,1,2,1,1,2,1,
  0,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,
  3,3,3,2,3,3,3,3,3,3,3,2,3,3,1,3,
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,
  3,3,3,3,2,2,3,3,3,2,3,2,3,2,2,2,
  0,3,3,3,3,3,3,3,3,3,2,1,3,3,2,2,3,3,
  1,1,1,1,1,1,2,1,1,3,1,1,1,0,1,1,
  0,3,3,3,3,3,3,3,3,3,3,1,1,3,3,2,1,3,
  1,0,1,1,1,1,3,0,0,1,1,1,1,3,1,1,
  0,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,2,3,
  3,2,2,1,1,1,2,1,1,2,1,1,1,2,1,1,
  0,3,3,3,3,3,2,3,3,3,3,3,2,1,3,3,3,3,
  3,3,3,3,3,3,3,3,2,3,3,3,2,2,2,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,
  1,3,1,3,2,1,2,1,0,0,0,1,1,0,1,0,
  0,3,3,3,3,3,3,3,3,3,1,2,3,3,2,1,2,3,
  3,1,1,1,1,1,3,2,3,0,1,2,1,0,1,0,
  0,3,3,3,2,3,3,3,3,3,2,2,3,3,2,2,1,3,
  1,1,1,1,1,1,3,1,0,0,1,1,2,1,1,0,
  0,3,3,3,2,3,3,3,2,3,1,1,3,3,2,3,1,3,
  3,2,1,2,1,2,1,1,0,0,0,1,0,0,1,0,
  0,3,3,3,2,3,3,3,3,3,1,2,3,3,2,1,1,3,
  1,1,1,1,1,1,2,1,0,0,1,1,1,0,1,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,
  1,1,1,1,1,0,2,1,1,0,0,1,1,1,1,0,
  0,3,3,3,2,3,3,2,2,3,3,1,3,3,1,0,1,1,
  2,3,0,1,1,1,1,1,1,0,1,0,1,0,1,0,
  0,3,3,3,3,3,3,2,3,3,1,1,3,3,2,3,1,3,
  1,0,3,1,1,1,1,1,1,0,0,1,0,0,0,0,
  0,3,3,3,1,3,3,3,3,2,1,1,3,3,1,0,1,1,
  1,0,0,1,2,0,0,1,3,0,0,0,0,0,0,0,
  0,3,3,3,2,3,3,3,2,1,1,1,1,3,1,3,1,1,
  1,0,1,1,0,0,2,1,3,0,0,1,0,0,0,0,
  0,3,3,3,2,3,3,1,3,3,1,2,2,3,2,1,1,2,
  1,0,1,1,0,1,2,0,1,3,0,0,0,1,1,0,
  0,3,3,3,3,3,3,3,2,2,2,1,1,3,2,2,1,2,
  1,3,2,1,0,0,1,1,0,0,0,1,0,0,1,0,
  0,3,3,3,1,3,3,3,3,3,2,1,3,3,1,0,0,1,
  0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,
  0,3,3,3,3,3,3,3,3,3,2,1,3,3,1,1,1,1,
  1,0,1,1,3,1,1,1,0,1,1,1,1,2,0,0,
  0,3,3,3,1,3,3,3,3,3,1,1,3,3,1,0,1,1,
  0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,
  0,3,3,3,1,3,3,1,1,3,1,1,3,3,1,0,0,1,
  1,3,0,2,0,0,1,1,1,0,0,0,0,0,0,1,
  0,3,3,3,1,1,3,1,1,1,3,1,3,3,1,0,3,1,
  1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,
  0,3,3,3,1,3,3,1,1,1,2,0,2,2,0,0,0,0,
  2,0,0,1,0,0,0,0,2,0,0,0,1,0,0,0,
  0,3,3,3,1,1,3,1,2,1,0,1,1,2,1,1,1,1,
  1,1,1,3,0,1,1,1,3,0,0,1,0,0,0,0,
  0,3,3,2,1,1,2,1,1,1,1,1,1,3,1,0,0,1,
  1,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,
};


const SequenceModel Georgian_AcademyGeorgianModel =
{
  Georgian_Academy_CharToOrderMap,
  GeorgianFCMLowerBound,
  GeorgianFCMUpperBound,
  GeorgianUnicodeCharToOrder,
  GeorgianCompactedLangModel,
  33,
  (float)0.9990001380194967,
  PR_FALSE,
  "GEORGIAN-ACADEMY",
  "ka"
};

const SequenceModel Georgian_PsGeorgianModel =
{
  Georgian_Ps_CharToOrderMap,
  GeorgianFCMLowerBound,
  GeorgianFCMUpperBound,
  GeorgianUnicodeCharToOrder,
  GeorgianCompactedLangModel,
  33,
  (float)0.9990001380194967,
  PR_FALSE,
  "GEORGIAN-PS",
  "ka"
};

const LanguageModel GeorgianModel =
{
  "ka",
  Unicode_CharOrder,
  66,
  GeorgianFCMLowerBound,
  GeorgianFCMUpperBound,
  GeorgianUnicodeCharToOrderIsReduced,

  GeorgianUnicodeCharToOrder,
  OrderToRatio,
  GeorgianCompactedLangModel,
  33,
  4,
  (float)0.42305208476829986,
  23,
  (float)0.030860696619487406,
  (float)0.9998666397015075,
};
