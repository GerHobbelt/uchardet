/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Czech *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:07:45.113195
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 4X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 6X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 65,SYM, 46,SYM, 51, 54,SYM,SYM, 29, 61, 38, 70,SYM, 28, 58, /* AX */
  SYM, 65,SYM, 46,SYM, 51, 54,SYM,SYM, 29, 61, 38, 71,SYM, 28, 58, /* BX */
   72, 18, 73, 50, 43, 74, 47, 45, 27, 24, 60, 57, 23, 15, 56, 39, /* CX */
   59, 55, 36, 37, 48, 66, 41,SYM, 25, 32, 33, 64, 42, 26, 69, 52, /* DX */
   75, 18, 76, 50, 43, 77, 47, 45, 27, 24, 60, 57, 23, 15, 56, 39, /* EX */
   59, 55, 36, 37, 48, 66, 41,SYM, 25, 32, 33, 64, 42, 26, 69,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 4X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 6X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 54, 38, 28, 78, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 54, 38, 28, 79, /* 9X */
  SYM,SYM,SYM, 46,SYM, 65,SYM,SYM,SYM,SYM, 61,SYM,SYM,SYM,SYM, 58, /* AX */
  SYM,SYM,SYM, 46,SYM,SYM,SYM,SYM,SYM, 65, 61,SYM, 51,SYM, 51, 58, /* BX */
   80, 18, 81, 50, 43, 82, 47, 45, 27, 24, 60, 57, 23, 15, 56, 39, /* CX */
   59, 55, 36, 37, 48, 66, 41,SYM, 25, 32, 33, 64, 42, 26, 69, 52, /* DX */
   83, 18, 84, 50, 43, 85, 47, 45, 27, 24, 60, 57, 23, 15, 56, 39, /* EX */
   59, 55, 36, 37, 48, 66, 41,SYM, 25, 32, 33, 64, 42, 26, 69,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 4X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 6X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
   45, 42, 24, 86, 43, 32, 47, 45, 46, 57, 66, 66, 56, 87, 43, 47, /* 8X */
   24, 88, 89, 48, 41, 51, 51, 54, 54, 41, 42, 38, 38, 46,SYM, 27, /* 9X */
   18, 15, 37, 33, 65, 65, 28, 28, 60, 60,SYM, 90, 27, 61,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 18, 91, 23, 61,SYM,SYM,SYM,SYM, 58, 58,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 50, 50,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   59, 59, 39, 57, 39, 36, 15, 56, 23,SYM,SYM,SYM,SYM, 69, 32,SYM, /* DX */
   37, 52, 48, 55, 55, 36, 29, 29, 92, 33, 93, 64, 26, 26, 69,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 64, 25, 25,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 4X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 22, 16, 14,  1, 31, 30, 17,  5, 21, 10,  9, 11,  3,  0, /* 6X */
   13, 40,  7,  6,  4, 12,  8, 35, 34, 20, 19,SYM,SYM,SYM,SYM,CTR, /* 7X */
   43, 44, 44, 24, 65, 41, 42, 18, 65, 27, 43, 27, 47, 47, 24, 94, /* 8X */
   95, 39, 15, 39, 63, 63, 53, 37, 53, 48, 41, 67, 33, 23, 23, 42, /* 9X */
  SYM,SYM, 60,SYM,SYM,SYM,SYM, 52,SYM,SYM,SYM, 60,SYM,SYM, 96, 97, /* AX */
   98, 49,SYM,SYM, 49, 99,SYM,SYM, 46,100,101, 51, 51,102,103,104, /* BX */
  105, 55,SYM,SYM, 55, 36,SYM,SYM,SYM,SYM,SYM, 36, 66, 67, 66, 62, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 62,106,107, 25,SYM,SYM, 25,108, /* DX */
  109, 29,SYM,SYM, 29, 54, 54, 18, 38, 38, 15, 28, 28, 68, 37, 48, /* EX */
   68, 32, 33, 32, 64, 64,110,111, 26, 26,112, 58, 46, 58,113,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 82;
static const unsigned int Unicode_CharOrder[] =
{
   65,  2,  66, 22,  67, 16,  68, 14,  69,  1,  70, 31,  71, 30, 72, 17,
   73,  5,  74, 21,  75, 10,  76,  9,  77, 11,  78,  3,  79,  0, 80, 13,
   81, 40,  82,  7,  83,  6,  84,  4,  85, 12,  86,  8,  87, 35, 88, 34,
   89, 20,  90, 19,  97,  2,  98, 22,  99, 16, 100, 14, 101,  1,102, 31,
  103, 30, 104, 17, 105,  5, 106, 21, 107, 10, 108,  9, 109, 11,110,  3,
  111,  0, 112, 13, 113, 40, 114,  7, 115,  6, 116,  4, 117, 12,118,  8,
  119, 35, 120, 34, 121, 20, 122, 19, 193, 18, 201, 24, 205, 15,211, 37,
  218, 33, 221, 26, 225, 18, 233, 24, 237, 15, 243, 37, 250, 33,253, 26,
  268, 27, 269, 27, 270, 39, 271, 39, 282, 23, 283, 23, 327, 36,328, 36,
  344, 25, 345, 25, 352, 29, 353, 29, 356, 38, 357, 38, 366, 32,367, 32,
  381, 28, 382, 28,
};


/* Model Table:
 * Total considered sequences: 1359 / 1681
 * - Positive sequences: first 747 (0.995024712172107)
 * - Probable sequences: next 199 (946-747) (0.003977666094002408)
 * - Neutral sequences: last 735 (0.000997621733890619)
 * - Negative sequences: 322 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 CzechLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,1,3,
   2,3,3,0,0,3,0,3,3,3,3,3,0,2,3,3,2,0,3,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,
   3,3,3,0,0,3,0,3,3,3,3,3,0,2,3,3,3,0,1,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,3,
   3,3,3,0,0,3,0,3,3,3,3,3,0,2,3,3,3,0,2,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,
   3,2,3,3,3,0,3,3,3,3,3,3,3,1,1,2,0,3,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   3,3,3,3,3,3,3,2,0,3,2,2,3,1,1,3,2,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
   1,3,3,0,3,3,0,3,3,3,3,3,1,2,3,2,2,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
   3,2,3,0,3,1,2,2,0,1,2,3,3,1,0,2,2,2,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,
   3,1,3,0,3,0,3,3,3,3,3,3,3,1,2,2,2,2,2,0,1,
  3,3,3,3,2,3,3,3,1,3,3,1,3,2,3,3,3,3,3,3,
   3,1,3,3,3,3,3,3,3,3,1,1,3,1,0,0,3,1,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,
   3,2,3,0,3,0,3,2,2,3,3,3,3,0,1,1,3,2,0,0,1,
  3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,0,3,2,3,2,
   3,1,2,0,3,3,3,3,2,1,3,1,3,1,0,1,0,3,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,1,3,1,
   3,2,3,3,3,2,3,2,3,1,2,2,3,1,1,1,1,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,1,3,3,3,3,
   1,3,3,0,1,3,0,3,3,3,3,2,0,1,2,1,3,1,2,2,1,
  3,3,3,3,3,3,3,3,1,3,3,2,3,3,2,3,3,3,3,0,
   3,2,1,3,3,3,1,2,0,3,1,1,3,0,1,0,2,3,1,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
   3,2,3,3,3,3,3,3,2,2,2,2,3,1,1,3,2,1,0,0,0,
  1,0,1,3,3,1,3,3,3,3,3,3,0,3,3,0,3,3,0,3,
   0,3,3,0,0,3,0,3,3,3,1,0,0,0,0,0,2,0,2,0,1,
  3,3,3,3,3,3,2,3,2,3,3,3,3,2,2,3,3,3,2,3,
   3,1,1,0,3,0,0,1,0,0,2,0,3,0,1,1,1,1,0,0,2,
  3,3,3,3,3,3,2,3,3,3,3,3,3,1,3,1,3,1,3,1,
   3,1,1,0,3,3,3,2,3,1,1,1,3,1,0,2,1,2,1,0,0,
  1,1,1,3,3,1,3,3,3,3,3,3,1,3,3,0,3,3,0,3,
   0,3,3,0,0,3,0,3,3,3,3,0,0,0,0,0,2,0,1,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
   3,3,3,0,2,3,3,2,0,3,1,1,3,2,0,1,2,2,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,1,3,
   0,3,3,0,0,3,0,3,3,3,2,2,1,2,1,1,2,0,2,0,0,
  3,3,3,3,2,3,3,2,3,3,2,3,3,3,3,3,2,2,3,2,
   1,2,2,0,1,0,0,3,2,3,1,1,3,2,0,1,1,1,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,3,3,2,3,2,
   3,3,2,3,3,3,3,3,1,2,0,0,2,1,0,1,1,2,0,0,0,
  0,0,0,3,3,0,3,3,3,3,3,3,0,3,3,1,3,3,0,3,
   0,3,1,0,0,3,0,3,3,3,0,0,0,0,0,0,2,0,3,2,0,
  1,1,0,3,3,0,3,3,3,3,3,3,0,2,3,0,2,3,0,3,
   0,0,2,0,0,3,0,3,3,1,1,2,0,0,1,0,0,0,0,0,1,
  3,3,3,3,1,3,3,0,1,1,3,1,3,1,0,3,1,1,3,1,
   0,0,2,0,0,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,0,
  0,0,0,2,3,0,3,3,3,2,3,3,2,2,3,0,3,3,0,3,
   0,3,3,0,0,1,0,2,2,3,0,1,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,3,1,3,3,1,3,1,0,3,2,0,3,1,
   0,0,3,0,0,0,0,0,0,0,0,0,2,0,0,0,1,1,0,0,0,
  3,3,3,3,2,3,3,2,1,3,3,2,3,0,3,3,2,1,3,0,
   1,0,2,0,1,0,0,0,0,3,0,0,2,0,0,0,3,1,0,2,0,
  3,3,3,3,3,3,3,2,3,3,3,1,3,3,0,3,2,0,2,0,
   1,0,1,0,1,0,0,1,0,3,0,0,1,1,0,0,1,1,3,0,0,
  3,3,3,3,3,3,2,3,2,3,2,3,3,1,2,1,2,3,3,0,
   3,1,1,1,1,1,0,0,0,1,2,1,2,1,0,1,0,1,0,0,0,
  3,3,3,2,3,3,2,3,1,3,2,2,3,1,1,1,1,0,3,0,
   3,1,1,1,3,0,2,0,0,0,2,3,1,2,0,0,0,2,0,0,0,
  0,0,0,2,2,1,3,3,3,3,3,3,0,1,3,0,2,1,0,3,
   0,3,3,0,0,2,0,2,3,1,0,1,0,1,0,0,1,0,0,0,0,
  0,0,0,3,3,1,3,3,2,2,2,3,0,3,3,0,2,2,0,3,
   0,1,2,0,0,3,0,3,2,1,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,0,1,1,1,1,1,3,3,1,1,2,1,1,0,
   3,0,0,0,1,0,0,0,0,0,0,1,2,0,2,1,0,1,0,0,0,
  3,3,3,2,2,3,2,2,1,2,1,1,2,0,1,1,1,2,1,0,
   2,1,1,1,1,0,0,0,0,0,1,1,0,0,0,3,0,0,0,0,0,
  3,0,2,0,0,0,2,0,0,0,3,1,3,0,0,0,2,1,1,0,
   0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,
  0,1,0,3,1,0,1,3,0,2,1,1,0,0,3,0,1,1,0,3,
   0,2,1,0,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,
  3,0,2,0,0,1,1,0,0,0,1,0,3,0,0,0,0,0,2,0,
   0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  2,0,3,0,1,0,1,0,0,0,1,1,2,0,0,0,1,0,1,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,1,0,1,1,0,1,0,0,3,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2CzechModel =
{
  Iso_8859_2_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990023782661094,
  PR_TRUE,
  "ISO-8859-2",
  "cs"
};

const SequenceModel Windows_1250CzechModel =
{
  Windows_1250_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990023782661094,
  PR_TRUE,
  "WINDOWS-1250",
  "cs"
};

const SequenceModel Ibm852CzechModel =
{
  Ibm852_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990023782661094,
  PR_TRUE,
  "IBM852",
  "cs"
};

const SequenceModel Mac_CentraleuropeCzechModel =
{
  Mac_Centraleurope_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990023782661094,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "cs"
};

const LanguageModel CzechModel =
{
  "cs",
  Unicode_CharOrder,
  82,
  CzechLangModel,
  41,
  6,
  (float)0.39747705231553015,
  27,
  (float)0.03495288022220359,
};
