/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Czech *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 18:50:25.564246
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 4X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 6X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 48,SYM, 49,SYM, 44, 45,SYM,SYM, 29, 50, 38, 51,SYM, 26, 52, /* AX */
  SYM, 53,SYM, 54,SYM, 44, 45,SYM,SYM, 29, 55, 38, 56,SYM, 26, 57, /* BX */
   58, 19, 59, 60, 41, 61, 62, 63, 25, 24, 64, 65, 23, 12, 66, 40, /* CX */
   67, 68, 36, 37, 69, 70, 42,SYM, 27, 32, 33, 71, 43, 28, 72, 46, /* DX */
   73, 19, 74, 75, 41, 76, 77, 78, 25, 24, 79, 80, 23, 12, 81, 40, /* EX */
   82, 83, 36, 37, 84, 85, 42,SYM, 27, 32, 33, 86, 43, 28, 87,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 4X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 6X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 45, 38, 26, 88, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 29,SYM, 45, 38, 26, 89, /* 9X */
  SYM,SYM,SYM, 90,SYM, 91,SYM,SYM,SYM,SYM, 92,SYM,SYM,SYM,SYM, 93, /* AX */
  SYM,SYM,SYM, 94,SYM,SYM,SYM,SYM,SYM, 95, 96,SYM, 44,SYM, 44, 97, /* BX */
   98, 19, 99,100, 41,101,102,103, 25, 24,104,105, 23, 12,106, 40, /* CX */
  107,108, 36, 37,109,110, 42,SYM, 27, 32, 33,111, 43, 28,112, 46, /* DX */
  113, 19,114,115, 41,116,117,118, 25, 24,119,120, 23, 12,121, 40, /* EX */
  122,123, 36, 37,124,125, 42,SYM, 27, 32, 33,126, 43, 28,127,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 4X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 6X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  128, 43, 24,129, 41, 32,130,131,132,133,134,135,136,137, 41,138, /* 8X */
   24,139,140,141, 42, 44, 44, 45, 45, 42, 43, 38, 38,142,SYM, 25, /* 9X */
   19, 12, 37, 33,143,144, 26, 26,145,146,SYM,147, 25,148,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 19,149, 23,150,SYM,SYM,SYM,SYM,151,152,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,153,154,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  155,156, 40,157, 40, 36, 12,158, 23,SYM,SYM,SYM,SYM,159, 32,SYM, /* DX */
   37, 46,160,161,162, 36, 29, 29,163, 33,164,165, 28, 28,166,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,167, 27, 27,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 4X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  3, 22, 14, 13,  1, 31, 30, 17,  4, 21, 11, 10, 16,  2,  0, /* 6X */
    9, 39,  8,  6,  5, 15,  7, 35, 34, 20, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
   41,168,169, 24,170, 42, 43, 19,171, 25, 41, 25,172,173, 24,174, /* 8X */
  175, 40, 12, 40, 47, 47,176, 37,177,178, 42,179, 33, 23, 23, 43, /* 9X */
  SYM,SYM,180,SYM,SYM,SYM,SYM, 46,SYM,SYM,SYM,181,SYM,SYM,182,183, /* AX */
  184,185,SYM,SYM,186,187,SYM,SYM,188,189,190, 44, 44,191,192,193, /* BX */
  194,195,SYM,SYM,196, 36,SYM,SYM,SYM,SYM,SYM, 36,197,198,199,200, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,201,202,203, 27,SYM,SYM, 27,204, /* DX */
  205, 29,SYM,SYM, 29, 45, 45, 19, 38, 38, 12, 26, 26,206, 37,207, /* EX */
  208, 32, 33, 32,209,210,211,212, 28, 28,213,214,215,216,217,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 82;
static const unsigned int Unicode_CharOrder[] =
{
   65,  3,  66, 22,  67, 14,  68, 13,  69,  1,  70, 31,  71, 30, 72, 17,
   73,  4,  74, 21,  75, 11,  76, 10,  77, 16,  78,  2,  79,  0, 80,  9,
   81, 39,  82,  8,  83,  6,  84,  5,  85, 15,  86,  7,  87, 35, 88, 34,
   89, 20,  90, 18,  97,  3,  98, 22,  99, 14, 100, 13, 101,  1,102, 31,
  103, 30, 104, 17, 105,  4, 106, 21, 107, 11, 108, 10, 109, 16,110,  2,
  111,  0, 112,  9, 113, 39, 114,  8, 115,  6, 116,  5, 117, 15,118,  7,
  119, 35, 120, 34, 121, 20, 122, 18, 193, 19, 201, 24, 205, 12,211, 37,
  218, 33, 221, 28, 225, 19, 233, 24, 237, 12, 243, 37, 250, 33,253, 28,
  268, 25, 269, 25, 270, 40, 271, 40, 282, 23, 283, 23, 327, 36,328, 36,
  344, 27, 345, 27, 352, 29, 353, 29, 356, 38, 357, 38, 366, 32,367, 32,
  381, 26, 382, 26,
};


/* Model Table:
 * Total sequences: 1037
 * First 512 sequences: 0.9751874547460189
 * Next 512 sequences (512-1024): 0.024780958582584566
 * Rest: 3.158667139656693e-05
 * Negative sequences: TODO
 */
static const PRUint8 CzechLangModel[] =
{
  2,2,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,
   2,3,3,0,0,3,3,3,0,2,3,3,0,0,3,2,2,0,2,0,0,
  3,2,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,2,
   2,3,3,0,0,3,3,3,0,3,3,3,2,2,3,2,2,1,2,2,2,
  3,3,3,3,3,3,3,2,2,2,2,3,3,3,3,3,2,2,3,3,
   3,2,2,3,3,3,2,0,3,2,3,3,3,0,2,1,0,2,0,2,0,
  2,2,3,2,2,3,3,3,3,3,3,3,0,3,3,3,3,3,3,0,
   3,3,3,0,0,3,3,3,0,3,3,3,0,0,2,2,2,0,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,
   2,2,3,0,2,3,3,2,0,3,3,3,0,0,2,2,2,2,2,2,0,
  3,3,3,3,3,2,3,3,3,2,3,3,3,2,2,3,2,3,3,3,
   3,2,2,3,3,1,0,3,3,3,2,2,3,0,0,2,2,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,2,3,
   3,2,3,0,2,2,0,0,1,0,2,2,2,2,0,2,0,0,2,0,0,
  3,3,3,3,3,2,3,0,3,2,3,3,3,3,2,3,0,2,3,3,
   3,2,2,3,3,2,2,2,3,3,0,0,3,0,0,0,2,2,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,2,3,2,3,3,2,3,3,
   3,0,3,0,3,3,2,0,3,3,3,2,3,0,2,2,2,2,0,2,0,
  3,3,3,3,3,3,3,2,3,2,3,2,3,2,2,3,2,2,0,3,
   2,2,2,3,2,2,0,3,2,2,0,0,3,0,0,0,2,0,0,0,0,
  3,3,3,3,3,3,3,2,2,2,3,3,3,2,2,3,3,2,3,3,
   3,0,2,0,3,2,2,0,3,3,2,2,3,0,0,0,2,2,0,0,0,
  3,3,3,3,3,3,2,3,3,2,3,2,0,3,3,3,2,2,2,3,
   3,2,2,0,3,2,2,2,3,0,2,2,3,0,0,0,0,2,0,0,0,
  0,2,3,2,2,3,3,3,3,3,3,3,0,3,3,0,3,3,3,0,
   0,3,2,0,0,3,3,2,0,2,2,0,0,0,0,0,0,0,2,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,2,2,3,
   3,2,2,3,3,2,2,2,2,2,2,2,3,0,2,2,2,0,0,0,0,
  3,3,3,3,3,3,2,2,2,2,2,3,3,3,2,2,2,3,2,2,
   2,0,2,0,2,0,0,0,0,0,0,2,2,0,0,0,2,0,0,2,0,
  2,2,3,3,2,3,3,3,3,3,3,3,0,3,3,2,3,3,3,3,
   2,3,3,0,0,3,3,2,0,3,2,2,0,0,2,2,2,0,2,0,2,
  3,3,3,3,3,2,2,0,3,3,3,2,3,2,2,3,2,2,2,3,
   3,1,3,3,3,2,3,2,2,2,2,2,3,0,0,0,0,2,0,0,0,
  3,3,3,3,3,3,2,3,3,2,3,2,2,2,2,3,2,0,0,3,
   3,2,2,0,2,2,2,2,3,0,0,2,2,2,0,2,0,2,2,0,0,
  3,3,3,3,3,3,2,3,2,3,3,3,3,3,2,3,3,3,2,3,
   3,2,2,0,2,2,0,2,2,2,0,0,2,2,0,2,2,2,0,0,0,
  0,0,3,2,0,3,3,3,3,3,3,3,0,3,3,0,3,3,3,0,
   0,2,2,0,0,2,3,2,0,3,0,2,0,0,0,0,2,0,0,0,0,
  2,2,3,2,2,3,3,3,2,3,3,3,2,2,3,2,3,3,3,0,
   0,2,3,0,0,2,3,2,0,3,2,1,0,2,0,0,0,0,2,0,0,
  2,3,3,3,3,2,3,2,2,2,2,2,3,2,2,2,3,2,2,3,
   0,2,2,0,0,2,0,0,0,3,0,2,2,2,0,0,2,2,0,0,2,
  3,3,3,3,3,3,3,2,3,0,3,2,3,2,2,3,2,2,2,3,
   3,3,2,3,2,2,0,2,3,2,0,0,2,2,0,0,2,2,0,0,0,
  0,0,3,2,0,3,3,2,3,3,3,3,0,3,3,0,3,3,2,0,
   0,3,2,0,0,2,3,3,0,2,0,0,0,0,0,0,2,0,2,0,2,
  2,0,3,0,0,3,2,2,2,2,2,3,0,2,0,0,3,3,2,0,
   0,0,0,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,0,2,0,3,3,3,0,2,3,0,0,0,3,
   0,0,3,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,
  3,3,3,2,3,2,2,0,2,0,2,2,3,3,2,2,2,0,0,3,
   0,0,2,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,2,
  2,3,2,3,3,0,2,0,0,0,0,2,3,0,0,2,0,0,2,2,
   0,0,2,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
  0,0,2,0,0,3,3,3,2,2,2,2,0,2,3,2,3,2,3,0,
   0,2,3,0,0,2,2,2,0,3,0,1,0,0,0,0,0,0,0,0,0,
  2,3,3,3,3,3,2,2,0,2,3,3,3,0,0,3,0,0,0,2,
   0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,
  3,3,3,3,3,2,2,2,3,2,3,1,0,2,2,3,2,2,0,2,
   2,0,0,0,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,
  3,3,2,3,3,2,2,0,3,2,3,0,1,2,2,3,2,0,2,2,
   3,2,2,0,2,0,0,0,2,0,2,2,2,2,0,0,0,2,0,0,0,
  0,0,2,0,0,0,3,3,2,0,2,2,0,2,2,0,3,2,3,0,
   0,2,2,0,0,2,3,2,0,0,0,0,0,0,0,0,1,0,0,0,0,
  0,0,2,0,0,2,3,2,2,2,2,2,0,2,2,0,2,2,3,0,
   0,2,2,0,0,3,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,
  2,2,2,2,3,3,0,0,2,2,2,2,2,2,2,2,2,0,0,2,
   2,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,0,0,0,0,
  2,2,2,2,3,0,2,0,2,0,0,2,0,0,2,2,0,2,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,
  2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,3,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
  0,0,2,0,0,2,2,0,0,0,2,0,0,2,0,0,2,0,3,0,
   0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
  2,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,2,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2CzechModel =
{
  Iso_8859_2_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9751874547460189,
  PR_TRUE,
  "ISO-8859-2",
  "cs"
};

const SequenceModel Windows_1250CzechModel =
{
  Windows_1250_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9751874547460189,
  PR_TRUE,
  "WINDOWS-1250",
  "cs"
};

const SequenceModel Ibm852CzechModel =
{
  Ibm852_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9751874547460189,
  PR_TRUE,
  "IBM852",
  "cs"
};

const SequenceModel Mac_CentraleuropeCzechModel =
{
  Mac_Centraleurope_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9751874547460189,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "cs"
};

const LanguageModel CzechModel =
{
  "cs",
  Unicode_CharOrder,
  82,
  CzechLangModel,
  41,
  (float)0.9751874547460189,
};
