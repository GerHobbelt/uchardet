/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Czech *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 01:08:25.449985
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 4X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 6X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 59,SYM, 54,SYM, 51, 63,SYM,SYM, 31, 47, 38, 71,SYM, 27, 72, /* AX */
  SYM, 59,SYM, 54,SYM, 51, 63,SYM,SYM, 31, 47, 38, 73,SYM, 27, 74, /* BX */
   70, 21, 52, 75, 45, 76, 46, 44, 29, 24, 68, 43, 23, 17, 62, 40, /* CX */
   64, 60, 36, 37, 55, 65, 42,SYM, 25, 32, 35, 66, 41, 28, 69, 61, /* DX */
   70, 21, 52, 77, 45, 78, 46, 44, 29, 24, 68, 43, 23, 17, 62, 40, /* EX */
   64, 60, 36, 37, 55, 65, 42,SYM, 25, 32, 35, 66, 41, 28, 69,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 4X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 6X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 31,SYM, 63, 38, 27, 79, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 31,SYM, 63, 38, 27, 80, /* 9X */
  SYM,SYM,SYM, 54,SYM, 59,SYM,SYM,SYM,SYM, 47,SYM,SYM,SYM,SYM, 81, /* AX */
  SYM,SYM,SYM, 54,SYM,SYM,SYM,SYM,SYM, 59, 47,SYM, 51,SYM, 51, 82, /* BX */
   70, 21, 52, 83, 45, 84, 46, 44, 29, 24, 68, 43, 23, 17, 62, 40, /* CX */
   64, 60, 36, 37, 55, 65, 42,SYM, 25, 32, 35, 66, 41, 28, 69, 61, /* DX */
   70, 21, 52, 85, 45, 86, 46, 44, 29, 24, 68, 43, 23, 17, 62, 40, /* EX */
   64, 60, 36, 37, 55, 65, 42,SYM, 25, 32, 35, 66, 41, 28, 69,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 4X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 6X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
   44, 41, 24, 52, 45, 32, 46, 44, 54, 43, 65, 65, 62, 87, 45, 46, /* 8X */
   24, 88, 89, 55, 42, 51, 51, 63, 63, 42, 41, 38, 38, 54,SYM, 29, /* 9X */
   21, 17, 37, 35, 59, 59, 27, 27, 68, 68,SYM, 90, 29, 47,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 21, 52, 23, 47,SYM,SYM,SYM,SYM, 91, 92,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 93, 94,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   64, 64, 40, 43, 40, 36, 17, 62, 23,SYM,SYM,SYM,SYM, 69, 32,SYM, /* DX */
   37, 61, 55, 60, 60, 36, 31, 31, 70, 35, 70, 66, 28, 28, 69,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 66, 25, 25,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Maccentraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 4X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  2, 19, 15, 11,  0, 30, 26, 16,  5, 22, 10,  6, 13,  3,  1, /* 6X */
   14, 39,  8,  7,  4, 12,  9, 33, 34, 18, 20,SYM,SYM,SYM,SYM,CTR, /* 7X */
   45, 48, 48, 24, 59, 42, 41, 21, 59, 29, 45, 29, 46, 46, 24, 95, /* 8X */
   96, 40, 17, 40, 50, 50, 97, 37, 98, 55, 42, 58, 35, 23, 23, 41, /* 9X */
  SYM,SYM, 68,SYM,SYM,SYM,SYM, 61,SYM,SYM,SYM, 68,SYM,SYM, 99,100, /* AX */
  101, 49,SYM,SYM, 49, 53,SYM,SYM, 54,102,103, 51, 51,104,105, 56, /* BX */
   56, 60,SYM,SYM, 60, 36,SYM,SYM,SYM,SYM,SYM, 36, 65, 58, 65, 57, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 57, 70, 70, 25,SYM,SYM, 25,106, /* DX */
  107, 31,SYM,SYM, 31, 63, 63, 21, 38, 38, 17, 27, 27, 67, 37, 55, /* EX */
   67, 32, 35, 32, 66, 66,108,109, 28, 28, 53,110, 54,111,112,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 82;
static const unsigned int Unicode_CharOrder[] =
{
  65,  2, 66, 19, 67, 15, 68, 11, 69,  0, 70, 30, 71, 26,72, 16,
  73,  5, 74, 22, 75, 10, 76,  6, 77, 13, 78,  3, 79,  1,80, 14,
  81, 39, 82,  8, 83,  7, 84,  4, 85, 12, 86,  9, 87, 33,88, 34,
  89, 18, 90, 20, 97,  2, 98, 19, 99, 15, 100, 11, 101,  0,102, 30,
  103, 26, 104, 16, 105,  5, 106, 22, 107, 10, 108,  6, 109, 13,110,  3,
  111,  1, 112, 14, 113, 39, 114,  8, 115,  7, 116,  4, 117, 12,118,  9,
  119, 33, 120, 34, 121, 18, 122, 20, 193, 21, 201, 24, 205, 17,211, 37,
  218, 35, 221, 28, 225, 21, 233, 24, 237, 17, 243, 37, 250, 35,253, 28,
  268, 29, 269, 29, 270, 40, 271, 40, 282, 23, 283, 23, 327, 36,328, 36,
  344, 25, 345, 25, 352, 31, 353, 31, 356, 38, 357, 38, 366, 32,367, 32,
  381, 27, 382, 27,
};


/* Model Table:
 * Total considered sequences: 1502 / 1681
 * - Positive sequences: first 778 (0.9950004915877304)
 * - Probable sequences: next 225 (1003-778) (0.0040053181225346846)
 * - Neutral sequences: last 678 (0.0009941902897349086)
 * - Negative sequences: 179 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 CzechLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,0,1,3,3,3,0,3,3,3,1,3,3,2,3,1,1,2,
   2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,3,0,1,3,3,3,0,3,3,3,0,3,3,1,3,0,3,1,
   3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,0,3,0,1,3,3,3,1,3,3,3,0,3,3,2,3,0,3,2,
   2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,2,2,1,0,2,0,2,
   1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,1,3,2,3,3,3,3,1,2,2,2,0,1,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,3,3,3,3,0,3,3,3,1,2,3,1,2,2,1,2,
   1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,0,3,2,3,3,3,3,3,2,1,1,2,2,0,1,
   1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,1,3,1,2,1,3,2,3,1,3,3,1,1,2,3,3,3,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,0,3,0,3,3,3,3,3,3,3,2,2,2,2,2,2,2,
   1,
  3,3,3,3,2,3,3,3,3,1,3,3,3,1,2,3,3,3,3,3,3,3,1,3,3,3,2,3,3,3,2,3,3,1,1,1,2,1,0,0,
   0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,3,2,0,3,2,2,3,1,0,3,3,2,3,3,3,2,1,3,2,0,1,1,2,0,0,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,1,0,1,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,1,3,3,3,3,3,0,1,3,3,3,0,3,3,3,0,2,3,1,3,0,2,1,
   2,
  3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,2,3,3,3,1,3,3,3,3,3,2,3,3,2,2,2,3,1,1,1,1,2,0,0,
   0,
  3,3,3,3,3,3,3,3,3,1,2,2,3,2,3,3,3,3,3,2,1,3,2,3,3,3,2,0,1,1,2,3,3,1,1,1,2,2,0,1,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,1,0,3,0,2,0,0,1,1,0,3,1,0,1,1,1,0,2,
   0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,1,1,3,2,1,3,1,1,3,3,1,3,3,2,2,0,3,2,1,1,1,1,1,1,
   0,
  1,1,2,3,3,0,3,3,3,3,3,3,0,3,3,3,3,1,0,3,3,0,3,0,1,3,1,3,0,3,1,3,0,0,0,0,2,0,2,0,
   1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,1,3,0,0,3,2,3,0,3,2,3,1,2,3,1,1,0,2,1,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,2,3,3,3,2,3,3,3,3,3,1,1,3,3,1,2,2,1,0,1,1,1,0,1,
   0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,1,1,3,2,2,3,3,2,1,2,1,3,0,0,
   0,
  1,0,0,3,3,1,3,3,3,3,3,3,1,3,3,3,3,1,0,3,3,0,3,0,0,3,2,3,0,3,1,3,0,0,0,0,1,0,1,1,
   2,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,0,2,3,3,1,0,0,0,1,1,0,3,1,3,3,1,1,2,1,2,0,0,
   1,
  0,1,1,3,3,0,3,3,3,3,3,3,0,3,3,3,3,0,0,1,3,0,3,0,0,3,1,3,0,3,0,3,0,0,0,0,1,0,2,0,
   2,
  2,1,2,3,3,1,3,3,3,2,3,3,1,3,2,2,3,0,0,2,3,0,1,0,0,3,1,3,0,3,2,1,0,1,1,0,0,0,0,0,
   0,
  3,3,3,3,1,3,2,3,1,1,3,1,2,2,1,1,1,3,0,2,0,3,0,0,0,0,0,0,0,1,0,1,2,0,0,0,2,0,0,0,
   0,
  3,3,3,3,3,3,3,3,3,2,2,2,3,2,1,1,3,1,3,2,1,3,1,0,2,1,3,0,0,1,1,1,2,2,0,0,0,1,0,1,
   0,
  3,3,3,3,2,3,2,3,2,1,3,3,3,2,1,2,1,3,0,3,0,3,0,0,1,0,0,0,0,0,0,3,2,0,0,1,3,1,0,0,
   2,
  0,0,1,3,3,0,3,3,3,3,3,3,1,3,3,3,3,0,0,3,3,0,2,0,0,1,1,2,0,2,1,3,0,0,0,0,0,0,0,0,
   1,
  3,3,3,3,3,3,3,2,2,1,3,0,3,1,1,3,1,3,0,2,0,3,0,0,1,0,0,0,0,1,0,0,3,0,0,0,1,0,1,0,
   0,
  3,3,3,2,3,3,3,2,3,1,2,2,3,2,1,2,1,2,3,1,0,3,1,0,3,0,2,0,1,0,3,0,1,1,1,2,0,1,0,0,
   0,
  3,3,3,3,3,3,3,2,1,3,3,0,3,1,3,2,0,3,1,1,0,1,0,0,2,0,1,0,0,1,0,3,1,0,0,0,2,1,3,0,
   0,
  0,0,1,2,1,0,3,3,3,3,2,3,0,3,1,2,1,0,0,3,3,0,3,0,0,1,0,3,0,2,0,1,0,0,0,0,1,0,0,0,
   0,
  3,3,3,3,2,3,3,3,3,0,2,2,2,2,1,2,3,0,3,1,0,1,0,1,0,0,2,0,0,0,1,0,1,3,0,0,0,0,0,0,
   0,
  3,3,3,2,3,3,2,2,0,1,2,1,3,2,3,2,1,1,2,2,0,1,0,0,1,0,1,0,0,0,2,0,1,1,2,0,0,0,0,0,
   0,
  0,0,1,3,3,1,2,3,3,2,3,3,0,2,3,1,2,0,0,2,3,0,1,0,0,3,1,2,0,3,1,1,0,0,0,0,1,0,1,0,
   0,
  0,3,2,0,1,0,0,2,0,0,3,1,3,1,0,1,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,
   0,
  1,1,0,3,2,1,3,2,2,1,1,3,0,1,1,1,1,0,0,1,2,0,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,
   0,
  0,2,3,0,1,2,0,0,0,0,1,0,2,1,0,1,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,
  1,1,1,0,0,1,1,1,1,0,0,1,3,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,
   0,
  0,2,3,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,
};


const SequenceModel Iso_8859_2CzechModel =
{
  Iso_8859_2_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990058097102651,
  PR_TRUE,
  "ISO-8859-2",
  "cs"
};

const SequenceModel Windows_1250CzechModel =
{
  Windows_1250_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990058097102651,
  PR_TRUE,
  "WINDOWS-1250",
  "cs"
};

const SequenceModel Ibm852CzechModel =
{
  Ibm852_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990058097102651,
  PR_TRUE,
  "IBM852",
  "cs"
};

const SequenceModel MaccentraleuropeCzechModel =
{
  Maccentraleurope_CharToOrderMap,
  CzechLangModel,
  41,
  (float)0.9990058097102651,
  PR_TRUE,
  "MacCentralEurope",
  "cs"
};

const LanguageModel CzechModel =
{
  "cs",
  Unicode_CharOrder,
  82,
  CzechLangModel,
  41,
  6,
  (float)0.4061177799331997,
  27,
  (float)0.037244291988856176,
  (float)0.9996676965410142,
};
