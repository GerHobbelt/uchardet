/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Ukrainian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 08:48:39.898462
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 29, 46, 41, 44, 28, 50, 48, 43, 31, 57, 53, 40, 42, 33, 34, /* 4X */
   47, 59, 35, 36, 38, 45, 52, 51, 55, 49, 54,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 29, 46, 41, 44, 28, 50, 48, 43, 31, 57, 53, 40, 42, 33, 34, /* 6X */
   47, 59, 35, 36, 38, 45, 52, 51, 55, 49, 54,SYM,SYM,SYM,SYM,CTR, /* 7X */
   64, 65,SYM, 66,SYM,SYM,SYM,SYM,SYM,SYM, 67,SYM, 68, 69, 70, 71, /* 8X */
   72,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 73,SYM, 74, 75, 76, 77, /* 9X */
  SYM, 62, 62, 78,SYM, 56,SYM,SYM, 61,SYM, 32,SYM,SYM,SYM,SYM, 27, /* AX */
  SYM,SYM,  3,  3, 56,SYM,SYM,SYM, 61,SYM, 32,SYM, 79, 80, 81, 27, /* BX */
    1, 20,  6, 19, 13,  8, 26, 16,  4, 21, 11, 10, 14,  2,  0, 15, /* CX */
    5,  9,  7, 12, 37, 23, 25, 22, 30, 39, 63, 58, 18, 60, 24, 17, /* DX */
    1, 20,  6, 19, 13,  8, 26, 16,  4, 21, 11, 10, 14,  2,  0, 15, /* EX */
    5,  9,  7, 12, 37, 23, 25, 22, 30, 39, 63, 58, 18, 60, 24, 17, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 114;
static const unsigned int Unicode_CharOrder[] =
{
  65, 29, 66, 46, 67, 41, 68, 44, 69, 28, 70, 50, 71, 48,72, 43,
  73, 31, 75, 53, 76, 40, 77, 42, 78, 33, 79, 34, 80, 47,82, 35,
  83, 36, 84, 38, 85, 45, 86, 52, 87, 51, 88, 55, 89, 49,90, 54,
  97, 29, 98, 46, 99, 41, 100, 44, 101, 28, 102, 50, 103, 48,104, 43,
  105, 31, 107, 53, 108, 40, 109, 42, 110, 33, 111, 34, 112, 47,114, 35,
  115, 36, 116, 38, 117, 45, 118, 52, 119, 51, 120, 55, 121, 49,122, 54,
  1028, 32, 1030,  3, 1031, 27, 1040,  1, 1041, 20, 1042,  6, 1043, 19,1044, 13,
  1045,  8, 1046, 26, 1047, 16, 1048,  4, 1049, 21, 1050, 11, 1051, 10,1052, 14,
  1053,  2, 1054,  0, 1055, 15, 1056,  5, 1057,  9, 1058,  7, 1059, 12,1060, 37,
  1061, 23, 1062, 25, 1063, 22, 1064, 30, 1065, 39, 1068, 18, 1070, 24,1071, 17,
  1072,  1, 1073, 20, 1074,  6, 1075, 19, 1076, 13, 1077,  8, 1078, 26,1079, 16,
  1080,  4, 1081, 21, 1082, 11, 1083, 10, 1084, 14, 1085,  2, 1086,  0,1087, 15,
  1088,  5, 1089,  9, 1090,  7, 1091, 12, 1092, 37, 1093, 23, 1094, 25,1095, 22,
  1096, 30, 1097, 39, 1100, 18, 1102, 24, 1103, 17, 1108, 32, 1110,  3,1111, 27,
  1168, 56, 1169, 56,
};


/* Model Table:
 * Total considered sequences: 1685 / 3249
 * - Positive sequences: first 906 (0.9950103000973345)
 * - Probable sequences: next 275 (1181-906) (0.003991840297453031)
 * - Neutral sequences: last 2068 (0.000997859605212481)
 * - Negative sequences: 1564 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 UkrainianLangModel[] =
{
  3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,0,0,0,3,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,0,0,3,0,3,1,0,1,0,3,0,3,
   0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,1,3,3,3,3,3,0,0,0,3,0,3,0,0,0,0,3,1,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,0,1,0,3,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  2,2,3,1,2,3,3,3,3,3,3,3,2,3,3,3,3,3,0,3,3,3,3,3,2,3,3,3,0,0,3,0,3,0,0,0,0,3,1,3,
   0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,0,1,0,0,0,0,3,0,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,1,3,3,2,3,3,1,0,0,3,0,1,0,0,0,0,1,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,1,1,3,3,2,3,1,3,3,3,2,2,0,0,1,2,0,3,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,1,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,0,0,0,3,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,1,3,0,1,3,3,3,0,0,0,0,3,0,1,0,0,0,1,3,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,1,3,3,3,3,2,1,1,1,3,1,1,0,0,0,1,0,2,0,0,0,0,2,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,1,1,2,2,0,1,2,1,3,1,0,0,0,3,1,1,0,0,0,0,2,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  2,3,3,1,0,3,3,3,3,3,3,3,1,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,0,3,0,0,0,0,3,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,0,0,0,3,0,1,0,0,0,0,1,0,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,1,2,1,1,3,1,2,1,2,3,0,0,0,0,2,0,1,0,0,0,0,3,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
  3,3,3,3,3,3,1,3,3,3,3,3,3,1,2,3,1,1,1,0,3,0,2,1,1,3,0,0,0,0,2,0,1,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,2,1,2,1,0,0,0,3,0,0,0,0,0,0,1,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  1,0,3,0,0,3,3,3,1,3,3,3,1,3,3,3,3,2,0,3,3,2,3,3,3,3,3,2,0,1,2,0,3,0,0,0,0,0,0,3,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,0,3,1,1,1,3,3,2,3,1,3,1,3,3,2,2,3,0,3,3,3,2,1,3,3,1,1,0,0,3,0,3,0,0,0,0,3,0,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,1,1,1,2,2,0,1,1,2,1,0,0,0,0,2,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,1,1,1,1,2,3,0,2,3,3,2,1,0,0,0,2,0,2,0,0,0,0,0,0,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,2,3,2,1,3,3,3,2,3,3,3,2,3,3,3,3,2,1,2,3,0,2,2,1,3,3,1,0,0,3,0,2,0,0,0,0,2,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,0,2,2,3,1,3,3,3,0,2,1,0,3,1,1,1,0,3,1,1,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,1,3,1,3,0,0,0,1,1,1,0,1,2,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,2,3,1,1,3,3,3,2,3,2,3,0,3,3,2,3,0,0,3,3,2,3,2,3,3,3,2,0,0,2,0,3,0,0,0,0,2,0,2,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,2,3,3,1,2,3,3,1,1,2,3,1,2,1,2,3,3,1,1,0,0,1,3,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,1,2,1,3,2,3,3,3,3,1,1,1,3,1,2,3,0,3,0,1,2,3,0,0,0,0,0,1,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,3,1,0,2,3,3,0,3,2,2,1,3,3,0,3,1,0,1,1,3,2,3,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,3,3,0,3,0,
   3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,2,0,3,0,3,1,3,3,0,3,0,
   3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,
  3,3,3,3,3,2,3,3,3,1,3,3,3,1,2,2,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,3,3,0,3,0,
   3,3,3,1,3,3,3,3,3,1,3,1,3,3,3,3,0,
  0,1,3,1,0,3,3,3,1,3,3,3,0,3,3,2,2,1,0,3,1,1,1,0,3,2,1,3,0,0,2,0,1,0,0,0,0,2,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,2,3,0,3,0,
   2,3,2,2,3,3,2,1,3,3,3,2,2,3,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,3,3,0,3,0,
   3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,
  0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,3,3,0,3,0,
   3,3,3,2,3,3,2,3,3,3,2,2,3,3,2,1,0,
  0,1,0,0,0,2,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,1,3,1,3,0,
   3,3,3,3,2,3,3,3,2,2,1,2,2,3,2,1,0,
  3,3,2,3,3,3,0,3,3,3,3,1,3,0,2,1,0,1,1,2,1,1,0,0,2,0,0,0,0,0,1,0,1,0,0,0,0,3,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,3,3,0,3,0,
   3,2,2,3,2,3,2,2,2,3,2,2,3,2,2,1,0,
  3,3,1,3,3,0,0,0,3,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,1,3,0,3,0,
   3,2,3,2,3,3,3,3,2,3,3,2,2,2,1,1,0,
  0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,3,0,3,0,2,3,3,3,0,3,0,
   3,3,2,3,2,3,2,1,1,3,1,1,1,3,1,1,0,
  1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,3,0,3,0,2,3,2,3,0,2,0,
   2,2,3,2,3,3,3,3,2,3,1,2,1,1,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,3,3,2,0,3,0,
   2,1,3,1,2,3,2,1,1,3,1,2,1,1,1,1,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,3,3,0,3,0,
   2,3,2,2,2,3,3,1,2,3,2,2,2,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,3,2,3,3,0,3,0,
   3,3,3,1,3,1,3,3,3,2,2,1,2,2,2,2,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,3,0,3,0,3,3,3,2,0,1,0,
   3,2,1,1,2,3,2,1,1,3,1,1,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,1,3,3,3,0,3,0,
   3,1,2,3,2,3,1,3,1,2,1,1,1,1,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,3,3,0,3,0,3,3,3,2,0,2,0,
   3,1,2,3,1,3,1,2,2,3,1,1,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,3,0,2,0,3,3,3,3,0,3,0,
   3,3,2,1,2,2,3,2,2,1,1,1,0,1,1,2,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,1,3,3,1,0,3,0,
   3,2,1,0,1,3,1,1,1,1,3,1,0,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,2,3,0,1,0,
   1,1,1,3,1,1,1,1,0,2,1,2,0,1,0,0,0,
  0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,1,3,1,1,0,1,0,
   1,1,1,1,2,2,0,1,1,1,0,0,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,2,3,2,3,0,1,0,
   2,1,1,2,1,2,1,1,1,2,1,1,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,0,1,3,1,1,0,1,0,
   1,1,2,1,1,2,1,0,1,1,0,1,0,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,0,0,2,1,1,0,2,0,
   1,1,1,1,1,1,1,2,0,1,2,0,3,0,0,3,0,
  2,3,1,2,1,3,2,1,3,1,2,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
};


const SequenceModel Windows_1251UkrainianModel =
{
  Windows_1251_CharToOrderMap,
  UkrainianLangModel,
  57,
  (float)0.9990021403947875,
  PR_FALSE,
  "WINDOWS-1251",
  "uk"
};

const LanguageModel UkrainianModel =
{
  "uk",
  Unicode_CharOrder,
  114,
  UkrainianLangModel,
  57,
  7,
  (float)0.4424303687852319,
  37,
  (float)0.03415305961014846,
  (float)0.9995120610839571,
};
