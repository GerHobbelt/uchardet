/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Slovene *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 22:42:53.426999
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 4X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 6X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 58,SYM, 35,SYM, 62, 49,SYM,SYM, 22, 42, 70, 72,SYM, 23, 61, /* AX */
  SYM, 58,SYM, 35,SYM, 62, 49,SYM,SYM, 22, 42, 70, 73,SYM, 23, 61, /* BX */
    5,  1, 38, 48, 32, 67, 29, 37, 21,  2, 55, 46, 52,  3, 45, 74, /* CX */
   36, 53, 66,  0,  0, 51, 31,SYM, 43, 59, 15, 75, 30, 41, 76, 39, /* DX */
    5,  1, 38, 48, 32, 67, 29, 37, 21,  2, 55, 46, 52,  3, 45, 77, /* EX */
   36, 53, 66,  0,  0, 51, 31,SYM, 43, 59, 15, 78, 30, 41, 79,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 4X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 6X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 58, 58, 35,SYM,SYM, 22,SYM, 22,SYM, 34,SYM, 80,SYM, 81, 61, /* AX */
  SYM,SYM, 21, 35, 23,SYM,SYM,SYM, 23, 21, 34,SYM, 60, 60, 71, 61, /* BX */
   40,  1, 38, 48, 32, 29, 47, 37,  2,  2,  2, 46,  3,  3, 45, 69, /* CX */
   36, 53,  0,  0,  0, 51, 31, 49, 82, 15, 15, 68, 30, 55, 64, 39, /* DX */
   40,  1, 38, 48, 32, 29, 47, 37,  2,  2,  2, 46,  3,  3, 45, 69, /* EX */
   36, 53,  0,  0,  0, 51, 31, 49, 83, 15, 15, 68, 30, 55, 64, 71, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 4X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 6X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM, 49, 70, 23, 84, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM, 49, 70, 23, 85, /* 9X */
  SYM,SYM,SYM, 35,SYM, 58,SYM,SYM,SYM,SYM, 42,SYM,SYM,SYM,SYM, 61, /* AX */
  SYM,SYM,SYM, 35,SYM,SYM,SYM,SYM,SYM, 58, 42,SYM, 62,SYM, 62, 61, /* BX */
    5,  1, 38, 48, 32, 67, 29, 37, 21,  2, 55, 46, 52,  3, 45, 86, /* CX */
   36, 53, 66,  0,  0, 51, 31,SYM, 43, 59, 15, 87, 30, 41, 88, 39, /* DX */
    5,  1, 38, 48, 32, 67, 29, 37, 21,  2, 55, 46, 52,  3, 45, 89, /* EX */
   36, 53, 66,  0,  0, 51, 31,SYM, 43, 59, 15, 90, 30, 41, 91,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 4X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 6X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   37, 30,  2, 38, 32, 59, 29, 37, 35, 46, 51, 51, 45, 92, 32, 29, /* 8X */
    2, 67, 67,  0, 31, 62, 62, 49, 49, 31, 30, 70, 70, 35,SYM, 21, /* 9X */
    1,  3,  0, 15, 58, 58, 23, 23, 55, 55,SYM, 93, 21, 42,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,  1, 38, 52, 42,SYM,SYM,SYM,SYM, 61, 61,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 48, 48,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   36, 36, 94, 46, 95, 66,  3, 45, 52,SYM,SYM,SYM,SYM, 96, 59,SYM, /* DX */
    0, 39,  0, 53, 53, 66, 22, 22,  5, 15,  5, 97, 41, 41, 98,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 99, 43, 43,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Maccentraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 4X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 20, 12,  2, 24, 18, 19,  3,  9, 11,  6, 14,  4,  0, /* 6X */
   13, 28,  5,  7,  8, 15, 10, 26, 27, 25, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   32, 44, 44,  2, 58, 31, 30,  1, 58, 21, 32, 21, 29, 29,  2,100, /* 8X */
  101,102,  3,103, 56, 56, 63,  0, 63,  0, 31, 50, 15, 52, 52, 30, /* 9X */
  SYM,SYM, 55,SYM,SYM,SYM,SYM, 39,SYM,SYM,SYM, 55,SYM,SYM,104,105, /* AX */
  106, 57,SYM,SYM, 57,107,SYM,SYM, 35,108,109, 62, 62, 67, 67, 65, /* BX */
   65, 53,SYM,SYM, 53, 66,SYM,SYM,SYM,SYM,SYM, 66, 51, 50, 51, 33, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 33,  5,  5, 43,SYM,SYM, 43,110, /* DX */
  111, 22,SYM,SYM, 22, 49, 49,  1, 70, 70,  3, 23, 23, 54,  0,  0, /* EX */
   54, 59, 15, 59,112,113,114,115, 41, 41,116, 61, 35, 61,117,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    81

static const unsigned int Unicode_CharOrder[] =
{
  32,  0, 65,  1, 66, 17, 67, 20, 68, 12, 69,  2, 70, 24, 71, 18,
  72, 19, 73,  3, 74,  9, 75, 11, 76,  6, 77, 14, 78,  4, 79,  0,
  80, 13, 82,  5, 83,  7, 84,  8, 85, 15, 86, 10, 90, 16, 97,  1,
  98, 17, 99, 20, 100, 12, 101,  2, 102, 24, 103, 18, 104, 19, 105,  3,
  106,  9, 107, 11, 108,  6, 109, 14, 110,  4, 111,  0, 112, 13, 114,  5,
  115,  7, 116,  8, 117, 15, 118, 10, 122, 16, 225,  1, 232,  2, 233,  2,
  234,  2, 236,  3, 237,  3, 242,  0, 243,  0, 244,  0, 249, 15, 250, 15,
  268, 21, 269, 21, 341,  5, 352, 22, 353, 22, 381, 23, 382, 23, 513,  1,
  515,  1, 517,  2, 519,  2, 521,  3, 523,  3, 525,  0, 527,  0, 531,  5,
  533, 15, 535, 15, 601,  2, 768,  2, 769,  0, 783,  2, 785,  0, 7865,  2,
  7885,  0,
};

static const float OrderToRatio[] =
{
  0.230492203,  0.230492203,  0.230492203,  0.230492203,  0.230492203,  0.230492203,  0.230492203,  0.230492203, 
  0.230492203,  0.230492203,  0.230492203,  0.086639615,  0.086639615,  0.086639615,  0.086639615,  0.086639615, 
  0.085522863,  0.085522863,  0.085522863,  0.085522863,  0.085522863,  0.085522863,  0.085522863,  0.085522863, 
  0.085522863,  0.085522863,  0.085522863,  0.076485495,  0.076485495,  0.076485495,  0.076485495,  0.076485495, 
  0.076485495,  0.059897010,  0.059897010,  0.048493671,  0.048493671,  0.048493671,  0.048493671,  0.042624840, 
  0.042624840,  0.040764234,  0.040764234,  0.038556932,  0.038556932,  0.035249619,  0.035249619,  0.033788113, 
  0.033788113,  0.030178018,  0.030178018,  0.027407852,  0.027407852,  0.025229907,  0.025229907,  0.024122132, 
  0.024122132,  0.018246023,  0.018246023,  0.018246023,  0.018246023,  0.018246023,  0.018246023,  0.016874041, 
  0.016874041,  0.015227663,  0.015227663,  0.014591044,  0.014591044,  0.010830043,  0.010830043,  0.010758229, 
  0.010758229,  0.008996367,  0.008996367,  0.006928326,  0.006928326,  0.004261999,  0.004261999,  0.004148941, 
  0.004148941, 
};


/* Model Table:
 * Number of web pages processed for this model: 1082
 * Number of characters consumed for this model: 4121775
 * Total considered sequences: 1241 / 625
 *
 * - Positive sequences: first 455 (0.9950139643697979)
 * - Probable sequences: next 165 (620-455) (0.003986766600275082)
 * - Neutral sequences: last 5 (0.0009992690299269746)
 * - Negative sequences: -616 (off-ratio, TODO)
 */


#define SloveneUnicodeAlphabetWidth         25
#define SloveneUnicodeCharToOrderIsReduced  0


#define SloveneFCMLowerBound  97
#define SloveneFCMUpperBound  382


static const PRUint8 SloveneUnicodeCharToOrder[] =
{
  2,18,21,13,3,25,19,20,4,10,12,7,15,5,1,14,0,6,8,9,
  16,11,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,24,
};

static const PRUint8 SloveneCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,3,3,2,3,3,
  2,2,3,3,2,3,3,3,3,3,2,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,2,3,3,3,3,3,3,3,
  3,3,3,2,3,3,2,3,2,2,3,3,
  0,3,3,3,3,3,3,3,3,3,2,3,3,2,
  3,3,3,2,3,2,3,3,2,1,1,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,2,
  2,3,3,3,2,2,3,2,1,1,1,2,
  0,3,3,3,3,3,2,2,3,2,1,3,3,3,
  3,3,3,3,3,2,3,3,2,3,1,1,
  0,3,3,3,3,3,3,3,3,3,3,1,3,3,
  3,2,3,3,3,3,2,3,3,3,2,1,
  0,3,3,3,3,3,3,3,3,3,3,3,2,3,
  2,3,3,1,1,2,2,3,1,2,1,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,2,2,1,3,3,2,
  0,3,3,3,3,3,3,3,3,3,2,1,2,2,
  3,2,3,2,2,1,3,2,2,2,1,2,
  0,3,3,3,3,3,3,3,3,2,2,2,3,2,
  3,3,3,2,3,2,1,3,3,3,1,2,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,2,3,3,3,3,3,3,3,3,3,
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,
  3,3,3,2,3,3,3,2,2,3,2,1,
  0,3,3,3,3,3,3,3,3,2,3,2,2,3,
  1,3,3,2,2,1,2,2,3,2,1,3,
  0,3,3,3,3,3,3,3,2,2,1,2,1,2,
  1,3,3,1,1,2,3,1,1,2,1,1,
  0,3,3,3,3,3,3,3,2,3,1,2,3,1,
  1,3,3,2,1,1,1,1,2,1,0,2,
  0,3,3,3,3,2,3,3,2,3,1,3,3,2,
  1,2,3,2,2,1,3,3,0,0,0,1,
  0,3,3,3,3,3,3,3,1,1,3,1,3,1,
  1,1,3,1,2,1,0,1,0,0,1,0,
  0,3,3,3,3,3,1,3,1,3,3,3,3,1,
  3,2,2,0,1,0,1,1,3,1,0,0,
  0,3,3,3,3,3,2,2,0,0,3,1,3,1,
  1,1,3,1,3,2,0,2,1,1,0,0,
  0,3,3,3,3,2,3,3,3,3,2,1,1,1,
  1,1,3,1,1,1,1,2,0,1,1,3,
};


const SequenceModel Iso_8859_2SloveneModel =
{
  Iso_8859_2_CharToOrderMap,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrder,
  SloveneCompactedLangModel,
  25,
  (float)0.999000730970073,
  PR_FALSE,
  "ISO-8859-2",
  "sl"
};

const SequenceModel Iso_8859_16SloveneModel =
{
  Iso_8859_16_CharToOrderMap,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrder,
  SloveneCompactedLangModel,
  25,
  (float)0.999000730970073,
  PR_FALSE,
  "ISO-8859-16",
  "sl"
};

const SequenceModel Windows_1250SloveneModel =
{
  Windows_1250_CharToOrderMap,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrder,
  SloveneCompactedLangModel,
  25,
  (float)0.999000730970073,
  PR_FALSE,
  "WINDOWS-1250",
  "sl"
};

const SequenceModel Ibm852SloveneModel =
{
  Ibm852_CharToOrderMap,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrder,
  SloveneCompactedLangModel,
  25,
  (float)0.999000730970073,
  PR_FALSE,
  "IBM852",
  "sl"
};

const SequenceModel MaccentraleuropeSloveneModel =
{
  Maccentraleurope_CharToOrderMap,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrder,
  SloveneCompactedLangModel,
  25,
  (float)0.999000730970073,
  PR_FALSE,
  "MacCentralEurope",
  "sl"
};

const LanguageModel SloveneModel =
{
  "sl",
  Unicode_CharOrder,
  81,
  SloveneFCMLowerBound,
  SloveneFCMUpperBound,
  SloveneUnicodeCharToOrderIsReduced,

  SloveneUnicodeCharToOrder,
  OrderToRatio,
  SloveneCompactedLangModel,
  25,
  3,
  (float)0.4026546815389001,
  19,
  (float)0.03509386126122847,
  (float)0.9963151797465899,
};
