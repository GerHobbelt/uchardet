/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Slovene *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 08:07:00.128397
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 4X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 6X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 55,SYM, 38,SYM, 56, 57,SYM,SYM, 23, 58, 59, 60,SYM, 25, 51, /* AX */
  SYM, 55,SYM, 38,SYM, 61, 62,SYM,SYM, 23, 63, 64, 65,SYM, 25, 51, /* BX */
    5,  1, 37, 44, 32, 53, 31, 35, 21,  2, 66, 48, 67,  3, 45, 68, /* CX */
   69, 50, 70,  0,  0, 71, 29,SYM, 40, 54, 15, 72, 30, 41, 73, 39, /* DX */
    5,  1, 37, 44, 32, 53, 31, 35, 21,  2, 74, 48, 75,  3, 45, 76, /* EX */
   77, 50, 78,  0,  0, 79, 29,SYM, 40, 54, 15, 80, 30, 41, 81,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 4X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 6X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 55, 55, 38,SYM,SYM, 23,SYM, 23,SYM, 47,SYM, 82,SYM, 83, 51, /* AX */
  SYM,SYM, 21, 38, 25,SYM,SYM,SYM, 25, 21, 47,SYM, 84, 85, 86, 51, /* BX */
   36,  1, 37, 44, 32, 31, 87, 35,  2,  2,  2, 48,  3,  3, 45, 49, /* CX */
   88, 50,  0,  0,  0, 89, 29, 90, 91, 15, 15, 92, 30, 93, 94, 39, /* DX */
   36,  1, 37, 44, 32, 31, 95, 35,  2,  2,  2, 48,  3,  3, 45, 49, /* EX */
   96, 50,  0,  0,  0, 97, 29, 98, 99, 15, 15,100, 30,101,102,103, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 4X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 6X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 23,SYM,104,105, 25,106, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 23,SYM,107,108, 25,109, /* 9X */
  SYM,SYM,SYM, 38,SYM, 55,SYM,SYM,SYM,SYM,110,SYM,SYM,SYM,SYM, 51, /* AX */
  SYM,SYM,SYM, 38,SYM,SYM,SYM,SYM,SYM, 55,111,SYM,112,SYM,113, 51, /* BX */
    5,  1, 37, 44, 32, 53, 31, 35, 21,  2,114, 48,115,  3, 45,116, /* CX */
  117, 50,118,  0,  0,119, 29,SYM, 40, 54, 15,120, 30, 41,121, 39, /* DX */
    5,  1, 37, 44, 32, 53, 31, 35, 21,  2,122, 48,123,  3, 45,124, /* EX */
  125, 50,126,  0,  0,127, 29,SYM, 40, 54, 15,128, 30, 41,129,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 4X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 6X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
   35, 30,  2, 37, 32, 54, 31, 35, 38, 48,130,131, 45,132, 32, 31, /* 8X */
    2, 53, 53,  0, 29,133,134,135,136, 29, 30,137,138, 38,SYM, 21, /* 9X */
    1,  3,  0, 15, 55, 55, 25, 25,139,140,SYM,141, 21,142,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,  1, 37,143,144,SYM,SYM,SYM,SYM, 51, 51,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 44, 44,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  145,146,147, 48,148,149,  3, 45,150,SYM,SYM,SYM,SYM,151, 54,SYM, /* DX */
    0, 39,  0, 50, 50,152, 23, 23,  5, 15,  5,153, 41, 41,154,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,155, 40, 40,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Maccentraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 4X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 16, 20, 10,  2, 22, 17, 19,  3,  9, 12,  6, 13,  4,  0, /* 6X */
   14, 28,  5,  7,  8, 15, 11, 26, 27, 24, 18,SYM,SYM,SYM,SYM,CTR, /* 7X */
   32, 34, 34,  2, 55, 29, 30,  1, 55, 21, 32, 21, 31, 31,  2,156, /* 8X */
  157,158,  3,159, 46, 46,160,  0,161,  0, 29, 52, 15,162,163, 30, /* 9X */
  SYM,SYM,164,SYM,SYM,SYM,SYM, 39,SYM,SYM,SYM,165,SYM,SYM,166,167, /* AX */
  168, 42,SYM,SYM, 42,169,SYM,SYM, 38,170,171,172,173, 53, 53,174, /* BX */
  175, 50,SYM,SYM, 50,176,SYM,SYM,SYM,SYM,SYM,177,178, 52,179, 33, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 33,  5,  5, 40,SYM,SYM, 40,180, /* DX */
  181, 23,SYM,SYM, 23,182,183,  1,184,185,  3, 25, 25, 43,  0,  0, /* EX */
   43, 54, 15, 54,186,187,188,189, 41, 41,190, 51, 38, 51,191,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 83;
static const unsigned int Unicode_CharOrder[] =
{
  32,  0, 65,  1, 66, 16, 67, 20, 68, 10, 69,  2, 70, 22,71, 17,
  72, 19, 73,  3, 74,  9, 75, 12, 76,  6, 77, 13, 78,  4,79,  0,
  80, 14, 82,  5, 83,  7, 84,  8, 85, 15, 86, 11, 89, 24,90, 18,
  97,  1, 98, 16, 99, 20, 100, 10, 101,  2, 102, 22, 103, 17,104, 19,
  105,  3, 106,  9, 107, 12, 108,  6, 109, 13, 110,  4, 111,  0,112, 14,
  114,  5, 115,  7, 116,  8, 117, 15, 118, 11, 121, 24, 122, 18,225,  1,
  232,  2, 233,  2, 234,  2, 236,  3, 237,  3, 242,  0, 243,  0,244,  0,
  249, 15, 250, 15, 268, 21, 269, 21, 341,  5, 352, 23, 353, 23,381, 25,
  382, 25, 513,  1, 515,  1, 517,  2, 519,  2, 521,  3, 523,  3,525,  0,
  527,  0, 531,  5, 533, 15, 535, 15, 601,  2, 768,  2, 769,  0,783,  2,
  785,  0, 7865,  2, 7885,  0,
};


/* Model Table:
 * Total considered sequences: 886 / 676
 * - Positive sequences: first 454 (0.9950465076309883)
 * - Probable sequences: next 121 (575-454) (0.003961510237526555)
 * - Neutral sequences: last 101 (0.000991982131485103)
 * - Negative sequences: -210 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SloveneLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,2,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,1,3,2,
  3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,2,1,3,3,1,2,0,3,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,2,2,3,3,3,1,2,0,3,0,
  3,3,3,3,3,1,2,3,2,1,2,3,2,2,3,3,3,1,2,2,2,2,1,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,2,2,3,3,
  3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,2,3,3,1,3,2,1,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,3,1,1,0,2,3,0,1,2,2,0,
  3,3,3,3,3,3,3,3,2,1,2,1,2,3,3,3,3,1,1,2,3,2,2,2,3,1,
  3,3,3,3,3,3,3,3,3,1,1,1,2,2,3,3,2,1,1,3,2,1,1,2,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,2,3,2,3,
  3,3,3,3,3,3,3,3,2,3,3,2,2,3,1,3,2,1,1,1,2,2,1,2,3,1,
  3,3,3,3,3,3,3,3,3,1,2,2,1,2,1,3,1,3,1,3,1,1,1,1,3,1,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,1,1,3,1,2,
  3,3,3,3,3,3,3,1,3,1,1,2,3,2,1,3,2,1,1,1,1,2,2,1,2,0,
  3,3,3,3,2,3,3,3,3,1,2,2,3,2,1,3,2,1,1,3,3,0,1,0,3,0,
  3,3,3,3,3,3,3,1,0,3,0,1,3,1,1,3,1,0,1,0,1,0,0,0,0,0,
  3,3,3,3,1,3,3,2,3,1,1,0,1,2,1,3,1,1,0,1,2,0,3,0,1,0,
  3,3,3,3,3,0,3,1,3,3,0,2,3,1,3,2,0,0,0,0,1,3,0,0,0,0,
  3,3,3,1,3,2,3,3,2,3,2,1,1,2,2,2,2,1,1,1,2,0,1,1,1,0,
  3,3,3,3,3,2,2,0,0,3,0,1,2,0,0,3,3,1,0,0,1,0,0,0,0,0,
};


const SequenceModel Iso_8859_2SloveneModel =
{
  Iso_8859_2_CharToOrderMap,
  SloveneLangModel,
  26,
  (float)0.9990080178685149,
  PR_FALSE,
  "ISO-8859-2",
  "sl"
};

const SequenceModel Iso_8859_16SloveneModel =
{
  Iso_8859_16_CharToOrderMap,
  SloveneLangModel,
  26,
  (float)0.9990080178685149,
  PR_FALSE,
  "ISO-8859-16",
  "sl"
};

const SequenceModel Windows_1250SloveneModel =
{
  Windows_1250_CharToOrderMap,
  SloveneLangModel,
  26,
  (float)0.9990080178685149,
  PR_FALSE,
  "WINDOWS-1250",
  "sl"
};

const SequenceModel Ibm852SloveneModel =
{
  Ibm852_CharToOrderMap,
  SloveneLangModel,
  26,
  (float)0.9990080178685149,
  PR_FALSE,
  "IBM852",
  "sl"
};

const SequenceModel MaccentraleuropeSloveneModel =
{
  Maccentraleurope_CharToOrderMap,
  SloveneLangModel,
  26,
  (float)0.9990080178685149,
  PR_FALSE,
  "MacCentralEurope",
  "sl"
};

const LanguageModel SloveneModel =
{
  "sl",
  Unicode_CharOrder,
  83,
  SloveneLangModel,
  26,
  3,
  (float)0.4033224535889385,
  19,
  (float)0.037948961604142566,
  (float)0.9960247617473696,
};
