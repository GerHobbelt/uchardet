/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovene *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:20:53.180941
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 4X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 6X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 64,SYM, 41,SYM, 63, 52,SYM,SYM, 22, 49, 60, 65,SYM, 23, 45, /* AX */
  SYM, 66,SYM, 41,SYM, 63, 52,SYM,SYM, 22, 49, 60, 67,SYM, 23, 45, /* BX */
    5,  1, 51, 46, 32, 68, 31, 33, 19,  2, 62, 48, 34,  3, 54, 69, /* CX */
   38, 42, 47,  0,  0, 50, 30,SYM, 35, 70, 15, 71, 28, 37, 72, 39, /* DX */
    5,  1, 51, 46, 32, 73, 31, 33, 19,  2, 62, 48, 34,  3, 54, 74, /* EX */
   38, 42, 47,  0,  0, 50, 30,SYM, 35, 75, 15, 76, 28, 37, 77,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 4X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 6X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 78, 79, 41,SYM,SYM, 22,SYM, 22,SYM, 80,SYM, 81,SYM, 82, 45, /* AX */
  SYM,SYM, 19, 41, 23,SYM,SYM,SYM, 23, 19, 83,SYM, 84, 85, 86, 45, /* BX */
   36,  1, 51, 46, 32, 31, 57, 33,  2,  2,  2, 48,  3,  3, 54, 58, /* CX */
   38, 42,  0,  0,  0, 50, 30, 52, 87, 15, 15, 88, 28, 62, 44, 39, /* DX */
   36,  1, 51, 46, 32, 31, 57, 33,  2,  2,  2, 48,  3,  3, 54, 58, /* EX */
   38, 42,  0,  0,  0, 50, 30, 52, 89, 15, 15, 90, 28, 62, 44, 91, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 4X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 6X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM, 52, 60, 23, 92, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM, 52, 60, 23, 93, /* 9X */
  SYM,SYM,SYM, 41,SYM, 94,SYM,SYM,SYM,SYM, 49,SYM,SYM,SYM,SYM, 45, /* AX */
  SYM,SYM,SYM, 41,SYM,SYM,SYM,SYM,SYM, 95, 49,SYM, 63,SYM, 63, 45, /* BX */
    5,  1, 51, 46, 32, 96, 31, 33, 19,  2, 62, 48, 34,  3, 54, 97, /* CX */
   38, 42, 47,  0,  0, 50, 30,SYM, 35, 98, 15, 99, 28, 37,100, 39, /* DX */
    5,  1, 51, 46, 32,101, 31, 33, 19,  2, 62, 48, 34,  3, 54,102, /* EX */
   38, 42, 47,  0,  0, 50, 30,SYM, 35,103, 15,104, 28, 37,105,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 4X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 6X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   33, 28,  2, 51, 32,106, 31, 33, 41, 48, 50, 50, 54,107, 32, 31, /* 8X */
    2,108,109,  0, 30, 63, 63, 52, 52, 30, 28, 60, 60, 41,SYM, 19, /* 9X */
    1,  3,  0, 15,110,111, 23, 23, 62, 62,SYM,112, 19, 49,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,  1, 51, 34, 49,SYM,SYM,SYM,SYM, 45, 45,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM, 46, 46,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   38, 38,113, 48,114, 47,  3, 54, 34,SYM,SYM,SYM,SYM,115,116,SYM, /* DX */
    0, 39,  0, 42, 42, 47, 22, 22,  5, 15,  5,117, 37, 37,118,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,119, 35, 35,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 4X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  2, 24, 18, 20,  3, 10, 11,  7, 14,  4,  0, /* 6X */
   13, 29,  5,  6,  8, 15,  9, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   32, 43, 43,  2,120, 30, 28,  1,121, 19, 32, 19, 31, 31,  2,122, /* 8X */
  123,124,  3,125, 56, 56, 55,  0, 55,  0, 30,126, 15, 34, 34, 28, /* 9X */
  SYM,SYM, 62,SYM,SYM,SYM,SYM, 39,SYM,SYM,SYM, 62,SYM,SYM,127,128, /* AX */
  129, 59,SYM,SYM, 59,130,SYM,SYM, 41,131,132, 63, 63,133,134, 53, /* BX */
   53, 42,SYM,SYM, 42, 47,SYM,SYM,SYM,SYM,SYM, 47, 50,135, 50, 40, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 40,  5,  5, 35,SYM,SYM, 35,136, /* DX */
  137, 22,SYM,SYM, 22, 52, 52,  1, 60, 60,  3, 23, 23, 61,  0,  0, /* EX */
   61,138, 15,139,140,141,142,143, 37, 37,144, 45, 41, 45,145,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 81;
static const unsigned int Unicode_CharOrder[] =
{
    32,  0,   65,  1,   66, 17,   67, 21,   68, 12,   69,  2,   70, 24,  71, 18,
    72, 20,   73,  3,   74, 10,   75, 11,   76,  7,   77, 14,   78,  4,  79,  0,
    80, 13,   82,  5,   83,  6,   84,  8,   85, 15,   86,  9,   90, 16,  97,  1,
    98, 17,   99, 21,  100, 12,  101,  2,  102, 24,  103, 18,  104, 20, 105,  3,
   106, 10,  107, 11,  108,  7,  109, 14,  110,  4,  111,  0,  112, 13, 114,  5,
   115,  6,  116,  8,  117, 15,  118,  9,  122, 16,  225,  1,  232,  2, 233,  2,
   234,  2,  236,  3,  237,  3,  242,  0,  243,  0,  244,  0,  249, 15, 250, 15,
   268, 19,  269, 19,  341,  5,  352, 22,  353, 22,  381, 23,  382, 23, 513,  1,
   515,  1,  517,  2,  519,  2,  521,  3,  523,  3,  525,  0,  527,  0, 531,  5,
   533, 15,  535, 15,  601,  2,  768,  2,  769,  0,  783,  2,  785,  0,7865,  2,
  7885,  0,
};


/* Model Table:
 * Total considered sequences: 912 / 625
 * - Positive sequences: first 420 (0.9950318187902709)
 * - Probable sequences: next 144 (564-420) (0.003969660901056105)
 * - Neutral sequences: last 61 (0.0009985203086729788)
 * - Negative sequences: -287 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SloveneLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,2,3,2,3,3,3,2,1,3,3,3,3,3,2,3,3,2,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,3,1,1,3,3,0,0,2,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,3,2,2,3,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,2,2,2,0,3,2,0,0,1,
  3,3,3,3,3,3,3,3,3,1,3,3,3,3,2,3,3,3,3,3,2,3,3,2,1,
  3,3,3,3,3,2,3,2,2,3,1,3,3,3,3,3,2,3,1,1,2,3,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,0,1,0,1,2,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,2,
  3,3,3,3,3,3,3,3,3,1,2,2,2,2,1,3,1,1,0,2,3,2,2,0,1,
  3,3,3,3,3,3,3,3,1,2,2,2,2,3,2,3,1,3,1,3,1,3,3,1,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,2,3,3,2,3,2,3,1,0,
  3,3,3,3,3,3,3,3,2,2,3,2,3,1,3,3,2,2,1,3,2,2,2,1,0,
  3,3,3,3,3,3,2,3,2,2,1,1,1,1,2,3,1,1,2,0,2,0,0,0,1,
  3,3,3,3,3,3,1,3,0,2,3,3,1,1,1,3,0,2,0,1,0,1,0,0,1,
  3,3,3,3,3,3,2,2,3,1,1,3,1,1,2,3,1,1,1,2,1,1,0,0,1,
  3,3,3,3,2,2,2,3,3,2,1,3,2,1,1,3,1,1,1,0,3,3,0,0,1,
  3,3,3,3,3,2,0,3,3,3,3,3,1,3,2,2,0,1,0,3,0,1,0,0,0,
  3,3,3,3,3,2,1,1,0,1,3,2,0,0,1,3,0,3,2,0,0,0,0,0,0,
  3,3,3,3,1,3,3,3,2,0,2,1,1,1,1,3,0,1,1,0,1,0,1,0,2,
};


const SequenceModel Iso_8859_2SloveneModel =
{
  Iso_8859_2_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.999001479691327,
  PR_FALSE,
  "ISO-8859-2",
  "sl"
};

const SequenceModel Iso_8859_16SloveneModel =
{
  Iso_8859_16_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.999001479691327,
  PR_FALSE,
  "ISO-8859-16",
  "sl"
};

const SequenceModel Windows_1250SloveneModel =
{
  Windows_1250_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.999001479691327,
  PR_FALSE,
  "WINDOWS-1250",
  "sl"
};

const SequenceModel Ibm852SloveneModel =
{
  Ibm852_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.999001479691327,
  PR_FALSE,
  "IBM852",
  "sl"
};

const SequenceModel Mac_CentraleuropeSloveneModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.999001479691327,
  PR_FALSE,
  "MAC-CENTRALEUROPE",
  "sl"
};

const LanguageModel SloveneModel =
{
  "sl",
  Unicode_CharOrder,
  81,
  SloveneLangModel,
  25,
  2,
  (float)0.3170327842079661,
  19,
  (float)0.03483655056229821,
};
