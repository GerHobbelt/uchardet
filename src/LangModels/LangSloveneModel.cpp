/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovene *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-21 12:38:56.631590
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 4X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 6X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 57,SYM, 48,SYM, 58, 59,SYM,SYM, 22, 60, 61, 62,SYM, 23, 63, /* AX */
  SYM, 64,SYM, 48,SYM, 65, 66,SYM,SYM, 22, 67, 68, 69,SYM, 23, 70, /* BX */
   71, 34, 72, 73, 33, 74, 30, 45, 20, 29, 75, 46, 76, 37, 51, 77, /* CX */
   35, 53, 78, 36, 49, 79, 31,SYM, 41, 80, 81, 82, 28, 43, 83, 44, /* DX */
   84, 34, 85, 86, 33, 87, 30, 45, 20, 29, 88, 46, 89, 37, 51, 90, /* EX */
   35, 53, 91, 36, 49, 92, 31,SYM, 41, 93, 94, 95, 28, 43, 96,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 4X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 6X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 97, 98, 48,SYM,SYM, 22,SYM, 22,SYM, 99,SYM,100,SYM,101,102, /* AX */
  SYM,SYM, 20, 48, 23,SYM,SYM,SYM, 23, 20,103,SYM, 52, 52,104,105, /* BX */
   39, 34,106,107, 33, 30, 47, 45, 38, 29,108, 46, 50, 37, 51,109, /* CX */
   35, 53, 56, 36, 49,110, 31,111,112, 54,113, 55, 28,114,115, 44, /* DX */
   39, 34,116,117, 33, 30, 47, 45, 38, 29,118, 46, 50, 37, 51,119, /* EX */
   35, 53, 56, 36, 49,120, 31,121,122, 54,123, 55, 28,124,125,126, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 4X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 6X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,127,128, 23,129, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,130,131, 23,132, /* 9X */
  SYM,SYM,SYM, 48,SYM,133,SYM,SYM,SYM,SYM,134,SYM,SYM,SYM,SYM,135, /* AX */
  SYM,SYM,SYM, 48,SYM,SYM,SYM,SYM,SYM,136,137,SYM,138,SYM,139,140, /* BX */
  141, 34,142,143, 33,144, 30, 45, 20, 29,145, 46,146, 37, 51,147, /* CX */
   35, 53,148, 36, 49,149, 31,SYM, 41,150,151,152, 28, 43,153, 44, /* DX */
  154, 34,155,156, 33,157, 30, 45, 20, 29,158, 46,159, 37, 51,160, /* EX */
   35, 53,161, 36, 49,162, 31,SYM, 41,163,164,165, 28, 43,166,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 4X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 6X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   45, 28, 29,167, 33,168, 30, 45, 48, 46,169,170, 51,171, 33, 30, /* 8X */
   29,172,173, 49, 31,174,175,176,177, 31, 28,178,179, 48,SYM, 20, /* 9X */
   34, 37, 36,180,181,182, 23, 23,183,184,SYM,185, 20,186,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 34,187,188,189,SYM,SYM,SYM,SYM,190,191,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,192,193,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
   35, 35,194, 46,195,196, 37, 51,197,SYM,SYM,SYM,SYM,198,199,SYM, /* DX */
   36, 44, 49, 53, 53,200, 22, 22,201,202,203,204, 43, 43,205,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,206, 41, 41,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 4X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 17, 21, 12,  0, 24, 18, 19,  2,  9, 11,  7, 14,  4,  3, /* 6X */
   13, 32,  5,  6,  8, 15, 10, 25, 27, 26, 16,SYM,SYM,SYM,SYM,CTR, /* 7X */
   33, 42, 42, 29,207, 31, 28, 34,208, 20, 33, 20, 30, 30, 29,209, /* 8X */
  210,211, 37,212, 40, 40,213, 36,214, 49, 31,215,216,217,218, 28, /* 9X */
  SYM,SYM,219,SYM,SYM,SYM,SYM, 44,SYM,SYM,SYM,220,SYM,SYM,221,222, /* AX */
  223,224,SYM,SYM,225,226,SYM,SYM, 48,227,228,229,230,231,232,233, /* BX */
  234, 53,SYM,SYM, 53,235,SYM,SYM,SYM,SYM,SYM,236,237,238,239,240, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,241,242,243, 41,SYM,SYM, 41,244, /* DX */
  245, 22,SYM,SYM, 22,246,247, 34,248,249, 37, 23, 23,249, 36, 49, /* EX */
  249,249,249,249,249,249,249,249, 43, 43,249,249, 48,249,249,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 50;
static const unsigned int Unicode_CharOrder[] =
{
   65,  1,  66, 17,  67, 21,  68, 12,  69,  0,  70, 24,  71, 18, 72, 19,
   73,  2,  74,  9,  75, 11,  76,  7,  77, 14,  78,  4,  79,  3, 80, 13,
   82,  5,  83,  6,  84,  8,  85, 15,  86, 10,  90, 16,  97,  1, 98, 17,
   99, 21, 100, 12, 101,  0, 102, 24, 103, 18, 104, 19, 105,  2,106,  9,
  107, 11, 108,  7, 109, 14, 110,  4, 111,  3, 112, 13, 114,  5,115,  6,
  116,  8, 117, 15, 118, 10, 122, 16, 268, 20, 269, 20, 352, 22,353, 22,
  381, 23, 382, 23,
};


/* Model Table:
 * Total considered sequences: 880 / 625
 * - Positive sequences: first 449 (0.9950499684040537)
 * - Probable sequences: next 172 (621-449) (0.003957684836286113)
 * - Neutral sequences: last 4 (0.000992346759660201)
 * - Negative sequences: -255 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 SloveneLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,2,3,2,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,2,3,2,3,2,3,1,1,2,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,2,3,0,3,0,0,1,
  3,3,3,3,3,3,3,2,3,1,3,3,3,3,3,3,2,3,1,3,2,3,3,0,1,
  3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,3,3,3,3,2,3,3,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,0,1,1,2,0,3,2,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,
  3,3,3,3,3,3,3,3,3,2,1,2,1,2,1,3,2,1,1,3,2,2,2,0,2,
  3,3,3,3,3,3,3,3,2,1,3,3,2,3,3,3,1,3,1,1,3,3,3,1,2,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,1,3,3,3,2,2,1,3,2,2,0,0,
  3,3,3,3,3,3,2,3,2,1,2,2,2,1,2,3,0,2,2,3,0,1,0,0,0,
  3,3,3,3,3,3,2,3,3,0,1,3,2,1,3,3,0,2,2,0,2,0,0,0,2,
  3,3,3,3,3,3,1,3,1,3,3,3,0,0,1,3,0,2,0,0,0,1,0,0,0,
  3,3,3,3,2,3,2,3,3,1,3,3,1,0,2,3,1,1,1,3,0,3,0,0,2,
  3,3,3,3,3,2,0,3,3,3,3,3,1,3,2,3,0,0,0,0,3,2,1,0,0,
  3,3,3,3,3,2,0,0,0,3,1,2,0,0,1,3,0,3,2,0,0,1,0,0,0,
  3,3,3,3,2,3,3,3,2,2,0,1,0,0,2,3,0,2,2,0,0,0,0,0,3,
};


const SequenceModel Iso_8859_2SloveneModel =
{
  Iso_8859_2_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.9990076532403398,
  PR_FALSE,
  "ISO-8859-2",
  "sl"
};

const SequenceModel Iso_8859_16SloveneModel =
{
  Iso_8859_16_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.9990076532403398,
  PR_FALSE,
  "ISO-8859-16",
  "sl"
};

const SequenceModel Windows_1250SloveneModel =
{
  Windows_1250_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.9990076532403398,
  PR_FALSE,
  "WINDOWS-1250",
  "sl"
};

const SequenceModel Ibm852SloveneModel =
{
  Ibm852_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.9990076532403398,
  PR_FALSE,
  "IBM852",
  "sl"
};

const SequenceModel Mac_CentraleuropeSloveneModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SloveneLangModel,
  25,
  (float)0.9990076532403398,
  PR_FALSE,
  "MAC-CENTRALEUROPE",
  "sl"
};

const LanguageModel SloveneModel =
{
  "sl",
  Unicode_CharOrder,
  50,
  SloveneLangModel,
  25,
  (float)0.9976974938105708,
};
