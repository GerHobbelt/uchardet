/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Slovene *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 20:20:05.416974
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_2_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 4X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 6X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 41,SYM, 42,SYM, 43, 44,SYM,SYM, 22, 45, 46, 47,SYM, 23, 48, /* AX */
  SYM, 49,SYM, 50,SYM, 51, 52,SYM,SYM, 22, 53, 54, 55,SYM, 23, 56, /* BX */
   57, 33, 58, 59, 60, 61, 62, 31, 21, 29, 63, 37, 64, 30, 65, 66, /* CX */
   67, 68, 69, 32, 36, 70, 71,SYM, 72, 73, 39, 74, 75, 40, 76, 77, /* DX */
   78, 33, 79, 80, 81, 82, 83, 31, 21, 29, 84, 37, 85, 30, 86, 87, /* EX */
   88, 89, 90, 32, 36, 91, 92,SYM, 93, 94, 39, 95, 96, 40, 97,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_16_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 4X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 6X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 98, 99,100,SYM,SYM, 22,SYM, 22,SYM,101,SYM,102,SYM,103,104, /* AX */
  SYM,SYM, 21,105, 23,SYM,SYM,SYM, 23, 21,106,SYM,107,108,109,110, /* BX */
  111, 33,112,113,114,115,116, 31, 35, 29, 34, 37,117, 30,118,119, /* CX */
  120,121,122, 32, 36,123,124,125,126,127, 39,128,129,130,131,132, /* DX */
  133, 33,134,135,136,137,138, 31, 35, 29, 34, 37,139, 30,140,141, /* EX */
  142,143,144, 32, 36,145,146,147,148,149, 39,150,151,152,153,154, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1250_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 4X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 6X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,ILL,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,155,156, 23,157, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 22,SYM,158,159, 23,160, /* 9X */
  SYM,SYM,SYM,161,SYM,162,SYM,SYM,SYM,SYM,163,SYM,SYM,SYM,SYM,164, /* AX */
  SYM,SYM,SYM,165,SYM,SYM,SYM,SYM,SYM,166,167,SYM,168,SYM,169,170, /* BX */
  171, 33,172,173,174,175,176, 31, 21, 29,177, 37,178, 30,179,180, /* CX */
  181,182,183, 32, 36,184,185,SYM,186,187, 39,188,189, 40,190,191, /* DX */
  192, 33,193,194,195,196,197, 31, 21, 29,198, 37,199, 30,200,201, /* EX */
  202,203,204, 32, 36,205,206,SYM,207,208, 39,209,210, 40,211,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm852_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 4X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 6X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,CTR, /* 7X */
   31,212, 29,213,214,215,216, 31,217, 37,218,219,220,221,222,223, /* 8X */
   29,224,225, 36,226,227,228,229,230,231,232,233,234,235,SYM, 21, /* 9X */
   33, 30, 32, 39,236,237, 23, 23,238,239,SYM,240, 21,241,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 33,242,243,244,SYM,SYM,SYM,SYM,245,246,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,247,248,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  249,249,249, 37,249,249, 30,249,249,SYM,SYM,SYM,SYM,249,249,SYM, /* DX */
   32,249, 36,249,249,249, 22, 22,249, 39,249,249, 40, 40,249,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,249,249,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Mac_Centraleurope_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 4X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 18, 19, 13,  1, 24, 17, 20,  2,  9, 12,  8, 14,  4,  3, /* 6X */
   11, 28,  5,  6,  7, 16, 10, 25, 27, 26, 15,SYM,SYM,SYM,SYM,CTR, /* 7X */
  249,249,249, 29,249,249,249, 33,249, 21,249, 21,249,249, 29,249, /* 8X */
  249,249, 30,249, 38, 38,249, 32,249, 36,249,249, 39,249,249,249, /* 9X */
  SYM,SYM,249,SYM,SYM,SYM,SYM,249,SYM,SYM,SYM,249,SYM,SYM,249,249, /* AX */
  249,249,SYM,SYM,249,249,SYM,SYM,249,249,249,249,249,249,249,249, /* BX */
  249,249,SYM,SYM,249,249,SYM,SYM,SYM,SYM,SYM,249,249,249,249,249, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,249,249,249,249,SYM,SYM,249,249, /* DX */
  249, 22,SYM,SYM, 22,249,249, 33,249,249, 30, 23, 23,249, 32, 36, /* EX */
  249,249, 39,249,249,249,249,249, 40, 40,249,249,249,249,249,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 58;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 18,  67, 19,  68, 13,  69,  1,  70, 24,  71, 17, 72, 20,
   73,  2,  74,  9,  75, 12,  76,  8,  77, 14,  78,  4,  79,  3, 80, 11,
   81, 28,  82,  5,  83,  6,  84,  7,  85, 16,  86, 10,  87, 25, 88, 27,
   89, 26,  90, 15,  97,  0,  98, 18,  99, 19, 100, 13, 101,  1,102, 24,
  103, 17, 104, 20, 105,  2, 106,  9, 107, 12, 108,  8, 109, 14,110,  4,
  111,  3, 112, 11, 113, 28, 114,  5, 115,  6, 116,  7, 117, 16,118, 10,
  119, 25, 120, 27, 121, 26, 122, 15, 268, 21, 269, 21, 352, 22,353, 22,
  381, 23, 382, 23,
};


/* Model Table:
 * Total sequences: 698
 * First 512 sequences: 0.998296272473889
 * Next 512 sequences (512-1024): 0.00170372752611106
 * Rest: -2.8189256484623115e-17
 * Negative sequences: TODO
 */
static const PRUint8 SloveneLangModel[] =
{
  2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,2,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,2,3,3,3,2,2,0,3,3,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,0,2,0,3,3,3,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,0,3,3,2,3,0,0,
  3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,2,3,3,3,2,3,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,2,3,3,3,3,2,2,0,2,2,0,
  3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,0,3,3,2,3,3,2,2,0,0,0,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,2,0,2,3,0,3,2,2,3,3,0,3,0,0,2,3,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,3,2,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,3,2,3,3,3,2,2,0,2,3,3,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,0,0,2,2,0,
  3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,0,2,3,0,
  3,3,3,3,3,3,3,2,3,0,3,3,0,0,2,2,3,3,3,2,3,0,0,0,0,0,2,2,0,
  3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,0,3,0,3,3,0,3,2,2,2,0,3,0,0,
  3,3,3,3,2,3,3,3,3,0,2,3,3,3,2,2,3,2,3,3,3,0,0,0,2,2,2,2,2,
  3,3,3,3,3,3,2,3,3,0,3,2,3,3,2,3,3,0,2,0,0,2,0,0,2,2,2,0,0,
  3,3,3,3,3,3,0,2,3,3,2,2,3,2,0,0,3,0,2,2,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,0,3,3,3,2,3,3,0,0,0,3,0,0,0,0,3,0,0,0,0,0,0,0,
  3,3,3,2,3,2,0,0,2,3,2,0,3,0,0,0,2,2,3,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,3,3,2,0,0,0,0,2,0,3,2,0,0,0,0,0,0,3,2,0,0,0,
  3,3,3,3,3,0,3,2,2,0,0,0,0,2,0,0,2,2,2,0,2,0,0,0,0,3,2,0,0,
  2,3,2,3,3,2,3,2,3,3,0,2,2,2,3,0,2,2,2,3,2,0,0,0,0,2,0,0,0,
  3,2,3,3,0,2,2,3,0,0,2,3,0,2,2,0,3,2,3,3,0,0,0,0,0,2,2,3,0,
  0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_2SloveneModel =
{
  Iso_8859_2_CharToOrderMap,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
  PR_TRUE,
  "ISO-8859-2",
  "sl"
};

const SequenceModel Iso_8859_16SloveneModel =
{
  Iso_8859_16_CharToOrderMap,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
  PR_TRUE,
  "ISO-8859-16",
  "sl"
};

const SequenceModel Windows_1250SloveneModel =
{
  Windows_1250_CharToOrderMap,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
  PR_TRUE,
  "WINDOWS-1250",
  "sl"
};

const SequenceModel Ibm852SloveneModel =
{
  Ibm852_CharToOrderMap,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
  PR_TRUE,
  "IBM852",
  "sl"
};

const SequenceModel Mac_CentraleuropeSloveneModel =
{
  Mac_Centraleurope_CharToOrderMap,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
  PR_TRUE,
  "MAC-CENTRALEUROPE",
  "sl"
};

const LanguageModel SloveneModel =
{
  "sl",
  Unicode_CharOrder,
  58,
  SloveneLangModel,
  29,
  (float)0.998296272473889,
};
