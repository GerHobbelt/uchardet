/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Catalan *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 00:52:50.607312
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 15, 10,  9,  0, 17, 16, 19,  3, 25, 29,  5, 12,  6,  8, /* 4X */
   13, 18,  4,  2,  7, 11, 14, 31, 20, 23, 30,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 15, 10,  9,  0, 17, 16, 19,  3, 25, 29,  5, 12,  6,  8, /* 6X */
   13, 18,  4,  2,  7, 11, 14, 31, 20, 23, 30,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 49,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   24, 36, 45, 40, 42, 54, 47, 32, 26, 22, 51, 41, 57, 27, 58, 34, /* CX */
   48, 37, 28, 21, 46, 43, 39,SYM, 59, 53, 33, 60, 35, 50, 56, 55, /* DX */
   24, 36, 45, 40, 42, 54, 47, 32, 26, 22, 51, 41, 61, 27, 62, 34, /* EX */
   48, 37, 28, 21, 46, 43, 39,SYM, 63, 53, 33, 64, 35, 50, 56, 65, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  1, 15, 10,  9,  0, 17, 16, 19,  3, 25, 29,  5, 12,  6,  8, /* 4X */
   13, 18,  4,  2,  7, 11, 14, 31, 20, 23, 30,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  1, 15, 10,  9,  0, 17, 16, 19,  3, 25, 29,  5, 12,  6,  8, /* 6X */
   13, 18,  4,  2,  7, 11, 14, 31, 20, 23, 30,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM, 66,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM, 52,ILL, 44,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM, 52,ILL, 44, 67, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 49,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   24, 36, 45, 40, 42, 54, 47, 32, 26, 22, 51, 41, 68, 27, 69, 34, /* CX */
   48, 37, 28, 21, 46, 43, 39,SYM, 70, 53, 33, 71, 35, 50, 56, 55, /* DX */
   24, 36, 45, 40, 42, 54, 47, 32, 26, 22, 51, 41, 72, 27, 73, 34, /* EX */
   48, 37, 28, 21, 46, 43, 39,SYM, 74, 53, 33, 75, 35, 50, 56, 76, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 72;
static const unsigned int Unicode_CharOrder[] =
{
  65,  1, 66, 15, 67, 10, 68,  9, 69,  0, 70, 17, 71, 16,72, 19,
  73,  3, 74, 25, 75, 29, 76,  5, 77, 12, 78,  6, 79,  8,80, 13,
  81, 18, 82,  4, 83,  2, 84,  7, 85, 11, 86, 14, 87, 31,88, 20,
  89, 23, 90, 30, 97,  1, 98, 15, 99, 10, 100,  9, 101,  0,102, 17,
  103, 16, 104, 19, 105,  3, 106, 25, 107, 29, 108,  5, 109, 12,110,  6,
  111,  8, 112, 13, 113, 18, 114,  4, 115,  2, 116,  7, 117, 11,118, 14,
  119, 31, 120, 20, 121, 23, 122, 30, 192, 24, 199, 32, 200, 26,201, 22,
  205, 27, 207, 34, 210, 28, 211, 21, 218, 33, 220, 35, 224, 24,231, 32,
  232, 26, 233, 22, 237, 27, 239, 34, 242, 28, 243, 21, 250, 33,252, 35,
};


/* Model Table:
 * Total considered sequences: 1196 / 1296
 * - Positive sequences: first 562 (0.9950372095665512)
 * - Probable sequences: next 208 (770-562) (0.003968073623814128)
 * - Neutral sequences: last 526 (0.0009947168096346992)
 * - Negative sequences: 100 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 CatalanLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,3,3,0,1,3,3,3,3,3,0,3,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,0,3,2,3,1,3,3,3,3,2,3,1,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,1,3,3,3,3,1,3,3,3,3,2,3,0,2,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,3,3,3,1,3,3,3,2,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,1,1,
  3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,2,3,3,3,3,3,2,3,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,0,3,3,3,3,3,3,3,3,3,3,2,3,3,0,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,3,2,3,1,1,1,3,3,3,1,0,2,0,
  3,3,3,3,3,3,3,2,3,3,2,3,3,2,3,2,2,2,2,2,2,3,3,3,3,3,3,3,3,1,1,3,0,3,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,2,2,2,2,3,1,3,3,3,3,1,3,3,3,3,2,1,0,2,0,0,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,2,3,1,3,2,3,3,3,3,1,3,3,2,1,0,3,0,
  3,3,3,3,2,2,3,3,3,2,3,3,3,3,2,3,1,3,0,2,0,3,3,3,3,1,3,3,3,1,1,1,0,3,0,1,
  3,3,3,3,3,3,2,3,3,2,3,3,2,3,1,2,2,1,1,3,1,3,2,2,3,1,3,3,3,1,1,2,2,3,0,0,
  3,3,2,3,2,2,2,1,3,2,1,3,1,1,1,1,1,0,0,1,1,1,3,2,3,0,2,3,1,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,2,2,1,1,1,2,3,3,3,3,2,2,2,0,0,1,0,2,0,1,
  3,3,3,3,3,3,3,3,3,2,1,3,3,1,1,2,3,1,0,3,1,2,2,3,3,1,3,2,3,1,0,2,0,2,0,3,
  3,3,2,3,3,3,1,3,3,1,2,3,1,1,1,2,1,3,1,1,1,2,1,1,3,1,2,3,3,1,0,1,0,1,0,1,
  1,1,0,1,1,0,0,0,0,0,1,3,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,3,
  3,3,2,3,3,2,3,3,3,2,1,3,2,1,1,2,1,1,1,1,1,1,2,3,2,1,2,2,1,2,1,2,0,1,0,1,
  3,3,2,3,1,1,2,3,3,2,3,3,1,3,3,1,1,2,1,2,3,1,1,2,2,1,3,3,3,1,0,1,0,1,0,1,
  1,1,3,1,2,2,3,1,0,1,1,0,2,2,1,2,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,
  2,2,3,3,2,2,3,2,1,2,2,3,1,2,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,2,3,3,3,2,3,2,1,3,2,1,1,1,1,1,1,1,2,1,0,1,0,1,2,2,1,1,0,1,
  1,0,3,1,3,3,3,3,0,2,3,2,3,3,2,3,3,3,2,1,3,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,
  3,3,1,3,2,1,1,1,3,1,1,3,1,0,1,1,0,1,0,1,0,2,1,1,3,0,1,1,1,2,0,0,0,1,0,0,
  0,0,3,3,3,3,3,3,1,3,3,1,3,3,2,2,3,2,2,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  1,3,3,1,3,3,3,3,3,3,3,0,3,3,3,2,3,3,3,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
  0,0,3,1,3,3,3,3,0,3,3,0,3,3,2,3,3,3,2,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,3,2,3,2,2,3,1,1,3,3,1,1,1,1,1,0,2,0,1,1,3,1,1,1,1,0,2,0,1,0,2,0,1,
  3,3,0,3,2,2,2,1,3,1,2,3,1,2,1,1,1,1,2,2,1,2,1,2,2,1,1,1,2,2,3,2,0,1,0,1,
  3,3,3,3,2,2,3,2,3,2,1,1,1,2,0,1,0,1,0,3,0,1,0,2,0,1,0,0,0,1,1,3,0,0,0,0,
  0,3,1,1,0,1,0,0,3,0,0,3,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,1,0,0,0,0,0,0,0,
  1,1,3,1,2,3,3,2,0,1,2,0,3,2,2,3,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  2,2,3,0,1,2,3,3,0,3,2,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,0,1,2,2,1,1,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,3,2,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_1CatalanModel =
{
  Iso_8859_1_CharToOrderMap,
  CatalanLangModel,
  36,
  (float)0.9990052831903653,
  PR_TRUE,
  "ISO-8859-1",
  "ca"
};

const SequenceModel Windows_1252CatalanModel =
{
  Windows_1252_CharToOrderMap,
  CatalanLangModel,
  36,
  (float)0.9990052831903653,
  PR_TRUE,
  "WINDOWS-1252",
  "ca"
};

const LanguageModel CatalanModel =
{
  "ca",
  Unicode_CharOrder,
  72,
  CatalanLangModel,
  36,
  5,
  (float)0.46850716817713517,
  21,
  (float)0.032512123821254735,
  (float)0.9995477773255552,
};
