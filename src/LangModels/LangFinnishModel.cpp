/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Finnish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:01:43.323316
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 77,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* CX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38, 78, 48, 79, 32, 74, 67, 56, /* DX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* EX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38, 80, 48, 81, 32, 74, 67, 82, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 61, 83, 84,SYM, 85, 73,SYM,SYM, 27, 66, 86, 87,SYM, 33,SYM, /* AX */
  SYM, 61,SYM, 88,SYM, 89, 73,SYM,SYM, 27, 66, 90, 91, 47, 33, 47, /* BX */
   41, 30, 59, 37, 11, 42, 40, 92, 49, 29, 57, 52, 39, 31, 51, 58, /* CX */
   54, 93, 70, 94, 44, 71, 20,SYM, 38, 72, 48, 95, 32, 96, 45, 56, /* DX */
   41, 30, 59, 37, 11, 42, 40, 97, 49, 29, 57, 52, 39, 31, 51, 58, /* EX */
   54, 98, 70, 99, 44, 71, 20,SYM, 38, 72, 48,100, 32,101, 45,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,102,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* CX */
   75, 53, 69, 34, 44, 71, 20,SYM, 38,103, 48,104, 32,105,106, 56, /* DX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* EX */
   75, 53, 69, 34, 44, 71, 20,SYM, 38,107, 48,108, 32, 55,109,110, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM,111,SYM,SYM,SYM,SYM, 40, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM,112,SYM,SYM,SYM,SYM, 40, /* BX */
   61,113, 41, 43, 11, 42, 57, 66, 49, 29,114, 39,115,116, 58, 73, /* CX */
   27, 64,117, 34, 70, 71, 20,SYM, 72, 76, 65, 45, 32, 62, 33, 56, /* DX */
   61,118, 41, 43, 11, 42, 57, 66, 49, 29,119, 39,120,121, 58, 73, /* EX */
   27, 64,122, 34, 70, 71, 20,SYM, 72, 76, 65, 45, 32, 62, 33,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 27,SYM, 27,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 33,123,SYM,SYM, 33,SYM,SYM,SYM,124,125,126,SYM, /* BX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* CX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38,127, 48,128, 32, 74, 67, 56, /* DX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* EX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38,129, 48,130, 32, 74, 67,131, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 4X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 22, 18,  5, 23, 19, 16,  1, 14,  9,  6, 10,  3,  7, /* 6X */
   15, 28, 12,  4,  2,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,132,SYM,SYM,SYM,SYM,SYM,SYM, 27,SYM,133,ILL, 33,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 27,SYM,134,ILL, 33,135, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,136,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* CX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38,137, 48,138, 32, 74, 67, 56, /* DX */
   46, 30, 59, 37, 11, 42, 40, 35, 36, 29, 60, 52, 68, 31, 51, 50, /* EX */
   63, 53, 69, 34, 44, 71, 20,SYM, 38,139, 48,140, 32, 74, 67,141, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 58;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 21,  67, 22,  68, 18,  69,  5,  70, 23,  71, 19, 72, 16,
   73,  1,  74, 14,  75,  9,  76,  6,  77, 10,  78,  3,  79,  7, 80, 15,
   81, 28,  82, 12,  83,  4,  84,  2,  85,  8,  86, 13,  87, 24, 88, 26,
   89, 17,  90, 25,  97,  0,  98, 21,  99, 22, 100, 18, 101,  5,102, 23,
  103, 19, 104, 16, 105,  1, 106, 14, 107,  9, 108,  6, 109, 10,110,  3,
  111,  7, 112, 15, 113, 28, 114, 12, 115,  4, 116,  2, 117,  8,118, 13,
  119, 24, 120, 26, 121, 17, 122, 25, 196, 11, 214, 20, 228, 11,246, 20,
  352, 27, 353, 27,
};


/* Model Table:
 * Total considered sequences: 1166 / 841
 * - Positive sequences: first 398 (0.9950171899546914)
 * - Probable sequences: next 196 (594-398) (0.003983288176498734)
 * - Neutral sequences: last 247 (0.0009995218688099161)
 * - Negative sequences: -325 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 FinnishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,1,3,3,1,1,3,2,3,2,2,2,0,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,3,3,2,3,1,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,1,2,
  3,3,3,2,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,2,3,1,2,0,1,1,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,3,3,3,2,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,2,3,3,1,3,3,2,2,2,2,2,1,
  3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,3,3,1,2,3,1,1,1,1,1,0,1,0,
  3,3,2,2,2,3,2,3,3,1,3,3,2,1,1,3,1,3,2,1,2,3,2,2,2,1,1,0,1,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,2,1,2,
  3,3,2,1,2,3,2,3,3,1,1,3,2,1,1,2,0,3,1,1,1,1,0,1,0,0,1,0,0,
  3,3,0,2,1,3,2,3,3,0,1,3,2,1,1,2,0,3,1,0,3,0,1,1,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,2,2,3,3,1,1,3,3,3,2,1,3,1,1,2,1,1,0,0,0,
  3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,1,1,3,3,1,2,1,1,1,2,1,0,0,1,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,2,2,1,1,1,1,0,0,
  3,3,2,2,3,3,2,3,3,1,2,3,3,2,2,2,2,3,2,2,2,2,2,2,2,1,0,0,1,
  3,3,2,3,2,3,3,3,3,2,2,1,3,2,1,1,3,3,2,2,2,2,1,1,2,0,0,0,0,
  2,3,3,3,3,2,3,2,1,3,3,3,3,3,3,2,3,3,2,1,3,0,0,0,0,1,0,0,0,
  3,3,2,3,2,3,3,3,3,2,2,1,3,1,2,1,2,2,2,0,1,3,3,1,2,1,0,0,0,
  3,3,3,2,2,3,3,3,3,3,2,0,2,1,0,1,3,2,2,1,0,1,2,1,1,1,1,0,2,
  3,3,2,1,2,3,3,3,2,1,1,1,3,1,1,2,1,2,1,2,1,1,2,2,0,0,0,0,0,
  3,3,1,2,2,3,2,3,1,1,1,1,2,1,0,1,2,1,1,2,1,0,1,1,1,0,0,0,0,
  3,3,1,1,0,3,1,2,2,1,1,0,1,1,1,1,1,2,1,1,1,2,1,1,1,2,0,0,0,
  2,3,2,0,1,2,1,2,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,2,0,0,1,0,0,
  2,2,2,1,0,2,0,2,2,2,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,
  2,1,0,0,1,0,0,1,3,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_1FinnishModel =
{
  Iso_8859_1_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "ISO-8859-1",
  "fi"
};

const SequenceModel Iso_8859_4FinnishModel =
{
  Iso_8859_4_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "ISO-8859-4",
  "fi"
};

const SequenceModel Iso_8859_9FinnishModel =
{
  Iso_8859_9_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "ISO-8859-9",
  "fi"
};

const SequenceModel Iso_8859_13FinnishModel =
{
  Iso_8859_13_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "ISO-8859-13",
  "fi"
};

const SequenceModel Iso_8859_15FinnishModel =
{
  Iso_8859_15_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "ISO-8859-15",
  "fi"
};

const SequenceModel Windows_1252FinnishModel =
{
  Windows_1252_CharToOrderMap,
  FinnishLangModel,
  29,
  (float)0.9990004781311901,
  PR_TRUE,
  "WINDOWS-1252",
  "fi"
};

const LanguageModel FinnishModel =
{
  "fi",
  Unicode_CharOrder,
  58,
  FinnishLangModel,
  29,
  3,
  (float)0.3300643936651628,
  16,
  (float)0.04489754832004237,
};
