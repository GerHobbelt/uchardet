/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Finnish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 02:33:01.137047
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 73,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42, 74, 31, 51, 62, /* CX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37, 75, 33, 56, 69, 64, /* DX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42, 76, 31, 51, 62, /* EX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37, 77, 33, 56, 69, 78, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 79, 80, 81,SYM, 82, 83,SYM,SYM, 29, 63, 84, 85,SYM, 34,SYM, /* AX */
  SYM, 86,SYM, 87,SYM, 88, 89,SYM,SYM, 29, 63, 90, 91, 48, 34, 48, /* BX */
   43, 30, 49, 36, 12, 44, 45, 92, 60, 28, 53, 42, 93, 31, 51, 61, /* CX */
   65, 94, 35, 68, 50, 70, 22,SYM, 38, 95, 37, 96, 33, 97, 52, 64, /* DX */
   43, 30, 49, 36, 12, 44, 45, 98, 60, 28, 53, 42, 99, 31, 51, 61, /* EX */
   65,100, 35, 68, 50, 70, 22,SYM, 38,101, 37,102, 33,103, 52,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,104,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,105, 31, 51, 62, /* CX */
  106, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,107, 33,108, 59, 64, /* DX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,109, 31, 51, 62, /* EX */
  110, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,111, 33, 66, 59,112, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM,113,SYM,SYM,SYM,SYM, 45, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 38,SYM,114,SYM,SYM,SYM,SYM, 45, /* BX */
  115,116, 43, 47, 12, 44, 53, 63, 60, 28,117,118,119, 68, 61,120, /* CX */
   29, 67,121, 32, 35, 70, 22,SYM,122, 46, 54, 52, 33,123, 34, 64, /* DX */
  124,125, 43, 47, 12, 44, 53, 63, 60, 28,126,127,128, 68, 61,129, /* EX */
   29, 67,130, 32, 35, 70, 22,SYM,131, 46, 54, 52, 33,132, 34,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM, 29,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 34,133,SYM,SYM, 34,SYM,SYM,SYM,134,135,136,SYM, /* BX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,137, 31, 51, 62, /* CX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,138, 33, 56, 69, 64, /* DX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,139, 31, 51, 62, /* EX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,140, 33, 56, 69,141, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 4X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 21, 19, 18,  4, 23, 20, 14,  1, 15,  9,  6, 11,  3,  7, /* 6X */
   17, 27, 10,  5,  2,  8, 13, 24, 26, 16, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,142,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,143,ILL, 34,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 29,SYM,144,ILL, 34,145, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,146,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,147, 31, 51, 62, /* CX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,148, 33, 56, 69, 64, /* DX */
   58, 30, 49, 36, 12, 44, 45, 40, 39, 28, 57, 42,149, 31, 51, 62, /* EX */
   55, 41, 72, 32, 50, 70, 22,SYM, 38, 71, 37,150, 33, 56, 69,151, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 56;
static const unsigned int Unicode_CharOrder[] =
{
  65,  0, 66, 21, 67, 19, 68, 18, 69,  4, 70, 23, 71, 20,72, 14,
  73,  1, 74, 15, 75,  9, 76,  6, 77, 11, 78,  3, 79,  7,80, 17,
  81, 27, 82, 10, 83,  5, 84,  2, 85,  8, 86, 13, 87, 24,88, 26,
  89, 16, 90, 25, 97,  0, 98, 21, 99, 19, 100, 18, 101,  4,102, 23,
  103, 20, 104, 14, 105,  1, 106, 15, 107,  9, 108,  6, 109, 11,110,  3,
  111,  7, 112, 17, 113, 27, 114, 10, 115,  5, 116,  2, 117,  8,118, 13,
  119, 24, 120, 26, 121, 16, 122, 25, 196, 12, 214, 22, 228, 12,246, 22,
};


/* Model Table:
 * Total considered sequences: 1179 / 784
 * - Positive sequences: first 419 (0.9950617826968323)
 * - Probable sequences: next 172 (591-419) (0.003945095079685101)
 * - Neutral sequences: last 193 (0.0009931222234825787)
 * - Negative sequences: -395 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 FinnishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,3,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,2,2,3,2,3,2,1,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,2,3,2,1,2,
  3,3,3,2,3,3,3,3,3,3,2,3,3,3,2,3,3,3,3,2,3,3,3,3,2,2,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,2,3,3,3,3,3,1,2,2,2,2,1,
  3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,1,3,2,1,1,2,1,3,1,2,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,
  3,3,2,2,3,3,2,3,3,1,2,3,3,1,1,1,3,3,2,3,2,3,2,2,2,1,1,1,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,0,1,0,
  3,3,1,1,3,2,2,3,3,1,2,1,3,0,1,1,3,1,2,1,2,2,1,1,1,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,3,1,3,2,1,2,3,1,2,1,1,1,
  3,3,1,1,3,1,1,3,3,1,2,0,3,1,1,1,3,1,1,1,1,1,2,0,0,1,1,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,2,2,3,1,2,2,1,1,
  3,3,3,2,3,3,3,3,3,2,3,2,3,1,3,1,3,3,2,2,1,2,3,1,1,1,0,1,
  3,3,2,3,3,3,3,3,3,2,3,2,3,2,2,2,3,2,3,2,2,2,2,2,3,1,1,1,
  3,3,3,2,3,3,3,3,3,3,3,2,0,1,3,1,3,1,3,3,2,1,0,1,1,2,1,2,
  3,3,2,3,3,3,3,3,3,2,3,2,1,2,3,1,2,2,2,1,3,2,2,2,2,1,1,1,
  3,3,2,3,3,2,3,3,3,1,3,2,2,1,2,2,3,1,2,2,1,3,1,1,2,1,1,0,
  2,3,3,3,2,3,3,2,1,3,3,3,3,3,3,2,3,2,2,1,1,1,3,1,0,0,0,0,
  3,3,3,1,3,2,3,3,3,1,3,2,1,1,1,1,2,1,2,1,2,1,1,3,1,1,1,0,
  3,3,2,3,3,2,2,3,1,2,2,1,1,1,3,1,2,1,2,1,0,2,1,2,2,0,0,0,
  3,3,2,1,3,1,2,3,3,1,2,2,0,1,2,0,2,1,1,1,1,1,0,1,1,3,1,0,
  2,3,2,0,2,1,1,2,1,0,1,1,0,1,1,0,2,2,1,2,1,2,0,2,1,1,1,0,
  1,1,0,0,0,1,1,1,3,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,
};


const SequenceModel Iso_8859_1FinnishModel =
{
  Iso_8859_1_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "ISO-8859-1",
  "fi"
};

const SequenceModel Iso_8859_4FinnishModel =
{
  Iso_8859_4_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "ISO-8859-4",
  "fi"
};

const SequenceModel Iso_8859_9FinnishModel =
{
  Iso_8859_9_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "ISO-8859-9",
  "fi"
};

const SequenceModel Iso_8859_13FinnishModel =
{
  Iso_8859_13_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "ISO-8859-13",
  "fi"
};

const SequenceModel Iso_8859_15FinnishModel =
{
  Iso_8859_15_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "ISO-8859-15",
  "fi"
};

const SequenceModel Windows_1252FinnishModel =
{
  Windows_1252_CharToOrderMap,
  FinnishLangModel,
  28,
  (float)0.9990068777765174,
  PR_TRUE,
  "WINDOWS-1252",
  "fi"
};

const LanguageModel FinnishModel =
{
  "fi",
  Unicode_CharOrder,
  56,
  FinnishLangModel,
  28,
  4,
  (float)0.4002488859272833,
  17,
  (float)0.04164891091583024,
  (float)0.9995002290616799,
};
