/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Finnish *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 19:06:31.129345
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_1_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 65,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32, 66, 59, /* CX */
   67, 58, 50, 33, 35, 53, 22,SYM, 68, 69, 41, 70, 34, 71, 72, 56, /* DX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32, 73, 59, /* EX */
   74, 58, 50, 33, 35, 53, 22,SYM, 75, 76, 41, 77, 34, 78, 79, 80, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_4_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 81, 82, 48,SYM, 83, 84,SYM,SYM, 28, 85, 86, 87,SYM, 27,SYM, /* AX */
  SYM, 88,SYM, 48,SYM, 89, 90,SYM,SYM, 28, 91, 92, 93, 42, 27, 42, /* BX */
   63, 36, 62, 47, 12, 54, 37, 94, 46, 30, 95, 31, 96, 32, 97, 98, /* CX */
   99, 64,100,101, 35, 53, 22,SYM,102,103, 41,104, 34,105, 55, 56, /* DX */
   63, 36, 62, 47, 12, 54, 37,106, 46, 30,107, 31,108, 32,109,110, /* EX */
  111, 64,112,113, 35, 53, 22,SYM,114,115, 41,116, 34,117, 55,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_9_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,118,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,119, 59, /* CX */
   51, 58, 50, 33, 35, 53, 22,SYM,120,121, 41,122, 34, 49, 43, 56, /* DX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,123, 59, /* EX */
   51, 58, 50, 33, 35, 53, 22,SYM,124,125, 41,126, 34, 45, 43,127, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_13_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,128,SYM, 48,SYM,SYM,SYM,SYM, 37, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,129,SYM, 48,SYM,SYM,SYM,SYM, 37, /* BX */
  130,131, 63, 40, 12, 54,132,133, 46, 30, 61,134,135,136,137,138, /* CX */
   28,139, 64, 33,140, 53, 22,SYM,141,142,143, 55, 34, 57, 27, 56, /* DX */
  144,145, 63, 40, 12, 54,146,147, 46, 30, 61,148,149,150,151,152, /* EX */
   28,153, 64, 33,154, 53, 22,SYM,155,156,157, 55, 34, 57, 27,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_15_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM, 28,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM, 27,158,SYM,SYM, 27,SYM,SYM,SYM,159,160,161,SYM, /* BX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,162, 59, /* CX */
  163, 58, 50, 33, 35, 53, 22,SYM,164,165, 41,166, 34,167,168, 56, /* DX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,169, 59, /* EX */
  170, 58, 50, 33, 35, 53, 22,SYM,171,172, 41,173, 34,174,175,176, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1252_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 4X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM,  0, 19, 21, 18,  4, 23, 20, 15,  1, 14,  9,  6, 11,  2,  7, /* 6X */
   16, 29, 10,  5,  3,  8, 13, 24, 26, 17, 25,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,177,SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM,178,ILL, 27,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, 28,SYM,179,ILL, 27,180, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,181,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,182, 59, /* CX */
  183, 58, 50, 33, 35, 53, 22,SYM,184,185, 41,186, 34,187,188, 56, /* DX */
   44, 36, 62, 47, 12, 54, 37, 39, 38, 30, 52, 31, 60, 32,189, 59, /* EX */
  190, 58, 50, 33, 35, 53, 22,SYM,191,192, 41,193, 34,194,195,196, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 60;
static const unsigned int Unicode_CharOrder[] =
{
   65,  0,  66, 19,  67, 21,  68, 18,  69,  4,  70, 23,  71, 20, 72, 15,
   73,  1,  74, 14,  75,  9,  76,  6,  77, 11,  78,  2,  79,  7, 80, 16,
   81, 29,  82, 10,  83,  5,  84,  3,  85,  8,  86, 13,  87, 24, 88, 26,
   89, 17,  90, 25,  97,  0,  98, 19,  99, 21, 100, 18, 101,  4,102, 23,
  103, 20, 104, 15, 105,  1, 106, 14, 107,  9, 108,  6, 109, 11,110,  2,
  111,  7, 112, 16, 113, 29, 114, 10, 115,  5, 116,  3, 117,  8,118, 13,
  119, 24, 120, 26, 121, 17, 122, 25, 196, 12, 214, 22, 228, 12,246, 22,
  352, 28, 353, 28, 381, 27, 382, 27,
};


/* Model Table:
 * Total sequences: 940
 * First 512 sequences: 0.9985812031154878
 * Next 512 sequences (512-1024): 0.0014187968845121583
 * Rest: 2.7321894746634712e-17
 * Negative sequences: TODO
 */
static const PRUint8 FinnishLangModel[] =
{
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,3,3,3,2,3,3,2,0,3,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,0,3,3,2,3,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,0,2,3,2,3,2,2,0,2,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,
  3,3,2,2,3,3,2,3,3,2,3,3,3,2,2,2,3,3,2,3,3,3,3,2,2,2,2,0,0,0,
  3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,0,2,2,2,0,0,0,0,0,0,
  3,3,2,2,3,2,2,3,3,2,2,0,3,2,2,2,2,3,2,0,0,0,2,0,0,0,0,0,0,0,
  3,3,2,0,3,2,2,3,3,2,2,2,3,2,0,2,2,3,0,2,0,2,3,2,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,0,3,3,2,2,0,0,0,0,2,
  3,3,2,3,3,3,3,3,3,2,3,3,3,2,0,3,3,3,3,2,2,2,3,2,3,0,0,0,2,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,2,3,2,2,0,2,0,
  3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,3,0,2,
  3,3,3,3,3,3,3,3,3,3,3,2,2,0,2,3,0,3,3,3,2,3,2,0,2,2,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,2,3,3,3,3,3,3,2,3,2,0,0,0,2,
  3,3,2,3,3,3,3,3,3,3,3,2,0,0,0,3,2,3,3,2,3,3,0,0,2,2,0,0,0,2,
  3,3,3,3,2,3,3,2,0,3,3,3,3,3,3,3,3,3,3,0,2,0,3,2,0,0,0,0,0,0,
  3,3,2,3,3,3,3,3,3,2,3,2,2,2,2,0,2,3,0,2,2,3,0,3,2,2,0,0,0,0,
  3,3,3,2,3,3,2,3,2,2,3,2,0,0,0,3,0,2,2,2,0,2,0,2,0,0,0,0,0,0,
  3,3,3,2,3,0,2,3,2,2,2,2,2,2,0,2,2,3,2,2,2,0,0,2,2,3,0,0,0,0,
  3,3,0,2,2,2,3,2,2,0,0,2,0,2,0,2,2,0,0,2,0,2,0,3,2,0,2,0,0,0,
  3,2,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,2,2,3,0,0,2,2,2,2,2,0,2,2,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,0,0,0,2,0,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_1FinnishModel =
{
  Iso_8859_1_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "ISO-8859-1",
  "fi"
};

const SequenceModel Iso_8859_4FinnishModel =
{
  Iso_8859_4_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "ISO-8859-4",
  "fi"
};

const SequenceModel Iso_8859_9FinnishModel =
{
  Iso_8859_9_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "ISO-8859-9",
  "fi"
};

const SequenceModel Iso_8859_13FinnishModel =
{
  Iso_8859_13_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "ISO-8859-13",
  "fi"
};

const SequenceModel Iso_8859_15FinnishModel =
{
  Iso_8859_15_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "ISO-8859-15",
  "fi"
};

const SequenceModel Windows_1252FinnishModel =
{
  Windows_1252_CharToOrderMap,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
  PR_TRUE,
  "WINDOWS-1252",
  "fi"
};

const LanguageModel FinnishModel =
{
  "fi",
  Unicode_CharOrder,
  60,
  FinnishLangModel,
  30,
  (float)0.9985812031154878,
};
