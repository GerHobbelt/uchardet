/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Bulgarian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 00:38:19.966429
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 26, 45, 37, 40, 24, 46, 44, 38, 25, 52, 50, 36, 39, 30, 31, /* 4X */
   43, 55, 32, 29, 33, 42, 49, 47, 51, 48, 54,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 45, 37, 40, 24, 46, 44, 38, 25, 52, 50, 36, 39, 30, 31, /* 6X */
   43, 55, 32, 29, 33, 42, 49, 47, 51, 48, 54,SYM,SYM,SYM,SYM,CTR, /* 7X */
   62, 68,SYM, 69,SYM,SYM,SYM,SYM,SYM,SYM, 65,SYM, 61, 70, 60, 66, /* 8X */
   62,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 65,SYM, 61, 71, 60, 66, /* 9X */
  SYM, 72, 73, 58,SYM, 74,SYM,SYM, 67,SYM, 64,SYM,SYM,SYM,SYM, 63, /* AX */
  SYM,SYM, 56, 56, 75,SYM,SYM,SYM, 67,SYM, 64,SYM, 58, 76, 77, 63, /* BX */
    0, 19,  8, 16, 11,  3, 22, 14,  1, 23,  9, 10, 13,  4,  2, 12, /* CX */
    6,  7,  5, 18, 34, 28, 21, 20, 35, 27, 17, 57, 53, 59, 41, 15, /* DX */
    0, 19,  8, 16, 11,  3, 22, 14,  1, 23,  9, 10, 13,  4,  2, 12, /* EX */
    6,  7,  5, 18, 34, 28, 21, 20, 35, 27, 17, 57, 53, 59, 41, 15, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 26, 45, 37, 40, 24, 46, 44, 38, 25, 52, 50, 36, 39, 30, 31, /* 4X */
   43, 55, 32, 29, 33, 42, 49, 47, 51, 48, 54,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 45, 37, 40, 24, 46, 44, 38, 25, 52, 50, 36, 39, 30, 31, /* 6X */
   43, 55, 32, 29, 33, 42, 49, 47, 51, 48, 54,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 67, 62, 78, 64, 79, 56, 63, 58, 65, 61, 60, 80,SYM, 81, 66, /* AX */
    0, 19,  8, 16, 11,  3, 22, 14,  1, 23,  9, 10, 13,  4,  2, 12, /* BX */
    6,  7,  5, 18, 34, 28, 21, 20, 35, 27, 17, 57, 53, 59, 41, 15, /* CX */
    0, 19,  8, 16, 11,  3, 22, 14,  1, 23,  9, 10, 13,  4,  2, 12, /* DX */
    6,  7,  5, 18, 34, 28, 21, 20, 35, 27, 17, 57, 53, 59, 41, 15, /* EX */
  SYM, 67, 62, 82, 64, 83, 56, 63, 58, 65, 61, 60, 84,SYM, 85, 66, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 108;
static const unsigned int Unicode_CharOrder[] =
{
  65, 26, 66, 45, 67, 37, 68, 40, 69, 24, 70, 46, 71, 44,72, 38,
  73, 25, 74, 52, 75, 50, 76, 36, 77, 39, 78, 30, 79, 31,80, 43,
  82, 32, 83, 29, 84, 33, 85, 42, 86, 49, 87, 47, 88, 51,89, 48,
  97, 26, 98, 45, 99, 37, 100, 40, 101, 24, 102, 46, 103, 44,104, 38,
  105, 25, 106, 52, 107, 50, 108, 36, 109, 39, 110, 30, 111, 31,112, 43,
  114, 32, 115, 29, 116, 33, 117, 42, 118, 49, 119, 47, 120, 51,121, 48,
  1040,  0, 1041, 19, 1042,  8, 1043, 16, 1044, 11, 1045,  3, 1046, 22,1047, 14,
  1048,  1, 1049, 23, 1050,  9, 1051, 10, 1052, 13, 1053,  4, 1054,  2,1055, 12,
  1056,  6, 1057,  7, 1058,  5, 1059, 18, 1060, 34, 1061, 28, 1062, 21,1063, 20,
  1064, 35, 1065, 27, 1066, 17, 1068, 53, 1070, 41, 1071, 15, 1072,  0,1073, 19,
  1074,  8, 1075, 16, 1076, 11, 1077,  3, 1078, 22, 1079, 14, 1080,  1,1081, 23,
  1082,  9, 1083, 10, 1084, 13, 1085,  4, 1086,  2, 1087, 12, 1088,  6,1089,  7,
  1090,  5, 1091, 18, 1092, 34, 1093, 28, 1094, 21, 1095, 20, 1096, 35,1097, 27,
  1098, 17, 1100, 53, 1102, 41, 1103, 15,
};


/* Model Table:
 * Total considered sequences: 1551 / 2916
 * - Positive sequences: first 784 (0.9950007601852563)
 * - Probable sequences: next 230 (1014-784) (0.003999964034245962)
 * - Neutral sequences: last 1902 (0.0009992757804977437)
 * - Negative sequences: 1365 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 BulgarianLangModel[] =
{
  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,0,1,3,3,0,0,0,0,0,3,3,0,0,0,1,
   0,1,0,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,3,3,0,0,0,0,0,3,3,0,1,0,0,
   0,2,0,0,0,1,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,0,0,3,3,0,1,0,0,0,3,3,0,0,0,0,
   0,2,0,1,0,0,1,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,0,0,0,3,3,0,0,0,0,0,3,3,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,1,0,0,0,1,3,0,0,0,0,0,3,3,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2,1,1,0,1,0,0,2,0,0,0,0,0,2,1,0,0,1,0,
   0,3,0,0,1,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,0,1,3,0,0,1,0,0,3,3,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,3,3,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,3,3,1,0,0,0,0,2,3,0,0,1,0,0,1,3,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,2,2,3,3,2,2,3,1,0,0,0,1,0,2,0,0,0,0,0,1,2,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,0,1,0,1,2,0,0,0,0,0,2,2,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,1,0,0,3,
  3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,0,0,0,1,3,0,1,0,0,0,1,3,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,1,2,1,0,3,1,3,3,1,3,2,0,1,0,1,0,1,1,0,0,0,0,0,1,2,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,2,3,3,3,3,3,1,3,2,1,3,2,3,3,3,2,2,1,0,0,0,0,0,1,0,0,0,0,0,3,1,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,1,0,0,0,0,1,3,0,0,0,0,1,1,3,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,1,
  1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,1,3,0,1,3,2,2,2,3,0,0,1,3,3,0,0,0,0,0,0,1,0,1,0,0,
   0,0,0,0,0,0,1,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,2,3,1,3,2,1,3,1,1,1,3,3,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,
   0,2,0,0,0,0,0,0,0,0,0,0,0,2,
  1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,1,3,3,3,3,3,0,0,0,3,3,0,0,0,0,0,2,2,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,3,3,3,2,1,0,0,2,3,0,0,0,0,0,3,3,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,2,2,2,3,2,3,3,1,2,2,1,0,0,0,0,3,3,0,0,0,0,0,1,2,0,0,0,0,
   0,3,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,3,1,3,3,3,0,1,1,1,0,0,2,3,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,1,1,1,1,3,3,1,1,1,0,1,3,0,3,2,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,2,1,3,3,2,3,2,1,0,0,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,1,
  1,0,3,3,3,3,2,3,3,3,3,3,2,3,3,1,2,2,1,3,3,3,0,1,0,0,0,0,1,0,0,1,0,0,2,1,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,1,3,3,3,3,3,0,0,3,3,2,3,
   3,0,3,3,3,3,3,3,3,3,2,3,1,0,
  1,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,3,3,3,0,1,3,3,3,3,3,0,0,3,3,1,3,
   3,0,3,3,3,3,3,1,1,3,3,3,1,0,
  0,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,2,0,0,3,3,2,3,3,0,0,3,3,2,3,
   3,0,3,3,3,3,2,2,3,3,3,2,1,0,
  3,3,3,3,3,3,1,0,1,1,1,0,0,0,0,2,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,2,3,1,3,2,0,3,0,0,0,3,3,0,1,0,0,0,0,1,0,0,2,0,0,0,0,0,1,1,0,0,0,0,
   0,2,0,0,0,0,0,0,0,1,0,0,0,0,
  1,0,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,0,3,3,3,0,0,3,2,3,1,3,0,0,3,3,3,3,
   2,0,3,3,1,3,1,2,2,1,2,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,1,3,0,0,2,3,1,2,
   3,0,3,1,3,2,2,1,3,2,2,1,2,0,
  0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,3,3,3,0,0,3,3,3,3,3,0,0,3,3,2,3,
   3,0,3,3,3,3,3,3,2,3,3,2,2,0,
  1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,3,3,0,0,3,3,2,3,
   3,0,3,2,3,2,2,2,3,2,3,0,1,0,
  1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,3,0,1,3,1,3,3,3,0,0,2,2,3,2,
   1,1,3,1,2,1,1,2,3,2,1,0,1,0,
  3,3,3,3,2,3,3,3,0,2,3,0,1,1,1,3,2,2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,1,2,0,3,3,3,1,1,3,0,0,0,2,3,1,2,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,1,3,1,3,0,0,3,2,1,2,
   3,0,3,2,3,2,2,2,3,2,3,1,1,0,
  0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,3,0,1,3,2,3,3,3,0,0,3,2,3,3,
   2,0,3,1,1,1,1,1,3,1,3,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,2,3,3,3,0,0,2,2,1,2,
   1,0,3,1,1,1,2,1,3,1,2,1,1,0,
  1,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,2,3,1,1,0,0,2,2,1,3,
   1,0,3,3,1,3,2,3,3,1,1,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,2,3,3,2,0,0,2,1,2,2,
   2,0,3,1,2,1,1,2,3,2,1,0,1,0,
  2,2,0,1,3,3,3,3,3,2,3,3,2,2,3,1,3,1,1,3,3,3,3,2,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,1,3,3,0,0,3,3,1,3,
   3,0,2,2,3,3,2,1,1,2,1,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,1,3,3,3,0,0,3,1,3,1,
   1,0,3,3,1,1,1,1,2,1,1,0,1,0,
  0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,2,3,3,1,0,1,3,1,3,2,
   1,0,3,1,2,1,1,2,3,1,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,3,3,3,1,0,0,3,2,1,1,
   2,0,3,0,2,2,1,0,2,1,1,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,1,0,3,3,2,0,0,2,1,0,1,
   1,0,2,1,1,1,2,0,1,0,1,0,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,2,3,2,2,0,0,1,1,3,1,
   1,0,1,2,1,1,1,3,1,0,1,0,0,0,
  0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,3,2,2,0,0,3,2,3,2,2,0,0,3,2,1,2,
   2,0,1,2,1,3,1,1,1,1,1,2,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,1,1,3,1,1,0,0,1,0,0,1,
   2,0,2,1,2,1,1,0,1,0,0,0,0,0,
  1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,2,2,2,1,0,0,2,0,2,3,
   1,0,3,1,2,1,1,1,2,2,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,3,2,0,0,1,0,2,0,2,0,0,1,1,1,1,
   1,0,1,2,0,1,2,1,1,3,1,3,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,1,1,3,1,0,0,0,0,0,1,1,
   0,0,2,1,0,1,1,0,1,0,1,0,0,0,
  0,1,3,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251BulgarianModel =
{
  Windows_1251_CharToOrderMap,
  BulgarianLangModel,
  54,
  (float)0.9990007242195023,
  PR_FALSE,
  "WINDOWS-1251",
  "bg"
};

const SequenceModel Iso_8859_5BulgarianModel =
{
  Iso_8859_5_CharToOrderMap,
  BulgarianLangModel,
  54,
  (float)0.9990007242195023,
  PR_FALSE,
  "ISO-8859-5",
  "bg"
};

const LanguageModel BulgarianModel =
{
  "bg",
  Unicode_CharOrder,
  108,
  BulgarianLangModel,
  54,
  5,
  (float)0.43839809497575805,
  32,
  (float)0.03334856980132045,
  (float)0.9996856230950261,
};
