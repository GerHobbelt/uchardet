/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Bulgarian *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 22:42:30.683065
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Windows_1251_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 25, 45, 37, 40, 21, 46, 43, 38, 26, 53, 49, 35, 39, 27, 28, /* 4X */
   44, 55, 29, 32, 30, 41, 48, 50, 51, 47, 54,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 25, 45, 37, 40, 21, 46, 43, 38, 26, 53, 49, 35, 39, 27, 28, /* 6X */
   44, 55, 29, 32, 30, 41, 48, 50, 51, 47, 54,SYM,SYM,SYM,SYM,CTR, /* 7X */
   71, 63,SYM, 63,SYM,SYM,SYM,SYM,SYM,SYM, 69,SYM, 65, 60, 70, 67, /* 8X */
   72,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, 69,SYM, 65, 60, 70, 67, /* 9X */
  SYM, 68, 68, 58,SYM, 73,SYM,SYM, 62,SYM, 64,SYM,SYM,SYM,SYM, 61, /* AX */
  SYM,SYM, 56, 56, 74,SYM,SYM,SYM, 62,SYM, 64,SYM, 58, 66, 66, 61, /* BX */
    0, 19,  8, 15, 11,  3, 23, 14,  1, 24, 10,  9, 13,  4,  2, 12, /* CX */
    6,  7,  5, 18, 34, 31, 22, 20, 36, 33, 17, 57, 52, 59, 42, 16, /* DX */
    0, 19,  8, 15, 11,  3, 23, 14,  1, 24, 10,  9, 13,  4,  2, 12, /* EX */
    6,  7,  5, 18, 34, 31, 22, 20, 36, 33, 17, 57, 52, 59, 42, 16, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Iso_8859_5_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 25, 45, 37, 40, 21, 46, 43, 38, 26, 53, 49, 35, 39, 27, 28, /* 4X */
   44, 55, 29, 32, 30, 41, 48, 50, 51, 47, 54,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 25, 45, 37, 40, 21, 46, 43, 38, 26, 53, 49, 35, 39, 27, 28, /* 6X */
   44, 55, 29, 32, 30, 41, 48, 50, 51, 47, 54,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM, 62, 75, 63, 64, 66, 56, 61, 58, 69, 65, 70, 60,SYM, 68, 67, /* AX */
    0, 19,  8, 15, 11,  3, 23, 14,  1, 24, 10,  9, 13,  4,  2, 12, /* BX */
    6,  7,  5, 18, 34, 31, 22, 20, 36, 33, 17, 57, 52, 59, 42, 16, /* CX */
    0, 19,  8, 15, 11,  3, 23, 14,  1, 24, 10,  9, 13,  4,  2, 12, /* DX */
    6,  7,  5, 18, 34, 31, 22, 20, 36, 33, 17, 57, 52, 59, 42, 16, /* EX */
  SYM, 62, 76, 63, 64, 66, 56, 61, 58, 69, 65, 70, 60,SYM, 68, 67, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

#define Unicode_Char_size    106

static const unsigned int Unicode_CharOrder[] =
{
  65, 25, 66, 45, 67, 37, 68, 40, 69, 21, 70, 46, 71, 43, 72, 38,
  73, 26, 75, 49, 76, 35, 77, 39, 78, 27, 79, 28, 80, 44, 82, 29,
  83, 32, 84, 30, 85, 41, 86, 48, 87, 50, 88, 51, 89, 47, 97, 25,
  98, 45, 99, 37, 100, 40, 101, 21, 102, 46, 103, 43, 104, 38, 105, 26,
  107, 49, 108, 35, 109, 39, 110, 27, 111, 28, 112, 44, 114, 29, 115, 32,
  116, 30, 117, 41, 118, 48, 119, 50, 120, 51, 121, 47, 1040,  0, 1041, 19,
  1042,  8, 1043, 15, 1044, 11, 1045,  3, 1046, 23, 1047, 14, 1048,  1, 1049, 24,
  1050, 10, 1051,  9, 1052, 13, 1053,  4, 1054,  2, 1055, 12, 1056,  6, 1057,  7,
  1058,  5, 1059, 18, 1060, 34, 1061, 31, 1062, 22, 1063, 20, 1064, 36, 1065, 33,
  1066, 17, 1068, 52, 1070, 42, 1071, 16, 1072,  0, 1073, 19, 1074,  8, 1075, 15,
  1076, 11, 1077,  3, 1078, 23, 1079, 14, 1080,  1, 1081, 24, 1082, 10, 1083,  9,
  1084, 13, 1085,  4, 1086,  2, 1087, 12, 1088,  6, 1089,  7, 1090,  5, 1091, 18,
  1092, 34, 1093, 31, 1094, 22, 1095, 20, 1096, 36, 1097, 33, 1098, 17, 1100, 52,
  1102, 42, 1103, 16,
};

static const float OrderToRatio[] =
{
  0.112100112,  0.112100112,  0.090966864,  0.090966864,  0.081158580,  0.081158580,  0.077223557,  0.077223557, 
  0.070899220,  0.070899220,  0.069890459,  0.069890459,  0.054687801,  0.054687801,  0.047674042,  0.047674042, 
  0.041828837,  0.041828837,  0.033392322,  0.033392322,  0.033037853,  0.033037853,  0.028747872,  0.028747872, 
  0.027497105,  0.027497105,  0.021411602,  0.021411602,  0.020151078,  0.020151078,  0.015848167,  0.015848167, 
  0.015804987,  0.015804987,  0.014887953,  0.014887953,  0.013429579,  0.013429579,  0.013374201,  0.013374201, 
  0.010914628,  0.010914628,  0.007064746,  0.007064746,  0.006843721,  0.006843721,  0.006251882,  0.006251882, 
  0.006067206,  0.006067206,  0.006046226,  0.006046226,  0.005891313,  0.005891313,  0.004915486,  0.004915486, 
  0.004779114,  0.004779114,  0.004529302,  0.004529302,  0.004399761,  0.004399761,  0.004396346,  0.004396346, 
  0.004346091,  0.004346091,  0.004204352,  0.004204352,  0.004171662,  0.004171662,  0.003201933,  0.003201933, 
  0.003008963,  0.003008963,  0.002654250,  0.002654250,  0.002514463,  0.002514463,  0.002364917,  0.002364917, 
  0.002338082,  0.002338082,  0.002030209,  0.002030209,  0.001959217,  0.001959217,  0.001588159,  0.001588159, 
  0.001461057,  0.001461057,  0.001333224,  0.001333224,  0.001180995,  0.001180995,  0.001156843,  0.001156843, 
  0.001123421,  0.001123421,  0.000988757,  0.000988757,  0.000920449,  0.000920449,  0.000384964,  0.000384964, 
  0.000316412,  0.000316412, 
};


/* Model Table:
 * Number of web pages processed for this model: 1028
 * Number of characters consumed for this model: 4099086
 * Total considered sequences: 1705 / 2809
 *
 * - Positive sequences: first 818 (0.9950075785060305)
 * - Probable sequences: next 244 (1062-818) (0.003997658180120323)
 * - Neutral sequences: last 1747 (0.0009947633138491785)
 * - Negative sequences: 1104 (off-ratio, TODO)
 */


#define BulgarianUnicodeAlphabetWidth         53
#define BulgarianUnicodeCharToOrderIsReduced  0


#define BulgarianFCMLowerBound  97
#define BulgarianFCMUpperBound  1103


static const PRUint8 BulgarianUnicodeCharToOrder[] =
{
  26,46,38,41,22,47,44,39,27,0,50,36,40,28,29,45,0,30,33,31,
  42,49,51,52,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,20,9,16,12,
  4,24,15,2,25,11,10,14,5,3,13,7,8,6,19,35,32,23,21,37,
  34,18,0,53,0,43,17,
};

static const PRUint8 BulgarianCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,0,3,3,3,1,0,
  1,0,0,0,3,1,3,3,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,1,
  0,0,0,1,3,0,3,3,0,3,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,0,3,3,3,0,0,
  1,0,0,0,3,0,3,3,0,3,0,0,0,0,0,2,0,0,1,1,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,0,3,3,3,0,0,
  0,1,0,0,3,0,3,3,0,3,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,0,3,3,1,1,0,
  0,0,0,1,3,0,2,3,0,3,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,3,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,1,2,1,1,1,1,
  0,0,0,0,3,0,0,2,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,
  0,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,1,0,1,
  0,1,0,0,3,0,2,3,0,3,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,
  0,3,3,3,3,3,3,3,3,3,3,3,2,3,3,1,3,3,3,3,3,3,1,3,0,1,1,1,
  0,0,0,0,3,0,0,3,0,3,0,0,0,0,0,3,0,1,0,0,0,0,0,0,0,3,
  0,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,1,3,0,3,1,1,0,0,
  0,1,0,0,2,0,1,1,0,3,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,1,3,3,0,0,1,
  0,0,0,1,2,1,2,3,0,3,1,0,0,0,0,3,0,0,1,0,0,0,0,0,0,3,
  0,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,2,2,3,3,2,2,0,3,1,0,0,0,
  0,0,0,0,2,1,0,2,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,
  0,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,0,0,0,
  0,0,0,0,3,0,1,2,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,
  0,3,3,3,3,3,3,3,3,3,3,3,1,2,1,0,1,3,3,3,1,3,0,2,0,1,0,1,
  0,0,0,0,1,0,0,2,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,2,3,3,3,3,3,2,3,2,2,2,3,3,3,3,3,1,2,1,0,0,0,
  0,0,0,0,1,0,1,3,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,0,3,1,0,0,0,
  0,0,0,0,3,0,1,1,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,3,3,3,3,3,1,2,1,3,1,1,1,3,3,1,1,0,0,0,0,0,1,
  0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,2,
  0,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,3,2,0,2,2,3,1,0,
  1,1,1,1,3,0,3,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
  0,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,2,3,3,0,3,3,3,0,0,
  0,0,0,0,3,0,3,2,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,1,3,3,2,0,0,
  0,0,0,0,3,0,2,2,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,3,2,3,3,3,3,2,3,2,2,2,2,3,3,3,1,1,0,2,1,0,0,0,
  0,0,0,0,3,0,3,1,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,3,3,1,3,3,3,1,1,1,0,0,0,3,3,1,1,0,0,1,0,1,0,
  0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,
  0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,3,0,0,1,3,3,
  3,3,3,3,0,3,0,0,3,0,3,2,3,3,3,0,3,3,3,3,3,3,3,3,3,0,
  0,3,3,3,3,1,1,1,1,3,1,3,1,1,0,1,1,3,3,2,2,0,0,0,0,0,0,1,
  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,
  0,3,3,3,3,3,3,2,1,3,2,3,3,2,1,0,1,0,3,3,3,1,1,1,0,0,0,0,
  0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  0,1,1,3,3,3,3,3,3,3,3,3,3,2,3,3,2,1,2,1,3,3,0,3,0,1,0,0,
  0,0,0,0,2,0,1,2,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,3,0,0,0,2,3,
  3,2,3,3,0,3,1,0,3,0,3,3,3,3,3,0,3,3,3,3,3,3,3,3,2,0,
  0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,3,0,0,1,3,3,
  3,3,3,3,1,3,0,0,3,0,3,1,3,3,3,0,3,3,3,3,1,3,3,1,3,0,
  0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  3,3,2,3,0,3,0,0,2,0,3,2,2,3,3,0,3,2,2,3,3,2,3,2,1,0,
  0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,3,0,0,0,3,3,
  3,3,3,3,0,3,0,1,3,0,3,3,3,3,3,0,3,3,3,3,3,3,3,3,2,0,
  0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  3,3,3,3,0,3,0,0,3,0,3,2,3,3,3,0,3,3,2,2,3,2,3,2,0,0,
  0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,3,0,0,0,3,3,
  1,3,3,3,0,3,0,0,3,0,2,3,2,2,3,1,2,1,2,2,3,2,1,3,1,0,
  0,3,3,3,3,3,2,3,2,3,3,1,2,1,3,1,1,1,3,3,1,1,0,0,0,0,0,1,
  0,0,0,0,2,0,1,1,0,1,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,1,
  0,1,0,1,0,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,3,0,1,1,3,3,
  2,3,1,3,0,3,0,0,3,0,3,3,3,2,3,0,2,3,3,2,3,1,3,2,1,0,
  0,3,3,3,3,3,3,2,0,1,0,1,0,0,0,0,1,2,1,3,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,3,3,3,3,2,3,3,3,1,3,2,0,1,1,1,2,3,2,3,1,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  2,3,1,3,1,3,0,0,3,0,2,1,3,3,3,0,3,2,2,2,3,2,2,2,1,0,
  0,3,3,3,3,3,1,2,1,3,3,3,1,2,2,0,1,1,3,3,1,1,0,0,0,0,1,0,
  0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,
  0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  1,3,3,3,0,3,0,0,3,0,2,3,2,2,3,0,1,1,1,1,2,1,3,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,3,0,0,0,3,3,
  3,3,3,3,0,2,0,0,2,0,1,1,2,2,3,0,1,1,2,1,3,1,2,2,1,0,
  0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,3,0,0,0,3,3,
  2,3,2,2,1,3,0,0,2,0,2,1,3,1,3,0,1,3,3,2,3,1,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,3,3,
  2,3,3,2,0,3,0,0,2,0,1,2,2,2,3,0,3,1,2,2,3,2,1,2,1,0,
  0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  3,1,3,3,0,3,0,0,3,0,3,1,3,3,2,0,3,3,3,2,1,2,2,1,2,0,
  0,2,2,1,2,3,3,3,3,3,3,3,3,2,2,3,3,1,1,1,3,3,0,3,3,2,0,0,
  0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,3,0,0,0,3,3,
  2,3,3,2,0,3,0,0,3,0,1,3,2,2,3,0,2,1,1,1,3,1,1,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  1,3,3,3,0,3,0,0,3,0,1,3,2,1,3,0,1,3,1,1,2,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  3,3,3,2,1,2,0,0,3,0,2,1,1,2,3,0,2,1,2,1,3,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  1,3,3,3,0,2,0,0,3,0,1,0,1,1,3,0,1,1,1,3,1,0,1,1,1,0,
  0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,2,
  2,3,2,2,1,3,0,0,2,0,2,1,2,2,1,0,1,2,3,1,0,1,1,1,1,0,
  0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,3,
  2,3,1,1,0,1,0,0,1,0,1,1,1,2,1,0,1,1,1,1,1,1,1,0,1,0,
  0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,3,0,0,0,3,3,
  2,3,2,1,0,3,0,0,2,0,0,2,3,1,3,0,2,1,1,1,2,1,1,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,3,3,
  2,3,2,2,0,2,0,0,2,0,1,3,1,1,1,0,1,1,1,1,1,0,1,3,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,2,3,
  1,2,1,2,0,1,0,0,1,0,1,1,1,1,1,0,0,2,1,2,1,3,1,1,3,0,
  0,0,1,3,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Windows_1251BulgarianModel =
{
  Windows_1251_CharToOrderMap,
  BulgarianFCMLowerBound,
  BulgarianFCMUpperBound,
  BulgarianUnicodeCharToOrder,
  BulgarianCompactedLangModel,
  53,
  (float)0.9990052366861508,
  PR_FALSE,
  "WINDOWS-1251",
  "bg"
};

const SequenceModel Iso_8859_5BulgarianModel =
{
  Iso_8859_5_CharToOrderMap,
  BulgarianFCMLowerBound,
  BulgarianFCMUpperBound,
  BulgarianUnicodeCharToOrder,
  BulgarianCompactedLangModel,
  53,
  (float)0.9990052366861508,
  PR_FALSE,
  "ISO-8859-5",
  "bg"
};

const LanguageModel BulgarianModel =
{
  "bg",
  Unicode_CharOrder,
  106,
  BulgarianFCMLowerBound,
  BulgarianFCMUpperBound,
  BulgarianUnicodeCharToOrderIsReduced,

  BulgarianUnicodeCharToOrder,
  OrderToRatio,
  BulgarianCompactedLangModel,
  53,
  5,
  (float)0.43234833326258587,
  34,
  (float)0.03052631733025362,
  (float)0.999360345208664,
};
