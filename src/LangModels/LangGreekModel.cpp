/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Greek *********/

/**
 * Generated by BuildLangModel.py
 * On: 2022-12-14 18:05:43.615861
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_7_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 32, 49, 40, 42, 31, 50, 47, 43, 33, 55, 52, 39, 44, 34, 35, /* 4X */
   48, 59, 36, 38, 37, 45, 53, 54, 56, 51, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 32, 49, 40, 42, 31, 50, 47, 43, 33, 55, 52, 39, 44, 34, 35, /* 6X */
   48, 59, 36, 38, 37, 45, 53, 54, 56, 51, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM, 17,SYM, 19, 21, 15,SYM, 16,SYM, 24, 26, /* BX */
   58,  0, 28, 18, 20,  5, 30,  9, 25,  3,  6, 14, 12,  4, 29,  1, /* CX */
   11,  7,ILL,  8,  2, 13, 27, 23, 41, 22, 46, 60, 17, 19, 21, 15, /* DX */
   62,  0, 28, 18, 20,  5, 30,  9, 25,  3,  6, 14, 12,  4, 29,  1, /* EX */
   11,  7, 10,  8,  2, 13, 27, 23, 41, 22, 46, 60, 16, 24, 26,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1253_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 32, 49, 40, 42, 31, 50, 47, 43, 33, 55, 52, 39, 44, 34, 35, /* 4X */
   48, 59, 36, 38, 37, 45, 53, 54, 56, 51, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 32, 49, 40, 42, 31, 50, 47, 43, 33, 55, 52, 39, 44, 34, 35, /* 6X */
   48, 59, 36, 38, 37, 45, 53, 54, 56, 51, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 9X */
  SYM,SYM, 17,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 61,SYM,SYM, 19, 21, 15,SYM, 16,SYM, 24, 26, /* BX */
   58,  0, 28, 18, 20,  5, 30,  9, 25,  3,  6, 14, 12,  4, 29,  1, /* CX */
   11,  7,ILL,  8,  2, 13, 27, 23, 41, 22, 46, 60, 17, 19, 21, 15, /* DX */
   62,  0, 28, 18, 20,  5, 30,  9, 25,  3,  6, 14, 12,  4, 29,  1, /* EX */
   11,  7, 10,  8,  2, 13, 27, 23, 41, 22, 46, 60, 16, 24, 26,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 84;
static const unsigned int Unicode_CharOrder[] =
{
   65, 32,  67, 40,  69, 31,  73, 33,  76, 39,  78, 34,  79, 35, 82, 36,
   83, 38,  84, 37,  97, 32,  99, 40, 101, 31, 105, 33, 108, 39,110, 34,
  111, 35, 114, 36, 115, 38, 116, 37, 902, 17, 904, 19, 905, 21,906, 15,
  908, 16, 910, 24, 911, 26, 913,  0, 914, 28, 915, 18, 916, 20,917,  5,
  918, 30, 919,  9, 920, 25, 921,  3, 922,  6, 923, 14, 924, 12,925,  4,
  926, 29, 927,  1, 928, 11, 929,  7, 931,  8, 931, 10, 932,  2,933, 13,
  934, 27, 935, 23, 936, 41, 937, 22, 940, 17, 941, 19, 942, 21,943, 15,
  945,  0, 946, 28, 947, 18, 948, 20, 949,  5, 950, 30, 951,  9,952, 25,
  953,  3, 954,  6, 955, 14, 956, 12, 957,  4, 958, 29, 959,  1,960, 11,
  961,  7, 962, 10, 963,  8, 964,  2, 965, 13, 966, 27, 967, 23,968, 41,
  969, 22, 972, 16, 973, 24, 974, 26,
};


/* Model Table:
 * Total considered sequences: 1629 / 1764
 * - Positive sequences: first 850 (0.9950192468921002)
 * - Probable sequences: next 252 (1102-850) (0.003986534258695218)
 * - Neutral sequences: last 662 (0.0009942188492045867)
 * - Negative sequences: 135 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 GreekLangModel[] =
{
  2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1,3,2,3,
   3,1,3,3,3,2,3,3,3,3,0,0,0,0,0,0,0,1,0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,
   3,2,3,3,3,2,3,3,3,3,0,0,0,1,0,0,0,0,0,0,3,
  3,3,3,3,2,3,2,3,3,3,3,1,3,3,3,3,3,3,2,3,1,
   3,3,2,3,2,3,2,2,0,3,0,0,0,0,1,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,
   3,3,3,1,3,3,3,3,3,3,0,1,0,1,0,0,0,1,0,0,3,
  3,3,3,3,3,3,3,2,3,3,2,2,3,3,2,3,3,3,3,3,3,
   3,3,2,3,3,3,2,1,1,2,0,0,0,0,1,0,0,1,0,0,0,
  3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,
   1,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1,0,0,3,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,
   3,3,3,3,3,3,3,2,0,1,0,1,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,
   3,3,3,3,3,3,3,3,3,2,0,1,0,0,0,0,0,0,0,0,1,
  3,3,3,3,2,3,3,3,3,3,0,3,3,3,3,3,3,3,2,3,3,
   3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,3,1,3,2,3,3,3,1,3,3,3,0,3,1,1,1,3,2,3,
   0,0,3,1,3,0,3,2,3,0,0,0,0,0,0,0,0,0,0,0,3,
  0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  3,3,3,3,3,3,1,3,1,3,1,3,1,3,3,3,3,3,1,3,0,
   3,3,1,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,2,3,3,3,1,1,2,3,2,3,3,3,2,3,3,3,1,3,1,
   3,3,2,3,0,3,3,3,0,1,0,1,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,
   3,1,3,0,3,2,3,3,3,3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,3,1,2,3,2,3,3,3,3,3,3,3,3,3,3,
   3,3,2,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,1,3,3,3,3,3,3,3,3,3,0,3,0,0,0,3,0,3,
   0,3,3,0,3,0,3,3,3,3,0,0,0,0,0,0,0,1,0,0,3,
  2,3,3,2,3,3,3,3,3,3,3,3,3,1,3,0,0,0,3,0,3,
   0,2,3,0,3,0,3,3,2,3,0,0,0,0,0,0,0,0,0,0,3,
  2,3,3,3,3,2,3,3,3,3,3,3,3,1,3,0,0,0,3,0,3,
   0,1,3,0,3,0,3,3,3,3,0,0,0,0,0,0,0,0,1,0,2,
  3,3,1,3,3,3,3,3,0,3,0,0,3,3,3,3,3,3,3,3,3,
   3,3,3,3,0,3,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,2,3,3,3,1,3,0,0,0,3,0,3,
   0,3,3,0,3,0,3,3,3,3,0,0,0,1,0,0,0,0,0,0,3,
  3,3,1,3,2,3,2,3,1,3,0,0,1,3,0,3,3,3,1,3,0,
   3,3,0,3,0,3,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,
  1,0,3,1,3,2,3,3,3,0,3,3,3,0,3,0,0,0,3,0,3,
   0,1,3,0,3,0,3,1,3,1,0,0,0,0,0,0,0,0,0,0,2,
  2,2,3,3,3,2,3,3,3,1,3,3,3,1,3,2,1,3,3,1,3,
   3,1,2,0,3,1,3,3,2,2,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,0,3,1,3,1,0,3,3,3,3,3,3,1,3,0,
   3,3,0,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,2,3,3,3,0,3,0,0,0,3,0,3,
   0,2,3,0,3,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,0,3,3,3,0,3,1,3,0,0,3,3,3,3,3,3,1,3,0,
   3,3,0,3,0,3,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,
  2,2,3,3,3,1,2,3,3,3,3,3,3,0,3,0,0,0,2,0,3,
   0,2,2,0,3,0,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,2,3,2,3,1,0,1,3,3,3,3,3,3,3,1,
   3,3,0,3,3,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,1,3,1,3,1,3,1,1,0,3,3,3,3,3,2,3,3,
   3,3,0,2,0,3,1,2,0,1,1,0,0,0,0,1,0,0,0,0,0,
  3,3,1,3,0,3,1,0,0,3,0,2,1,3,1,3,3,3,1,3,0,
   3,3,0,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,1,3,1,1,1,3,0,1,2,2,1,3,3,3,1,3,0,
   3,3,0,2,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,
   0,0,0,0,1,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,
  0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,
   0,0,0,0,1,0,0,0,0,0,3,2,3,3,2,3,3,3,3,3,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
   0,0,0,0,1,0,0,0,0,0,3,3,2,3,3,3,3,3,3,3,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
   0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,2,3,3,2,3,0,
  0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,
   0,0,0,1,0,0,0,0,0,0,2,2,3,3,3,3,3,3,3,3,0,
  1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,
  1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,
   0,0,0,1,0,0,0,0,0,0,3,3,3,1,3,3,3,3,2,2,0,
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,1,0,0,0,0,0,3,3,3,2,3,2,3,3,2,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,3,3,3,1,3,1,3,2,3,2,0,
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
   0,0,0,0,0,0,0,0,0,0,3,3,3,2,3,3,3,2,3,2,0,
  3,3,0,3,0,3,0,0,0,3,0,1,0,3,0,2,2,2,0,1,0,
   3,2,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_7GreekModel =
{
  Iso_8859_7_CharToOrderMap,
  GreekLangModel,
  42,
  (float)0.9990057811507954,
  PR_FALSE,
  "ISO-8859-7",
  "el"
};

const SequenceModel Windows_1253GreekModel =
{
  Windows_1253_CharToOrderMap,
  GreekLangModel,
  42,
  (float)0.9990057811507954,
  PR_FALSE,
  "WINDOWS-1253",
  "el"
};

const LanguageModel GreekModel =
{
  "el",
  Unicode_CharOrder,
  84,
  GreekLangModel,
  42,
  5,
  (float)0.3796638326464317,
  27,
  (float)0.03455794045912186,
};
