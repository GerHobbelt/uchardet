/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Greek *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 18:58:31.005768
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_7_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 33, 51, 41, 40, 30, 53, 48, 42, 32, 56, 49, 39, 44, 34, 36, /* 4X */
   47, 60, 35, 37, 38, 43, 55, 52, 58, 54, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 33, 51, 41, 40, 30, 53, 48, 42, 32, 56, 49, 39, 44, 34, 36, /* 6X */
   47, 60, 35, 37, 38, 43, 55, 52, 58, 54, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM, 18,SYM, 19, 23, 15,SYM, 16,SYM, 25, 28, /* BX */
   45,  0, 21, 17, 20,  5, 29, 11, 27,  3,  8, 12, 14,  4, 31,  1, /* CX */
   13,  6,ILL,  9,  2, 10, 26, 24, 46, 22, 50, 59, 18, 19, 23, 15, /* DX */
   61,  0, 21, 17, 20,  5, 29, 11, 27,  3,  8, 12, 14,  4, 31,  1, /* EX */
   13,  6,  7,  9,  2, 10, 26, 24, 46, 22, 50, 59, 16, 25, 28,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1253_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 33, 51, 41, 40, 30, 53, 48, 42, 32, 56, 49, 39, 44, 34, 36, /* 4X */
   47, 60, 35, 37, 38, 43, 55, 52, 58, 54, 57,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 33, 51, 41, 40, 30, 53, 48, 42, 32, 56, 49, 39, 44, 34, 36, /* 6X */
   47, 60, 35, 37, 38, 43, 55, 52, 58, 54, 57,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 9X */
  SYM,SYM, 18,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 62,SYM,SYM, 19, 23, 15,SYM, 16,SYM, 25, 28, /* BX */
   45,  0, 21, 17, 20,  5, 29, 11, 27,  3,  8, 12, 14,  4, 31,  1, /* CX */
   13,  6,ILL,  9,  2, 10, 26, 24, 46, 22, 50, 59, 18, 19, 23, 15, /* DX */
   61,  0, 21, 17, 20,  5, 29, 11, 27,  3,  8, 12, 14,  4, 31,  1, /* EX */
   13,  6,  7,  9,  2, 10, 26, 24, 46, 22, 50, 59, 16, 25, 28,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 93;
static const unsigned int Unicode_CharOrder[] =
{
   65, 33,  67, 41,  68, 40,  69, 30,  72, 42,  73, 32,  76, 39, 77, 44,
   78, 34,  79, 36,  82, 35,  83, 37,  84, 38,  85, 43,  97, 33, 99, 41,
  100, 40, 101, 30, 104, 42, 105, 32, 108, 39, 109, 44, 110, 34,111, 36,
  114, 35, 115, 37, 116, 38, 117, 43, 902, 18, 904, 19, 905, 23,906, 15,
  908, 16, 910, 25, 911, 28, 912, 45, 913,  0, 914, 21, 915, 17,916, 20,
  917,  5, 918, 29, 919, 11, 920, 27, 921,  3, 922,  8, 923, 12,924, 14,
  925,  4, 926, 31, 927,  1, 928, 13, 929,  6, 931,  7, 931,  9,932,  2,
  933, 10, 934, 26, 935, 24, 936, 46, 937, 22, 940, 18, 941, 19,942, 23,
  943, 15, 945,  0, 946, 21, 947, 17, 948, 20, 949,  5, 950, 29,951, 11,
  952, 27, 953,  3, 954,  8, 955, 12, 956, 14, 957,  4, 958, 31,959,  1,
  960, 13, 961,  6, 962,  7, 963,  9, 964,  2, 965, 10, 966, 26,967, 24,
  968, 46, 969, 22, 972, 16, 973, 25, 974, 28,
};


/* Model Table:
 * Total sequences: 1390
 * First 512 sequences: 0.9624941725288916
 * Next 512 sequences (512-1024): 0.035897222027766316
 * Rest: 0.0016086054433421051
 * Negative sequences: TODO
 */
static const PRUint8 GreekLangModel[] =
{
  1,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,2,3,3,1,
   2,3,3,3,3,1,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,
  2,2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,3,2,2,3,3,1,
   2,3,3,3,3,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,
  3,3,2,3,2,3,3,3,2,3,3,3,3,1,2,3,3,2,3,3,0,2,3,
   3,2,2,2,1,3,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,3,1,2,3,3,3,1,3,3,3,3,3,3,3,
   2,3,0,2,3,3,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,2,3,2,3,2,3,2,1,2,3,3,3,3,3,3,2,3,
   3,2,2,2,3,3,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,3,3,3,2,3,3,3,3,3,1,3,3,3,3,2,3,2,1,3,3,3,
   1,3,3,3,3,2,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,
  3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,
   3,3,3,2,3,3,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  0,0,0,1,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
  3,3,3,3,2,3,3,2,3,2,3,3,3,2,2,3,3,2,3,3,3,2,3,
   3,2,3,2,2,3,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,
  3,3,3,3,2,3,2,0,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,
   3,3,3,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,2,3,2,3,3,3,3,0,2,3,3,3,3,2,3,3,2,3,3,1,
   2,3,0,2,3,2,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,
  1,1,3,1,3,1,3,3,3,3,0,0,3,2,3,0,1,3,0,1,2,1,0,
   0,2,1,2,3,1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,2,2,2,2,3,3,3,2,3,3,3,3,3,3,2,3,3,
   3,2,3,3,2,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,2,3,3,2,2,1,3,3,3,2,1,3,3,1,3,3,0,1,3,
   3,1,2,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,2,3,1,2,1,2,2,3,2,3,3,3,3,1,3,3,0,3,3,
   3,1,2,3,0,2,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,
  3,3,3,1,3,3,3,3,3,3,1,2,3,3,3,0,0,3,0,0,3,2,3,
   0,3,0,2,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  2,2,3,2,3,3,3,3,3,3,2,2,3,3,3,0,0,3,0,0,3,2,1,
   0,2,0,2,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,0,3,3,3,3,0,3,0,2,3,3,0,3,3,3,3,3,3,2,0,3,
   3,2,2,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,3,3,3,2,3,3,3,3,1,2,3,3,3,0,0,3,0,0,3,3,1,
   0,3,0,3,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,2,3,3,3,3,2,1,3,3,3,0,0,3,0,0,3,2,2,
   0,3,0,3,2,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,0,3,1,3,3,0,0,2,3,3,0,0,0,3,3,0,3,3,0,0,3,
   3,0,3,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,1,3,1,3,3,1,1,1,2,2,3,0,0,3,3,2,3,3,2,2,2,
   2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,1,3,2,3,1,3,3,2,3,0,1,2,3,3,1,0,3,2,1,2,3,1,
   2,2,0,2,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,3,1,3,1,3,3,3,3,0,0,2,2,3,0,0,2,0,0,2,1,1,
   0,2,0,2,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,3,3,3,3,1,0,2,2,3,2,1,2,3,3,1,3,3,0,1,3,
   3,0,2,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,3,3,2,3,3,3,3,3,3,0,2,3,3,3,0,0,3,0,0,2,2,1,
   0,2,0,2,3,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
  3,3,2,3,2,3,3,1,1,2,3,3,2,0,1,3,3,2,2,3,0,1,3,
   3,0,2,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,2,3,3,3,1,1,0,3,3,3,0,3,2,2,0,3,3,0,0,3,
   3,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,3,2,3,0,3,3,2,3,0,2,2,3,2,0,0,1,0,0,2,2,1,
   0,1,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,3,2,3,1,0,0,1,2,3,1,0,2,3,3,1,2,3,0,2,3,
   2,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,1,2,2,3,3,2,3,2,2,3,2,2,2,2,0,0,
  3,3,1,3,0,3,0,0,0,0,2,3,1,1,1,2,2,1,2,2,0,0,2,
   2,0,3,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,3,3,2,2,3,3,2,2,3,1,2,2,0,0,
  0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,1,3,3,1,2,3,3,2,2,2,2,2,0,0,
  1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,2,2,2,2,2,2,1,3,2,1,2,1,0,0,
  0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,3,0,3,3,2,2,2,2,2,2,2,2,2,2,2,0,0,
  0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,1,0,0,0,0,2,0,2,2,3,3,2,2,2,2,2,2,2,2,2,0,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,2,1,1,2,2,3,2,2,2,2,2,2,0,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,3,0,3,2,0,2,2,2,2,2,1,1,3,2,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,3,0,3,2,1,1,3,2,2,2,2,1,1,2,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,3,0,3,2,1,2,2,2,1,2,2,1,1,2,1,0,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,2,1,2,2,1,2,2,1,1,3,2,1,0,0,
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,3,0,2,2,2,2,2,2,2,2,0,0,0,2,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,2,0,2,2,2,2,1,2,2,2,2,2,1,0,2,0,0,
  1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,
   0,0,0,0,0,0,0,3,0,2,3,1,1,2,2,1,1,0,1,0,2,2,0,0,
  1,3,1,0,2,0,1,1,1,2,0,0,1,0,1,0,0,0,0,0,2,0,0,
   0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  2,2,0,2,0,2,0,0,0,0,2,3,0,0,0,2,1,0,2,1,0,2,1,
   2,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_7GreekModel =
{
  Iso_8859_7_CharToOrderMap,
  GreekLangModel,
  47,
  (float)0.9624941725288916,
  PR_FALSE,
  "ISO-8859-7",
  "el"
};

const SequenceModel Windows_1253GreekModel =
{
  Windows_1253_CharToOrderMap,
  GreekLangModel,
  47,
  (float)0.9624941725288916,
  PR_FALSE,
  "WINDOWS-1253",
  "el"
};

const LanguageModel GreekModel =
{
  "el",
  Unicode_CharOrder,
  93,
  GreekLangModel,
  47,
  (float)0.9624941725288916,
};
