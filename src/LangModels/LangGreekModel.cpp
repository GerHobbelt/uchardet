/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Greek *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-06-20 01:44:01.794698
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_7_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 4X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 6X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM, 18,SYM, 19, 21, 15,SYM, 16,SYM, 24, 32, /* BX */
   59,  0, 35, 17, 20,  4, 40, 10, 28,  3,  8, 14, 11,  5, 39,  1, /* CX */
    9,  7,ILL,  6,  2, 13, 29, 23, 51, 22, 54, 60, 18, 19, 21, 15, /* DX */
   62,  0, 35, 17, 20,  4, 40, 10, 28,  3,  8, 14, 11,  5, 39,  1, /* EX */
    9,  7, 12,  6,  2, 13, 29, 23, 51, 22, 54, 60, 16, 24, 32,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1253_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 4X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 6X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,ILL,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 8X */
  ILL,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,ILL,SYM,ILL,ILL,ILL,ILL, /* 9X */
  SYM,SYM, 18,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 61,SYM,SYM, 19, 21, 15,SYM, 16,SYM, 24, 32, /* BX */
   59,  0, 35, 17, 20,  4, 40, 10, 28,  3,  8, 14, 11,  5, 39,  1, /* CX */
    9,  7,ILL,  6,  2, 13, 29, 23, 51, 22, 54, 60, 18, 19, 21, 15, /* DX */
   63,  0, 35, 17, 20,  4, 40, 10, 28,  3,  8, 14, 11,  5, 39,  1, /* EX */
    9,  7, 12,  6,  2, 13, 29, 23, 51, 22, 54, 60, 16, 24, 32,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Cp737_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 4X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 47, 38, 42, 25, 48, 46, 41, 27, 57, 53, 37, 43, 34, 30, /* 6X */
   44, 58, 33, 36, 31, 45, 50, 52, 55, 49, 56,SYM,SYM,SYM,SYM,CTR, /* 7X */
    0, 35, 17, 20,  4, 40, 10, 28,  3,  8, 14, 11,  5, 39,  1,  9, /* 8X */
    7,  6,  2, 13, 29, 23, 51, 22,  0, 35, 17, 20,  4, 40, 10, 28, /* 9X */
    3,  8, 14, 11,  5, 39,  1,  9,  7,  6, 12,  2, 13, 29, 23, 51, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* DX */
   22, 18, 19, 21, 54, 15, 16, 24, 60, 32, 18, 19, 21, 15, 16, 24, /* EX */
   32,SYM,SYM,SYM, 54, 60,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 104;
static const unsigned int Unicode_CharOrder[] =
{
  65, 26, 66, 47, 67, 38, 68, 42, 69, 25, 70, 48, 71, 46,72, 41,
  73, 27, 76, 37, 77, 43, 78, 34, 79, 30, 80, 44, 82, 33,83, 36,
  84, 31, 85, 45, 86, 50, 89, 49, 97, 26, 98, 47, 99, 38,100, 42,
  101, 25, 102, 48, 103, 46, 104, 41, 105, 27, 108, 37, 109, 43,110, 34,
  111, 30, 112, 44, 114, 33, 115, 36, 116, 31, 117, 45, 118, 50,121, 49,
  902, 18, 904, 19, 905, 21, 906, 15, 908, 16, 910, 24, 911, 32,913,  0,
  914, 35, 915, 17, 916, 20, 917,  4, 918, 40, 919, 10, 920, 28,921,  3,
  922,  8, 923, 14, 924, 11, 925,  5, 926, 39, 927,  1, 928,  9,929,  7,
  931,  6, 931, 12, 932,  2, 933, 13, 934, 29, 935, 23, 936, 51,937, 22,
  940, 18, 941, 19, 942, 21, 943, 15, 945,  0, 946, 35, 947, 17,948, 20,
  949,  4, 950, 40, 951, 10, 952, 28, 953,  3, 954,  8, 955, 14,956, 11,
  957,  5, 958, 39, 959,  1, 960,  9, 961,  7, 962, 12, 963,  6,964,  2,
  965, 13, 966, 29, 967, 23, 968, 51, 969, 22, 972, 16, 973, 24,974, 32,
};


/* Model Table:
 * Total considered sequences: 1489 / 2704
 * - Positive sequences: first 943 (0.9950338560569141)
 * - Probable sequences: next 206 (1149-943) (0.003970853902906191)
 * - Neutral sequences: last 1555 (0.0009952900401797304)
 * - Negative sequences: 1215 (off-ratio)
 * Negative sequences: TODO
 */
static const PRUint8 GreekLangModel[] =
{
  2,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,2,3,1,2,3,2,0,3,3,0,0,1,3,3,0,0,0,0,0,3,0,1,1,3,
   3,0,0,0,1,0,0,1,0,0,0,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,2,3,3,0,0,0,3,3,0,1,3,0,0,3,1,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,2,3,3,1,2,3,3,3,3,3,3,3,2,3,3,0,3,3,2,3,0,1,1,1,3,1,0,3,1,0,2,0,0,0,0,
   3,1,0,0,0,0,0,1,0,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,0,0,1,3,3,1,0,3,0,1,3,1,0,0,3,
   3,0,0,0,0,0,0,0,0,0,1,3,
  3,3,3,3,2,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,1,3,3,3,0,0,0,3,3,0,0,3,0,1,3,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,3,2,3,1,3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,1,1,0,3,2,0,0,3,0,0,2,0,0,0,1,
   3,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,2,3,3,3,3,3,3,0,3,3,3,3,2,3,3,3,3,3,3,3,0,0,0,3,3,0,0,3,0,0,3,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,1,0,3,0,0,3,0,0,1,3,
   2,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,1,3,3,3,3,3,2,3,0,0,0,3,3,1,0,3,0,0,2,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,1,3,0,3,3,1,2,3,3,3,3,0,3,3,0,3,3,0,2,0,0,0,0,1,1,0,3,0,0,1,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,
  1,1,3,1,2,3,3,3,3,3,1,3,3,0,3,1,0,3,0,1,3,1,1,3,1,0,0,0,3,3,0,0,1,0,0,3,0,0,0,3,
   0,0,0,0,1,0,0,0,0,0,0,3,
  3,3,2,3,3,3,2,1,0,3,3,3,2,3,1,3,3,1,3,3,0,3,3,0,3,0,0,1,0,3,0,0,3,0,0,3,0,2,1,0,
   0,0,0,0,0,0,0,0,0,0,0,2,
  1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,0,3,3,3,3,3,3,3,3,2,3,0,0,0,0,3,3,0,0,2,0,0,3,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,2,0,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,0,0,0,3,3,0,0,3,0,0,3,0,0,0,1,
   1,0,0,0,0,0,0,0,0,0,0,2,
  3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,0,0,3,0,0,3,0,3,3,0,0,0,0,3,3,0,0,0,0,0,3,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,2,
  1,3,3,3,2,3,3,3,3,3,3,3,3,1,3,0,0,3,0,0,3,0,1,3,0,0,0,0,3,3,0,0,0,0,0,3,0,0,0,2,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,1,3,3,3,0,3,3,1,3,3,0,3,3,3,3,3,3,3,2,3,3,3,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,1,
   0,0,0,0,0,0,0,0,0,0,0,0,
  1,3,3,3,3,3,3,3,3,3,1,3,3,1,3,0,0,3,0,0,3,0,1,3,0,0,0,0,3,3,0,0,0,0,0,3,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,3,3,3,3,3,3,3,3,1,3,3,1,3,0,0,3,0,0,3,0,3,3,0,0,0,0,3,3,0,0,0,0,0,3,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  3,3,0,3,3,1,1,3,0,0,3,0,0,3,1,3,3,0,3,3,0,3,3,0,3,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,3,1,1,3,3,3,3,3,0,3,3,0,3,0,0,3,0,0,3,0,0,3,0,0,0,0,3,3,0,0,0,0,0,1,0,0,0,3,
   1,0,0,0,0,0,0,0,0,0,0,2,
  2,3,3,2,1,3,3,3,3,3,1,3,3,1,3,1,1,3,2,1,3,3,0,2,0,0,0,0,3,2,0,0,1,0,0,3,0,0,0,3,
   1,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,1,3,0,0,3,2,1,3,3,3,3,0,3,3,0,3,3,0,3,1,0,0,3,0,0,0,3,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,2,3,3,3,3,3,3,1,3,3,0,3,0,0,3,0,0,3,0,2,3,0,0,0,0,3,3,0,0,0,0,0,2,0,0,0,3,
   3,0,0,0,0,0,0,0,0,0,0,3,
  0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,3,0,3,3,3,0,
   0,3,3,3,3,3,3,3,3,3,3,0,
  0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,3,0,0,2,3,0,3,3,0,3,3,3,0,
   0,3,3,3,3,3,3,3,3,3,3,0,
  0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,3,0,3,3,3,0,
   0,1,3,3,3,3,3,3,3,1,3,0,
  3,3,0,3,3,3,1,3,0,0,3,3,0,3,3,3,3,0,3,3,0,3,3,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,1,1,3,0,0,3,1,0,3,3,3,3,0,3,3,0,3,3,0,3,0,0,0,3,1,0,0,3,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,0,0,3,3,0,3,3,0,3,3,3,0,
   0,3,3,3,3,3,3,3,3,3,3,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,2,0,3,3,3,0,
   0,3,1,2,3,3,2,2,3,3,2,0,
  3,2,3,3,1,3,3,3,2,3,3,3,3,0,3,0,0,2,0,0,3,0,3,1,0,0,0,0,3,2,0,0,0,0,0,3,0,0,0,3,
   1,0,0,0,0,0,0,0,0,0,0,1,
  0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,3,0,3,3,3,0,
   0,2,3,3,3,3,3,3,2,3,3,0,
  0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,3,0,0,3,3,0,2,3,0,3,2,3,0,
   0,2,3,2,1,3,3,3,3,3,2,0,
  3,3,1,3,3,0,0,3,0,0,3,2,1,3,3,3,3,2,3,3,3,3,2,0,2,1,0,0,0,0,0,0,2,0,0,2,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,2,2,0,3,3,3,0,
   0,3,2,3,3,3,1,3,2,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,1,2,0,3,3,2,0,
   0,0,3,3,2,3,2,3,2,3,2,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,1,0,3,3,0,3,2,0,3,3,3,0,
   0,3,3,3,2,3,2,1,1,3,1,0,
  3,3,2,3,3,0,0,0,0,1,3,1,0,3,1,3,3,1,3,3,0,3,3,0,3,0,0,0,0,1,0,0,2,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  3,3,0,3,3,1,1,1,1,1,3,1,0,3,1,3,3,1,3,3,0,3,3,0,3,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,3,0,2,2,2,0,
   0,0,2,2,2,3,1,2,1,3,2,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,1,0,3,3,0,3,2,2,0,
   0,1,3,2,2,3,2,2,2,3,3,0,
  0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,2,0,2,1,0,3,2,2,0,
   0,2,2,3,3,3,1,3,0,3,1,0,
  1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,1,0,3,3,3,0,
   0,3,2,2,3,3,2,2,1,2,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,2,3,0,3,3,0,3,3,3,0,
   0,2,3,3,3,1,3,3,1,1,2,0,
  0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,1,0,3,3,0,3,3,1,0,
   0,3,1,2,2,3,2,2,1,3,0,0,
  1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,1,0,3,3,0,2,3,3,0,
   0,2,1,3,1,3,0,3,0,3,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,0,3,0,0,2,3,1,0,
   0,1,1,1,1,3,0,1,3,1,0,0,
  0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,0,0,3,3,0,2,2,0,3,2,2,0,
   0,1,2,2,2,1,1,3,1,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,1,0,1,0,0,1,1,1,0,
   0,0,2,1,0,2,1,0,0,2,1,0,
  3,3,1,2,3,0,0,0,0,0,3,0,0,3,0,3,2,0,2,0,0,3,3,0,2,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_7GreekModel =
{
  Iso_8859_7_CharToOrderMap,
  GreekLangModel,
  52,
  (float)0.9990047099598203,
  PR_FALSE,
  "ISO-8859-7",
  "el"
};

const SequenceModel Windows_1253GreekModel =
{
  Windows_1253_CharToOrderMap,
  GreekLangModel,
  52,
  (float)0.9990047099598203,
  PR_FALSE,
  "WINDOWS-1253",
  "el"
};

const SequenceModel Cp737GreekModel =
{
  Cp737_CharToOrderMap,
  GreekLangModel,
  52,
  (float)0.9990047099598203,
  PR_FALSE,
  "CP737",
  "el"
};

const LanguageModel GreekModel =
{
  "el",
  Unicode_CharOrder,
  104,
  GreekLangModel,
  52,
  6,
  (float)0.4098947590261486,
  38,
  (float)0.0325497287522604,
  (float)0.9956578560103874,
};
