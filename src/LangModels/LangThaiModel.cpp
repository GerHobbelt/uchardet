/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsLanguageDetector.h"

/********* Language model for: Thai *********/

/**
 * Generated by BuildLangModel.py
 * On: 2021-03-16 20:29:56.647545
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_11_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 66, 74, 57, 76, 86, 83, 87, 80, 64, 95, 94, 79, 78, 77, 82, /* 4X */
   75,104, 72, 56, 71, 93, 81, 89,103, 96, 97,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 37, 73, 51, 54, 38, 68, 67, 49, 39, 99, 84, 48, 58, 42, 44, /* 6X */
   65,101, 45, 47, 46, 50, 70, 85,100, 61, 92,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,  3, 25,106, 15,107, 88,  6, 22, 55, 23, 29,102, 41, 69, 59, /* AX */
   40, 90, 63, 35, 11, 14, 32, 13, 33,  1, 17, 18, 31, 62, 21, 43, /* BX */
   34,  7,  9,  2, 53, 10,108,  8, 26, 36, 12, 20, 91,  4, 52, 98, /* CX */
   16,SYM,  0, 30,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,ILL,ILL,ILL,SYM, /* DX */
    5, 19, 27, 24, 28,105, 60,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,109, /* EX */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,110,111,ILL,ILL,ILL,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Tis_620_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 66, 74, 57, 76, 86, 83, 87, 80, 64, 95, 94, 79, 78, 77, 82, /* 4X */
   75,104, 72, 56, 71, 93, 81, 89,103, 96, 97,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 37, 73, 51, 54, 38, 68, 67, 49, 39, 99, 84, 48, 58, 42, 44, /* 6X */
   65,101, 45, 47, 46, 50, 70, 85,100, 61, 92,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  ILL,  3, 25,112, 15,113, 88,  6, 22, 55, 23, 29,102, 41, 69, 59, /* AX */
   40, 90, 63, 35, 11, 14, 32, 13, 33,  1, 17, 18, 31, 62, 21, 43, /* BX */
   34,  7,  9,  2, 53, 10,114,  8, 26, 36, 12, 20, 91,  4, 52, 98, /* CX */
   16,SYM,  0, 30,SYM,SYM,SYM,SYM,SYM,SYM,SYM,ILL,ILL,ILL,ILL,SYM, /* DX */
    5, 19, 27, 24, 28,105, 60,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,115, /* EX */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,116,117,ILL,ILL,ILL,ILL, /* FX */
};
/*X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 64;
static const unsigned int Unicode_CharOrder[] =
{
    67, 57,   83, 56,   97, 37,   99, 51,  100, 54,  101, 38,  104, 49, 105, 39,
   108, 48,  109, 58,  110, 42,  111, 44,  114, 45,  115, 47,  116, 46, 117, 50,
   121, 61, 3585,  3, 3586, 25, 3588, 15, 3591,  6, 3592, 22, 3593, 55,3594, 23,
  3595, 29, 3597, 41, 3599, 59, 3600, 40, 3602, 63, 3603, 35, 3604, 11,3605, 14,
  3606, 32, 3607, 13, 3608, 33, 3609,  1, 3610, 17, 3611, 18, 3612, 31,3613, 62,
  3614, 21, 3615, 43, 3616, 34, 3617,  7, 3618,  9, 3619,  2, 3620, 53,3621, 10,
  3623,  8, 3624, 26, 3625, 36, 3626, 12, 3627, 20, 3629,  4, 3630, 52,3632, 16,
  3634,  0, 3635, 30, 3648,  5, 3649, 19, 3650, 27, 3651, 24, 3652, 28,3654, 60,
};


/* Model Table:
 * Total sequences: 2704
 * First 512 sequences: 0.8690353564146914
 * Next 512 sequences (512-1024): 0.09940380137019393
 * Rest: 0.03156084221511464
 * Negative sequences: TODO
 */
static const PRUint8 ThaiLangModel[] =
{
  1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,2,
   2,3,2,3,3,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,1,0,0,1,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,
   3,3,3,1,1,0,0,0,2,1,0,2,0,0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,1,0,2,0,
  3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,2,3,3,2,3,3,2,3,2,2,1,2,
   3,1,2,3,3,0,0,0,2,1,0,2,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,1,0,0,1,1,
  3,3,3,3,3,3,2,3,3,2,3,3,3,3,3,3,2,3,3,3,2,2,3,2,3,3,2,3,3,3,3,2,
   2,1,2,1,3,0,0,0,2,1,0,3,0,0,0,0,0,0,0,0,1,3,0,1,1,0,0,2,1,0,1,0,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,1,2,3,2,3,2,
   2,2,2,0,1,0,0,0,1,1,0,3,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,1,0,
  0,3,3,3,3,0,2,3,3,3,3,3,3,3,3,3,0,3,3,1,3,3,3,3,0,3,3,0,0,3,0,2,
   1,3,2,2,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,3,0,0,0,1,0,0,1,0,
  3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,2,3,3,3,1,3,
   3,1,2,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,2,0,
  3,3,3,3,3,3,2,3,3,2,2,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,2,3,3,1,0,2,
   2,1,3,2,2,0,0,0,1,1,0,2,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,
  3,3,3,3,3,3,3,3,2,3,3,2,2,3,2,2,2,3,2,2,2,2,3,2,2,2,1,3,3,2,0,1,
   1,0,1,2,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,
  3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,1,2,
   2,2,2,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,2,0,
  3,3,2,3,3,3,3,2,2,2,3,3,3,3,2,2,3,2,3,2,2,1,2,3,2,2,1,2,2,2,2,1,
   1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,
  3,3,3,3,3,3,3,2,2,3,3,2,3,3,3,2,1,2,2,3,2,2,3,2,3,3,1,2,2,2,2,2,
   1,1,2,0,1,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,
  3,3,3,3,3,3,3,3,3,1,2,3,2,2,3,1,2,2,2,2,3,1,1,1,2,1,1,3,2,2,3,1,
   3,2,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,
  3,3,3,1,3,2,1,2,3,3,1,3,2,1,1,3,2,2,1,1,3,2,1,1,1,1,3,1,1,1,3,1,
   0,3,1,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,
  3,3,3,3,3,3,1,2,3,3,3,1,3,2,2,1,3,3,1,2,1,1,2,2,2,2,1,1,2,1,2,2,
   1,1,2,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,
  3,3,3,2,3,3,2,3,3,2,3,2,2,2,2,2,2,2,1,2,2,1,1,1,2,1,1,3,1,3,3,1,
   1,1,1,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,
  0,3,3,3,3,3,1,3,3,3,2,3,3,3,3,3,1,3,3,3,3,3,3,3,3,2,2,3,3,2,0,2,
   2,3,2,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,1,0,
  3,3,3,3,3,3,1,2,3,2,2,3,3,3,3,3,1,3,3,3,2,2,2,2,2,2,1,3,3,2,1,3,
   1,1,2,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,2,1,0,1,0,
  3,3,3,3,3,2,1,1,2,2,3,2,2,2,2,1,2,1,2,2,1,1,2,1,2,1,1,2,2,1,0,1,
   2,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,0,0,1,0,
  0,3,3,3,3,0,1,3,2,2,3,3,3,3,3,3,0,3,3,0,3,3,2,2,0,3,0,0,0,2,0,3,
   2,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,
  3,3,3,2,1,0,1,3,3,2,3,1,1,1,3,1,1,1,2,0,0,1,0,0,0,0,1,0,0,0,0,0,
   0,0,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,1,2,2,1,2,2,3,3,1,2,2,1,1,1,3,1,2,1,1,1,2,2,2,2,1,1,2,1,1,
   1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,1,0,
  3,3,3,2,3,2,1,3,1,1,2,2,2,2,2,1,3,2,1,2,1,2,3,1,2,2,1,1,2,1,3,1,
   1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,
  3,3,1,2,3,2,1,2,2,2,2,1,2,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
   1,1,1,1,1,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  0,3,0,2,0,0,0,0,0,1,0,2,2,0,3,1,0,2,0,0,3,0,3,3,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  3,3,1,1,3,1,1,1,2,2,1,1,1,1,3,1,1,2,1,1,1,1,1,1,1,1,0,1,1,1,1,0,
   1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,2,2,2,1,2,2,2,2,1,2,2,3,1,1,2,1,2,1,1,3,1,2,2,1,1,2,2,0,1,
   1,0,1,0,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,
  0,3,3,2,3,0,1,3,1,2,3,3,1,2,3,3,0,2,3,0,1,3,2,1,0,1,1,0,0,2,0,1,
   1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,
  0,2,3,2,2,0,1,3,3,0,2,3,1,3,2,2,0,2,3,0,2,2,1,1,0,2,1,0,0,2,0,0,
   1,1,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,
  3,2,1,1,2,2,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,1,0,1,0,0,0,2,1,1,0,1,
   0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,3,3,3,2,3,2,2,2,1,3,2,2,2,1,3,0,2,2,3,3,1,2,1,3,2,1,1,2,1,0,1,
   1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,
  1,2,0,1,1,0,1,1,1,2,3,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,
   1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  3,2,3,1,2,1,1,2,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
   0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,
  3,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,
   0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
  3,1,2,2,1,1,1,1,1,1,1,1,2,1,1,1,3,1,2,1,2,1,1,1,1,1,2,1,1,1,0,0,
   0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,
  3,1,1,1,1,1,0,1,1,2,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
   1,0,2,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,1,1,2,0,0,3,0,1,3,3,2,3,2,1,2,0,0,2,0,0,1,2,0,0,2,0,0,
  0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
   0,0,0,0,0,2,1,2,0,0,3,1,1,3,2,3,2,1,1,2,0,0,2,0,0,0,2,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,2,0,0,0,3,0,3,2,3,3,2,1,1,3,0,0,2,0,0,0,2,0,0,1,0,0,
  3,1,1,2,2,2,0,2,1,1,1,1,2,1,1,1,0,3,2,2,1,1,1,1,1,1,1,1,1,1,0,1,
   1,2,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,
  3,1,1,2,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,2,1,1,0,1,1,1,0,0,
   1,1,1,0,0,0,0,0,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,3,2,2,0,0,1,0,2,1,3,2,1,1,1,2,0,0,2,0,0,1,1,0,0,1,0,0,
  2,2,2,1,3,3,0,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
   0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,1,1,1,0,0,3,0,2,3,2,1,2,1,2,2,0,0,2,0,0,0,2,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
   0,0,0,0,0,3,3,3,0,0,2,0,2,1,2,2,1,1,2,2,0,0,2,0,0,1,1,0,0,2,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,3,3,0,0,1,0,2,2,1,1,1,2,2,1,0,0,1,0,0,1,1,0,0,2,0,0,
  0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,
   0,0,0,0,0,1,2,2,0,0,1,1,2,1,3,2,1,2,1,1,0,0,1,0,0,0,1,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,2,2,0,0,1,0,2,0,2,1,2,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,
  0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,3,2,0,0,1,0,2,2,1,1,1,1,2,1,0,0,1,0,0,0,1,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,1,1,0,0,2,0,1,2,2,2,2,1,0,1,0,0,1,0,0,0,2,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,2,2,0,0,0,0,2,1,2,1,1,2,1,1,0,0,0,0,0,1,0,0,0,1,0,0,
  2,1,1,1,2,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,1,0,0,0,1,0,0,0,2,0,2,2,1,0,0,0,0,1,1,0,1,0,0,2,0,0,0,0,0,
   0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,2,2,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,
  2,1,1,1,0,0,1,1,1,1,2,1,0,0,0,0,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,1,1,1,0,0,1,0,1,1,2,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,1,1,0,0,0,0,3,1,0,0,1,2,1,0,0,0,0,0,1,1,0,0,0,1,0,0,
  0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,2,2,0,0,1,0,2,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,
  1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,
   1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
  0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,2,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,
  1,1,2,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,3,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
   0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};


const SequenceModel Iso_8859_11ThaiModel =
{
  Iso_8859_11_CharToOrderMap,
  ThaiLangModel,
  64,
  (float)0.8690353564146914,
  PR_FALSE,
  "ISO-8859-11",
  "th"
};

const SequenceModel Tis_620ThaiModel =
{
  Tis_620_CharToOrderMap,
  ThaiLangModel,
  64,
  (float)0.8690353564146914,
  PR_FALSE,
  "TIS-620",
  "th"
};

const LanguageModel ThaiModel =
{
  "th",
  Unicode_CharOrder,
  64,
  ThaiLangModel,
  64,
  (float)0.8690353564146914,
};
