/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "../nsSBCharSetProber.h"
#include "../nsSBCharSetProber-generated.h"
#include "../nsLanguageDetector.h"

#include "../nsLanguageDetector-generated.h"

/********* Language model for: Hebrew *********/

/**
 * Generated by BuildLangModel.py
 * On: 2023-07-06 20:51:37.188027
 **/

/* Character Mapping Table:
 * ILL: illegal character.
 * CTR: control character specific to the charset.
 * RET: carriage/return.
 * SYM: symbol (punctuation) that does not belong to word.
 * NUM: 0 - 9.
 *
 * Other characters are ordered by probabilities
 * (0 is the most common character in the language).
 *
 * Orders are generic to a language. So the codepoint with order X in
 * CHARSET1 maps to the same character as the codepoint with the same
 * order X in CHARSET2 for the same language.
 * As such, it is possible to get missing order. For instance the
 * ligature of 'o' and 'e' exists in ISO-8859-15 but not in ISO-8859-1
 * even though they are both used for French. Same for the euro sign.
 */
static const unsigned char Iso_8859_8_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 45, 50, 47, 49, 61, 59, 57, 62, 51, 73, 68, 58, 44, 66, 64, /* 4X */
   53, 77, 60, 41, 42, 72, 67, 65, 74, 71, 78,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 55, 37, 39, 24, 54, 43, 38, 28, 75, 52, 34, 40, 30, 27, /* 6X */
   48, 76, 29, 33, 31, 36, 56, 63, 70, 46, 69,SYM,SYM,SYM,SYM,CTR, /* 7X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 8X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 9X */
  SYM,CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM, 96,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,CTR, /* BX */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* CX */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,SYM, /* DX */
    8,  6, 20, 12,  2,  1, 23, 15, 19,  0, 25, 18,  3, 11,  7, 22, /* EX */
   10, 17, 13, 32, 16, 35, 21, 14,  4,  9,  5,CTR,CTR,SYM,SYM,CTR, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Windows_1255_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 45, 50, 47, 49, 61, 59, 57, 62, 51, 73, 68, 58, 44, 66, 64, /* 4X */
   53, 77, 60, 41, 42, 72, 67, 65, 74, 71, 78,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 55, 37, 39, 24, 54, 43, 38, 28, 75, 52, 34, 40, 30, 27, /* 6X */
   48, 76, 29, 33, 31, 36, 56, 63, 70, 46, 69,SYM,SYM,SYM,SYM,CTR, /* 7X */
  SYM,CTR,SYM, 97,SYM,SYM,SYM,SYM, 98,SYM,CTR,SYM,CTR,CTR,CTR,CTR, /* 8X */
  CTR,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,CTR,SYM,CTR,CTR,CTR,CTR, /* 9X */
  SYM,SYM,SYM,SYM, 99,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,100,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  SYM,SYM,SYM,SYM, 81,101, 92,SYM,SYM,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* DX */
    8,  6, 20, 12,  2,  1, 23, 15, 19,  0, 25, 18,  3, 11,  7, 22, /* EX */
   10, 17, 13, 32, 16, 35, 21, 14,  4,  9,  5,CTR,CTR,SYM,SYM,CTR, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const unsigned char Ibm862_CharToOrderMap[] =
{
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,RET,CTR,CTR,RET,CTR,CTR, /* 0X */
  CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR,CTR, /* 1X */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* 2X */
  NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,NUM,SYM,SYM,SYM,SYM,SYM,SYM, /* 3X */
  SYM, 45, 50, 47, 49, 61, 59, 57, 62, 51, 73, 68, 58, 44, 66, 64, /* 4X */
   53, 77, 60, 41, 42, 72, 67, 65, 74, 71, 78,SYM,SYM,SYM,SYM,SYM, /* 5X */
  SYM, 26, 55, 37, 39, 24, 54, 43, 38, 28, 75, 52, 34, 40, 30, 27, /* 6X */
   48, 76, 29, 33, 31, 36, 56, 63, 70, 46, 69,SYM,SYM,SYM,SYM,CTR, /* 7X */
    8,  6, 20, 12,  2,  1, 23, 15, 19,  0, 25, 18,  3, 11,  7, 22, /* 8X */
   10, 17, 13, 32, 16, 35, 21, 14,  4,  9,  5,SYM,SYM,SYM,SYM,102, /* 9X */
   79, 82, 83, 85, 90,103,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* AX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* BX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* CX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* DX */
   84, 87,104, 88, 93, 91,105, 86,106, 94,107, 89,SYM, 95, 80,SYM, /* EX */
  SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM,SYM, /* FX */
};
/* X0  X1  X2  X3  X4  X5  X6  X7  X8  X9  XA  XB  XC  XD  XE  XF */

static const int Unicode_Char_size = 64;
static const unsigned int Unicode_CharOrder[] =
{
  65, 45, 66, 50, 67, 47, 68, 49, 69, 61, 70, 59, 71, 57, 72, 62,
  73, 51, 76, 58, 77, 44, 80, 53, 82, 60, 83, 41, 84, 42, 97, 26,
  98, 55, 99, 37, 100, 39, 101, 24, 102, 54, 103, 43, 104, 38, 105, 28,
  107, 52, 108, 34, 109, 40, 110, 30, 111, 27, 112, 48, 114, 29, 115, 33,
  116, 31, 117, 36, 118, 56, 119, 63, 121, 46, 1488,  8, 1489,  6, 1490, 20,
  1491, 12, 1492,  2, 1493,  1, 1494, 23, 1495, 15, 1496, 19, 1497,  0, 1498, 25,
  1499, 18, 1500,  3, 1501, 11, 1502,  7, 1503, 22, 1504, 10, 1505, 17, 1506, 13,
  1507, 32, 1508, 16, 1509, 35, 1510, 21, 1511, 14, 1512,  4, 1513,  9, 1514,  5,
};


/* Model Table:
 * Number of web pages processed for this model: 882
 * Number of characters consumed for this model: 4117775
 * Total considered sequences: 2426 / 4096
 *
 * - Positive sequences: first 907 (0.9950131392563404)
 * - Probable sequences: next 436 (1343-907) (0.003988128935287549)
 * - Neutral sequences: last 2753 (0.0009987318083720664)
 * - Negative sequences: 1670 (off-ratio, TODO)
 */


#define HebrewFCMLowerBound  65
#define HebrewFCMUpperBound  1514


static const PRUint8 HebrewFrequentCharMapping[] =
{
  46,51,48,50,62,60,58,63,52,0,0,59,45,0,0,54,0,61,42,43,
  0,0,0,0,0,0,0,0,0,0,0,0,27,56,38,40,25,55,44,39,
  29,0,53,35,41,31,28,49,0,30,34,32,37,57,64,0,47,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,9,7,21,13,3,2,24,16,20,1,26,19,4,12,8,23,11,
  18,14,33,17,36,22,15,5,10,6,
};

static const PRUint8 HebrewCompactedLangModel[] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,3,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,0,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,1,0,2,1,1,1,2,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,2,3,3,3,3,1,3,1,3,3,3,3,3,3,3,3,0,1,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,0,0,0,0,0,0,0,0,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,3,3,3,3,3,3,3,3,0,1,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,1,3,3,2,3,3,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,2,0,3,3,3,3,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,2,2,3,2,3,3,3,2,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,0,3,3,0,3,3,2,3,3,1,1,3,2,0,3,2,3,1,1,1,3,1,3,3,3,1,1,1,1,0,1,3,
  
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,0,2,1,3,3,3,3,0,3,3,0,3,3,3,3,3,2,1,3,0,0,3,0,3,0,0,0,3,0,3,3,3,0,1,0,0,0,0,3,
  
  0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,0,3,3,0,3,3,2,3,3,0,1,3,0,0,3,1,3,1,0,1,3,2,3,3,3,1,0,0,0,0,1,3,
  
  0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,3,3,2,3,3,3,0,3,3,0,3,3,1,3,3,1,2,3,1,0,1,1,3,1,0,0,3,1,3,3,3,1,1,1,1,0,1,1,
  
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,0,3,3,0,3,3,2,3,3,1,1,3,1,0,3,1,3,0,0,0,3,1,2,3,3,1,0,1,0,1,0,2,
  
  0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,2,3,3,0,3,2,0,3,3,2,3,2,1,0,3,1,2,3,1,1,2,1,0,3,0,2,2,2,0,1,0,1,0,1,2,
  
  0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,3,0,3,3,3,3,2,3,0,3,3,0,3,3,3,1,2,1,1,1,1,1,3,1,2,0,1,0,1,0,2,3,2,2,0,0,1,1,1,2,
  
  0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,3,3,3,2,1,3,0,3,2,0,3,3,3,2,2,1,1,1,1,0,2,0,3,0,0,0,3,1,2,2,1,0,0,1,1,0,0,1,
  
  0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,1,1,3,0,3,3,0,3,2,2,3,3,1,0,1,3,0,3,0,2,2,0,0,3,0,2,2,2,0,0,1,0,0,0,2,
  
  0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,3,0,3,1,3,3,3,3,0,3,3,0,1,3,1,3,3,0,2,3,0,1,1,0,3,0,1,0,2,1,2,3,2,0,0,1,0,0,0,0,
  
  0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,3,0,3,3,3,3,1,3,0,3,3,0,3,3,3,0,1,0,1,0,1,1,2,1,0,1,3,0,3,0,0,0,0,2,0,1,0,0,0,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,0,2,2,0,3,0,1,1,2,0,0,1,1,0,3,1,0,1,0,0,2,1,1,1,1,1,0,0,2,0,0,2,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,3,3,3,3,2,2,0,3,2,0,3,1,1,2,2,2,0,2,0,1,3,1,1,0,2,2,0,1,1,2,2,0,0,2,1,0,2,1,
  
  0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,3,3,3,1,2,1,0,3,1,0,3,1,0,1,3,0,1,0,0,0,2,0,3,0,0,0,0,1,1,3,0,0,0,1,0,0,0,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,1,1,3,0,1,2,0,3,3,3,0,2,2,2,1,2,3,2,2,3,2,1,2,2,2,1,0,0,1,1,1,1,2,2,2,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,0,3,3,3,3,0,0,0,1,1,0,3,0,3,0,0,2,1,0,2,2,1,2,0,1,1,2,0,3,0,0,1,1,2,1,2,2,2,2,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,2,2,0,3,3,0,3,0,3,1,1,0,0,2,1,1,2,0,1,0,1,1,2,0,1,1,1,1,0,1,0,1,1,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,2,1,0,0,1,0,0,3,2,1,0,0,2,2,1,1,2,3,2,0,3,1,2,0,2,1,1,0,1,2,1,1,2,1,0,
  
  0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,3,3,2,0,2,3,0,2,2,1,2,3,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,1,2,1,1,2,
  
  0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,2,2,2,3,2,0,3,3,0,2,2,1,2,2,2,1,2,0,0,0,1,2,1,0,1,1,0,1,3,1,0,0,1,0,0,0,1,
  
  0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,3,3,3,1,1,0,1,3,0,2,0,3,0,0,2,1,0,2,2,3,2,0,2,2,2,0,2,0,0,1,2,1,1,2,2,2,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,2,3,0,3,3,0,3,0,3,1,2,0,0,1,1,0,2,1,3,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,3,3,3,3,0,0,0,1,0,0,2,0,0,0,0,2,1,0,1,2,2,2,0,2,2,1,0,1,0,3,0,1,1,2,1,3,1,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,2,3,0,0,0,1,3,0,3,0,0,0,0,2,2,0,2,2,2,3,1,2,2,2,0,1,0,0,0,0,1,1,1,1,0,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,2,3,3,0,3,2,0,1,2,0,2,2,3,2,1,3,3,2,2,1,2,2,3,1,2,2,1,1,2,2,1,1,1,1,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,2,3,2,1,3,0,2,3,0,2,1,1,0,1,1,1,1,1,0,2,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,2,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,0,3,3,3,3,0,1,0,2,3,0,2,0,2,0,0,2,3,1,1,2,1,2,0,2,1,2,0,1,1,0,1,1,3,1,2,1,1,1,
  
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,3,3,3,1,3,0,1,2,0,2,0,0,1,2,0,0,1,1,0,1,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,1,1,0,2,3,0,3,1,1,1,2,0,0,0,0,0,2,1,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,2,3,2,1,0,0,1,0,0,1,1,0,2,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,0,3,3,2,3,1,0,0,1,2,0,2,0,2,0,1,1,1,0,1,2,1,1,0,1,2,2,0,3,0,1,0,1,1,1,1,2,1,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,0,0,1,0,0,1,0,2,0,1,0,0,1,1,0,1,2,1,2,0,1,1,2,0,1,0,0,1,1,1,3,1,2,1,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,0,0,0,1,2,0,3,0,0,0,0,2,1,0,2,2,0,1,0,1,2,2,0,1,0,0,1,1,2,1,1,2,1,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,0,0,0,0,1,0,0,2,0,2,1,0,2,2,0,1,2,1,2,0,1,1,2,0,2,0,0,0,2,1,1,1,2,1,0,
  
  0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,2,3,2,0,2,2,0,2,2,1,2,2,3,1,2,2,2,2,2,2,3,1,1,1,2,1,0,3,1,1,1,2,2,0,1,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,1,0,1,0,0,0,0,3,0,0,0,0,1,1,1,1,2,2,1,0,1,1,2,0,1,0,0,1,0,2,1,1,1,1,0,
  
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,2,3,1,2,1,0,2,2,0,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,2,0,0,0,1,0,0,1,2,
  
};


const SequenceModel Iso_8859_8HebrewModel =
{
  Iso_8859_8_CharToOrderMap,
  HebrewFCMLowerBound,
  HebrewFCMUpperBound,
  HebrewFrequentCharMapping,
  HebrewCompactedLangModel,
  64,
  (float)0.9990012681916279,
  PR_FALSE,
  "ISO-8859-8",
  "he"
};

const SequenceModel Windows_1255HebrewModel =
{
  Windows_1255_CharToOrderMap,
  HebrewFCMLowerBound,
  HebrewFCMUpperBound,
  HebrewFrequentCharMapping,
  HebrewCompactedLangModel,
  64,
  (float)0.9990012681916279,
  PR_FALSE,
  "WINDOWS-1255",
  "he"
};

const SequenceModel Ibm862HebrewModel =
{
  Ibm862_CharToOrderMap,
  HebrewFCMLowerBound,
  HebrewFCMUpperBound,
  HebrewFrequentCharMapping,
  HebrewCompactedLangModel,
  64,
  (float)0.9990012681916279,
  PR_FALSE,
  "IBM862",
  "he"
};

const LanguageModel HebrewModel =
{
  "he",
  Unicode_CharOrder,
  64,
  HebrewFCMLowerBound,
  HebrewFCMUpperBound,
  HebrewFrequentCharMapping,
  HebrewCompactedLangModel,
  64,
  5,
  (float)0.4257942699637547,
  27,
  (float)0.03203161901755196,
  (float)0.9980448178931584,
};
